
Compass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000007f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da5  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b6  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063c  00000000  00000000  00001f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  000025b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bc  00000000  00000000  000026f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000248  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2a c0       	rjmp	.+84     	; 0x56 <__ctors_end>
   2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	41 c0       	rjmp	.+130    	; 0x8a <__bad_interrupt>
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	3f c0       	rjmp	.+126    	; 0x8a <__bad_interrupt>
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	3d c0       	rjmp	.+122    	; 0x8a <__bad_interrupt>
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	3b c0       	rjmp	.+118    	; 0x8a <__bad_interrupt>
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	39 c0       	rjmp	.+114    	; 0x8a <__bad_interrupt>
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	37 c0       	rjmp	.+110    	; 0x8a <__bad_interrupt>
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	35 c0       	rjmp	.+106    	; 0x8a <__bad_interrupt>
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	33 c0       	rjmp	.+102    	; 0x8a <__bad_interrupt>
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	08 4a       	sbci	r16, 0xA8	; 168
  28:	d7 3b       	cpi	r29, 0xB7	; 183
  2a:	3b ce       	rjmp	.-906    	; 0xfffffca2 <__eeprom_end+0xff7efca2>
  2c:	01 6e       	ori	r16, 0xE1	; 225
  2e:	84 bc       	out	0x24, r8	; 36
  30:	bf fd       	.word	0xfdbf	; ????
  32:	c1 2f       	mov	r28, r17
  34:	3d 6c       	ori	r19, 0xCD	; 205
  36:	74 31       	cpi	r23, 0x14	; 20
  38:	9a bd       	out	0x2a, r25	; 42
  3a:	56 83       	std	Z+6, r21	; 0x06
  3c:	3d da       	rcall	.-2950   	; 0xfffff4b8 <__eeprom_end+0xff7ef4b8>
  3e:	3d 00       	.word	0x003d	; ????
  40:	c7 7f       	andi	r28, 0xF7	; 247
  42:	11 be       	out	0x31, r1	; 49
  44:	d9 e4       	ldi	r29, 0x49	; 73
  46:	bb 4c       	sbci	r27, 0xCB	; 203
  48:	3e 91       	ld	r19, -X
  4a:	6b aa       	std	Y+51, r6	; 0x33
  4c:	aa be       	out	0x3a, r10	; 58
  4e:	00 00       	nop
  50:	00 80       	ld	r0, Z
  52:	3f 00       	.word	0x003f	; ????

00000054 <__ctors_start>:
  54:	ee 00       	.word	0x00ee	; ????

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d4 e0       	ldi	r29, 0x04	; 4
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_clear_bss>:
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	01 c0       	rjmp	.+2      	; 0x6c <.do_clear_bss_start>

0000006a <.do_clear_bss_loop>:
  6a:	1d 92       	st	X+, r1

0000006c <.do_clear_bss_start>:
  6c:	a8 36       	cpi	r26, 0x68	; 104
  6e:	b2 07       	cpc	r27, r18
  70:	e1 f7       	brne	.-8      	; 0x6a <.do_clear_bss_loop>

00000072 <__do_global_ctors>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	cb e2       	ldi	r28, 0x2B	; 43
  76:	d0 e0       	ldi	r29, 0x00	; 0
  78:	03 c0       	rjmp	.+6      	; 0x80 <__do_global_ctors+0xe>
  7a:	21 97       	sbiw	r28, 0x01	; 1
  7c:	fe 01       	movw	r30, r28
  7e:	77 d3       	rcall	.+1774   	; 0x76e <__tablejump2__>
  80:	ca 32       	cpi	r28, 0x2A	; 42
  82:	d1 07       	cpc	r29, r17
  84:	d1 f7       	brne	.-12     	; 0x7a <__do_global_ctors+0x8>
  86:	96 d0       	rcall	.+300    	; 0x1b4 <main>
  88:	78 c3       	rjmp	.+1776   	; 0x77a <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <_ZN7CompassC1Ev>:
#define X_OFFSET -8.5
#define Y_OFFSET -85



Compass::Compass(void)
  8c:	cf 93       	push	r28
  8e:	df 93       	push	r29
  90:	ec 01       	movw	r28, r24
{
	i2c_init();
  92:	a8 d0       	rcall	.+336    	; 0x1e4 <_Z8i2c_initv>
	raw_x=0;
  94:	19 82       	std	Y+1, r1	; 0x01
  96:	18 82       	st	Y, r1
	raw_y=0;
  98:	1b 82       	std	Y+3, r1	; 0x03
  9a:	1a 82       	std	Y+2, r1	; 0x02
	raw_z=0;
  9c:	1d 82       	std	Y+5, r1	; 0x05
  9e:	1c 82       	std	Y+4, r1	; 0x04
	Angle = 0;
  a0:	1f 82       	std	Y+7, r1	; 0x07
  a2:	1e 82       	std	Y+6, r1	; 0x06
}
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <_ZN7Compass12init_compassEv>:

void Compass::init_compass(void){

	i2c_start(WRITE_ADDRESS );
  aa:	8c e3       	ldi	r24, 0x3C	; 60
  ac:	9f d0       	rcall	.+318    	; 0x1ec <_Z9i2c_starth>
	i2c_write(0x00);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	c3 d0       	rcall	.+390    	; 0x238 <_Z9i2c_writeh>
	i2c_write(0x70);
  b2:	80 e7       	ldi	r24, 0x70	; 112
  b4:	c1 d0       	rcall	.+386    	; 0x238 <_Z9i2c_writeh>
	i2c_stop();
  b6:	ba d0       	rcall	.+372    	; 0x22c <_Z8i2c_stopv>

	i2c_start(WRITE_ADDRESS );
  b8:	8c e3       	ldi	r24, 0x3C	; 60
  ba:	98 d0       	rcall	.+304    	; 0x1ec <_Z9i2c_starth>
	i2c_write(0x01);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	bc d0       	rcall	.+376    	; 0x238 <_Z9i2c_writeh>
	i2c_write(0xA0);
  c0:	80 ea       	ldi	r24, 0xA0	; 160
  c2:	ba d0       	rcall	.+372    	; 0x238 <_Z9i2c_writeh>
	i2c_stop();
  c4:	b3 d0       	rcall	.+358    	; 0x22c <_Z8i2c_stopv>

	i2c_start(WRITE_ADDRESS );
  c6:	8c e3       	ldi	r24, 0x3C	; 60
  c8:	91 d0       	rcall	.+290    	; 0x1ec <_Z9i2c_starth>
	i2c_write(0x02);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	b5 d0       	rcall	.+362    	; 0x238 <_Z9i2c_writeh>
	i2c_write(0x00);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	b3 d0       	rcall	.+358    	; 0x238 <_Z9i2c_writeh>
	i2c_stop();
  d2:	ac c0       	rjmp	.+344    	; 0x22c <_Z8i2c_stopv>
  d4:	08 95       	ret

000000d6 <_ZN7Compass12read_CompassEv>:
}

void Compass::read_Compass(void){
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	ec 01       	movw	r28, r24

	i2c_start(WRITE_ADDRESS );
  e4:	8c e3       	ldi	r24, 0x3C	; 60
  e6:	82 d0       	rcall	.+260    	; 0x1ec <_Z9i2c_starth>
	i2c_write(0x03);
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	a6 d0       	rcall	.+332    	; 0x238 <_Z9i2c_writeh>
	i2c_stop();
  ec:	9f d0       	rcall	.+318    	; 0x22c <_Z8i2c_stopv>

	i2c_rep_start(READ_ADDRESS );
  ee:	8d e3       	ldi	r24, 0x3D	; 61
  f0:	9b d0       	rcall	.+310    	; 0x228 <_Z13i2c_rep_starth>

	raw_x = ((uint8_t)i2c_readAck())<<8;
  f2:	af d0       	rcall	.+350    	; 0x252 <_Z11i2c_readAckv>
  f4:	18 82       	st	Y, r1
  f6:	89 83       	std	Y+1, r24	; 0x01
	raw_x |= i2c_readAck();
  f8:	ac d0       	rcall	.+344    	; 0x252 <_Z11i2c_readAckv>
	raw_x-=	 X_OFFSET;
  fa:	68 81       	ld	r22, Y
  fc:	79 81       	ldd	r23, Y+1	; 0x01
  fe:	68 2b       	or	r22, r24
 100:	07 2e       	mov	r0, r23
 102:	00 0c       	add	r0, r0
 104:	88 0b       	sbc	r24, r24
 106:	99 0b       	sbc	r25, r25
 108:	14 d2       	rcall	.+1064   	; 0x532 <__floatsisf>
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	48 e0       	ldi	r20, 0x08	; 8
 110:	51 e4       	ldi	r21, 0x41	; 65
 112:	ae d0       	rcall	.+348    	; 0x270 <__addsf3>
 114:	db d1       	rcall	.+950    	; 0x4cc <__fixsfsi>
 116:	79 83       	std	Y+1, r23	; 0x01
 118:	68 83       	st	Y, r22
	
	
	
	raw_z = ((uint8_t)i2c_readAck())<<8;
 11a:	9b d0       	rcall	.+310    	; 0x252 <_Z11i2c_readAckv>
 11c:	1c 82       	std	Y+4, r1	; 0x04
 11e:	8d 83       	std	Y+5, r24	; 0x05
	raw_z |= i2c_readAck();
 120:	98 d0       	rcall	.+304    	; 0x252 <_Z11i2c_readAckv>
 122:	2c 81       	ldd	r18, Y+4	; 0x04
 124:	3d 81       	ldd	r19, Y+5	; 0x05
 126:	28 2b       	or	r18, r24
 128:	3d 83       	std	Y+5, r19	; 0x05
 12a:	2c 83       	std	Y+4, r18	; 0x04
	
	
	raw_y = ((uint8_t)i2c_readAck())<<8;
 12c:	92 d0       	rcall	.+292    	; 0x252 <_Z11i2c_readAckv>
 12e:	1a 82       	std	Y+2, r1	; 0x02
 130:	8b 83       	std	Y+3, r24	; 0x03
	raw_y |= i2c_readNak();
 132:	96 d0       	rcall	.+300    	; 0x260 <_Z11i2c_readNakv>
	raw_y-=Y_OFFSET;
 134:	2a 81       	ldd	r18, Y+2	; 0x02
 136:	3b 81       	ldd	r19, Y+3	; 0x03
 138:	28 2b       	or	r18, r24
 13a:	2b 5a       	subi	r18, 0xAB	; 171
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	3b 83       	std	Y+3, r19	; 0x03
 140:	2a 83       	std	Y+2, r18	; 0x02
	
	i2c_stop();
 142:	74 d0       	rcall	.+232    	; 0x22c <_Z8i2c_stopv>
	
	Angle = (atan2((double)raw_y,(double)raw_x)* 180 / 3.14159265 + 180.0);
 144:	68 81       	ld	r22, Y
 146:	79 81       	ldd	r23, Y+1	; 0x01
 148:	07 2e       	mov	r0, r23
 14a:	00 0c       	add	r0, r0
 14c:	88 0b       	sbc	r24, r24
 14e:	99 0b       	sbc	r25, r25
 150:	f0 d1       	rcall	.+992    	; 0x532 <__floatsisf>
 152:	6b 01       	movw	r12, r22
 154:	7c 01       	movw	r14, r24
 156:	6a 81       	ldd	r22, Y+2	; 0x02
 158:	7b 81       	ldd	r23, Y+3	; 0x03
 15a:	07 2e       	mov	r0, r23
 15c:	00 0c       	add	r0, r0
 15e:	88 0b       	sbc	r24, r24
 160:	99 0b       	sbc	r25, r25
 162:	e7 d1       	rcall	.+974    	; 0x532 <__floatsisf>
 164:	a7 01       	movw	r20, r14
 166:	96 01       	movw	r18, r12
 168:	f6 d0       	rcall	.+492    	; 0x356 <atan2>
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	44 e3       	ldi	r20, 0x34	; 52
 170:	53 e4       	ldi	r21, 0x43	; 67
 172:	97 d2       	rcall	.+1326   	; 0x6a2 <__mulsf3>
 174:	2b ed       	ldi	r18, 0xDB	; 219
 176:	3f e0       	ldi	r19, 0x0F	; 15
 178:	49 e4       	ldi	r20, 0x49	; 73
 17a:	50 e4       	ldi	r21, 0x40	; 64
 17c:	3f d1       	rcall	.+638    	; 0x3fc <__divsf3>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	44 e3       	ldi	r20, 0x34	; 52
 184:	53 e4       	ldi	r21, 0x43	; 67
 186:	74 d0       	rcall	.+232    	; 0x270 <__addsf3>
 188:	a6 d1       	rcall	.+844    	; 0x4d6 <__fixunssfsi>
 18a:	7f 83       	std	Y+7, r23	; 0x07
 18c:	6e 83       	std	Y+6, r22	; 0x06
	
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	08 95       	ret

0000019c <_Z18init_communicationv>:
#define DATA_LOW		PIND	//lower bits to PORTD
//#define DATA_MSB		PINC		//msb PINB0

void init_communication()
{
	 DATA_DIR_LOW = 0XFF;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	81 bb       	out	0x11, r24	; 17
	 DATA_DIR_HIGH |= 0X01;	//setting pins as output
 1a0:	b8 9a       	sbi	0x17, 0	; 23
 1a2:	08 95       	ret

000001a4 <_Z9Send_dataj>:
}

void Send_data(uint16_t data)
{
	PORTB &= ~(1<<PB1);
 1a4:	c1 98       	cbi	0x18, 1	; 24
	PORT_LOW = data;
 1a6:	82 bb       	out	0x12, r24	; 18
	PORT_HIGH = ((data >> 8)|(PORT_HIGH & 0xFE));	
 1a8:	88 b3       	in	r24, 0x18	; 24
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	98 2b       	or	r25, r24
 1ae:	98 bb       	out	0x18, r25	; 24
	PORTB |= (1<<PINB1);	
 1b0:	c1 9a       	sbi	0x18, 1	; 24
 1b2:	08 95       	ret

000001b4 <main>:
#include <util/delay.h>
Compass C1;

int main(void)
{	
	sei();
 1b4:	78 94       	sei
	C1.init_compass();
 1b6:	80 e6       	ldi	r24, 0x60	; 96
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	77 df       	rcall	.-274    	; 0xaa <_ZN7Compass12init_compassEv>
	init_communication();
 1bc:	ef df       	rcall	.-34     	; 0x19c <_Z18init_communicationv>
    /* Replace with your application code */
    while (1) 
    {
		C1.read_Compass();
 1be:	80 e6       	ldi	r24, 0x60	; 96
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	89 df       	rcall	.-238    	; 0xd6 <_ZN7Compass12read_CompassEv>
		Send_data(C1.Get_Angle());
 1c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <_edata+0x6>
 1c8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <_edata+0x7>
 1cc:	eb df       	rcall	.-42     	; 0x1a4 <_Z9Send_dataj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	9c e9       	ldi	r25, 0x9C	; 156
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x1e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x24>
 1d8:	00 00       	nop
 1da:	f1 cf       	rjmp	.-30     	; 0x1be <main+0xa>

000001dc <_GLOBAL__sub_I__Z18init_communicationv>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "Parallel_9bit.h"
#include "Compass.h"
#include <util/delay.h>
Compass C1;
 1dc:	80 e6       	ldi	r24, 0x60	; 96
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	55 cf       	rjmp	.-342    	; 0x8c <_ZN7CompassC1Ev>
 1e2:	08 95       	ret

000001e4 <_Z8i2c_initv>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 1e4:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 1e6:	88 e4       	ldi	r24, 0x48	; 72
 1e8:	80 b9       	out	0x00, r24	; 0
 1ea:	08 95       	ret

000001ec <_Z9i2c_starth>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 1ec:	94 ea       	ldi	r25, 0xA4	; 164
 1ee:	96 bf       	out	0x36, r25	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 1f0:	06 b6       	in	r0, 0x36	; 54
 1f2:	07 fe       	sbrs	r0, 7
 1f4:	fd cf       	rjmp	.-6      	; 0x1f0 <_Z9i2c_starth+0x4>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 1f6:	91 b1       	in	r25, 0x01	; 1
 1f8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 1fa:	98 30       	cpi	r25, 0x08	; 8
 1fc:	11 f0       	breq	.+4      	; 0x202 <_Z9i2c_starth+0x16>
 1fe:	90 31       	cpi	r25, 0x10	; 16
 200:	79 f4       	brne	.+30     	; 0x220 <_Z9i2c_starth+0x34>

	// send device address
	TWDR = address;
 202:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 204:	84 e8       	ldi	r24, 0x84	; 132
 206:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 208:	06 b6       	in	r0, 0x36	; 54
 20a:	07 fe       	sbrs	r0, 7
 20c:	fd cf       	rjmp	.-6      	; 0x208 <_Z9i2c_starth+0x1c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 20e:	91 b1       	in	r25, 0x01	; 1
 210:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 212:	98 31       	cpi	r25, 0x18	; 24
 214:	39 f0       	breq	.+14     	; 0x224 <_Z9i2c_starth+0x38>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 34       	cpi	r25, 0x40	; 64
 21a:	29 f4       	brne	.+10     	; 0x226 <_Z9i2c_starth+0x3a>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 224:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 226:	08 95       	ret

00000228 <_Z13i2c_rep_starth>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 228:	e1 cf       	rjmp	.-62     	; 0x1ec <_Z9i2c_starth>

}/* i2c_rep_start */
 22a:	08 95       	ret

0000022c <_Z8i2c_stopv>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 22c:	84 e9       	ldi	r24, 0x94	; 148
 22e:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 230:	06 b6       	in	r0, 0x36	; 54
 232:	04 fc       	sbrc	r0, 4
 234:	fd cf       	rjmp	.-6      	; 0x230 <_Z8i2c_stopv+0x4>

}/* i2c_stop */
 236:	08 95       	ret

00000238 <_Z9i2c_writeh>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 238:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 23a:	84 e8       	ldi	r24, 0x84	; 132
 23c:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 23e:	06 b6       	in	r0, 0x36	; 54
 240:	07 fe       	sbrs	r0, 7
 242:	fd cf       	rjmp	.-6      	; 0x23e <_Z9i2c_writeh+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 244:	91 b1       	in	r25, 0x01	; 1
 246:	98 7f       	andi	r25, 0xF8	; 248
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	98 32       	cpi	r25, 0x28	; 40
 24c:	09 f4       	brne	.+2      	; 0x250 <_Z9i2c_writeh+0x18>
 24e:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 250:	08 95       	ret

00000252 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 252:	84 ec       	ldi	r24, 0xC4	; 196
 254:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));    
 256:	06 b6       	in	r0, 0x36	; 54
 258:	07 fe       	sbrs	r0, 7
 25a:	fd cf       	rjmp	.-6      	; 0x256 <_Z11i2c_readAckv+0x4>

    return TWDR;
 25c:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
 25e:	08 95       	ret

00000260 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 260:	84 e8       	ldi	r24, 0x84	; 132
 262:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
 264:	06 b6       	in	r0, 0x36	; 54
 266:	07 fe       	sbrs	r0, 7
 268:	fd cf       	rjmp	.-6      	; 0x264 <_Z11i2c_readNakv+0x4>
	
    return TWDR;
 26a:	83 b1       	in	r24, 0x03	; 3

 26c:	08 95       	ret

0000026e <__subsf3>:
 26e:	50 58       	subi	r21, 0x80	; 128

00000270 <__addsf3>:
 270:	bb 27       	eor	r27, r27
 272:	aa 27       	eor	r26, r26
 274:	0e d0       	rcall	.+28     	; 0x292 <__addsf3x>
 276:	d4 c1       	rjmp	.+936    	; 0x620 <__fp_round>
 278:	c5 d1       	rcall	.+906    	; 0x604 <__fp_pscA>
 27a:	30 f0       	brcs	.+12     	; 0x288 <__addsf3+0x18>
 27c:	ca d1       	rcall	.+916    	; 0x612 <__fp_pscB>
 27e:	20 f0       	brcs	.+8      	; 0x288 <__addsf3+0x18>
 280:	31 f4       	brne	.+12     	; 0x28e <__addsf3+0x1e>
 282:	9f 3f       	cpi	r25, 0xFF	; 255
 284:	11 f4       	brne	.+4      	; 0x28a <__addsf3+0x1a>
 286:	1e f4       	brtc	.+6      	; 0x28e <__addsf3+0x1e>
 288:	95 c1       	rjmp	.+810    	; 0x5b4 <__fp_nan>
 28a:	0e f4       	brtc	.+2      	; 0x28e <__addsf3+0x1e>
 28c:	e0 95       	com	r30
 28e:	e7 fb       	bst	r30, 7
 290:	8b c1       	rjmp	.+790    	; 0x5a8 <__fp_inf>

00000292 <__addsf3x>:
 292:	e9 2f       	mov	r30, r25
 294:	d6 d1       	rcall	.+940    	; 0x642 <__fp_split3>
 296:	80 f3       	brcs	.-32     	; 0x278 <__addsf3+0x8>
 298:	ba 17       	cp	r27, r26
 29a:	62 07       	cpc	r22, r18
 29c:	73 07       	cpc	r23, r19
 29e:	84 07       	cpc	r24, r20
 2a0:	95 07       	cpc	r25, r21
 2a2:	18 f0       	brcs	.+6      	; 0x2aa <__addsf3x+0x18>
 2a4:	71 f4       	brne	.+28     	; 0x2c2 <__addsf3x+0x30>
 2a6:	9e f5       	brtc	.+102    	; 0x30e <__addsf3x+0x7c>
 2a8:	ee c1       	rjmp	.+988    	; 0x686 <__fp_zero>
 2aa:	0e f4       	brtc	.+2      	; 0x2ae <__addsf3x+0x1c>
 2ac:	e0 95       	com	r30
 2ae:	0b 2e       	mov	r0, r27
 2b0:	ba 2f       	mov	r27, r26
 2b2:	a0 2d       	mov	r26, r0
 2b4:	0b 01       	movw	r0, r22
 2b6:	b9 01       	movw	r22, r18
 2b8:	90 01       	movw	r18, r0
 2ba:	0c 01       	movw	r0, r24
 2bc:	ca 01       	movw	r24, r20
 2be:	a0 01       	movw	r20, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	ff 27       	eor	r31, r31
 2c4:	59 1b       	sub	r21, r25
 2c6:	99 f0       	breq	.+38     	; 0x2ee <__addsf3x+0x5c>
 2c8:	59 3f       	cpi	r21, 0xF9	; 249
 2ca:	50 f4       	brcc	.+20     	; 0x2e0 <__addsf3x+0x4e>
 2cc:	50 3e       	cpi	r21, 0xE0	; 224
 2ce:	68 f1       	brcs	.+90     	; 0x32a <__addsf3x+0x98>
 2d0:	1a 16       	cp	r1, r26
 2d2:	f0 40       	sbci	r31, 0x00	; 0
 2d4:	a2 2f       	mov	r26, r18
 2d6:	23 2f       	mov	r18, r19
 2d8:	34 2f       	mov	r19, r20
 2da:	44 27       	eor	r20, r20
 2dc:	58 5f       	subi	r21, 0xF8	; 248
 2de:	f3 cf       	rjmp	.-26     	; 0x2c6 <__addsf3x+0x34>
 2e0:	46 95       	lsr	r20
 2e2:	37 95       	ror	r19
 2e4:	27 95       	ror	r18
 2e6:	a7 95       	ror	r26
 2e8:	f0 40       	sbci	r31, 0x00	; 0
 2ea:	53 95       	inc	r21
 2ec:	c9 f7       	brne	.-14     	; 0x2e0 <__addsf3x+0x4e>
 2ee:	7e f4       	brtc	.+30     	; 0x30e <__addsf3x+0x7c>
 2f0:	1f 16       	cp	r1, r31
 2f2:	ba 0b       	sbc	r27, r26
 2f4:	62 0b       	sbc	r22, r18
 2f6:	73 0b       	sbc	r23, r19
 2f8:	84 0b       	sbc	r24, r20
 2fa:	ba f0       	brmi	.+46     	; 0x32a <__addsf3x+0x98>
 2fc:	91 50       	subi	r25, 0x01	; 1
 2fe:	a1 f0       	breq	.+40     	; 0x328 <__addsf3x+0x96>
 300:	ff 0f       	add	r31, r31
 302:	bb 1f       	adc	r27, r27
 304:	66 1f       	adc	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	88 1f       	adc	r24, r24
 30a:	c2 f7       	brpl	.-16     	; 0x2fc <__addsf3x+0x6a>
 30c:	0e c0       	rjmp	.+28     	; 0x32a <__addsf3x+0x98>
 30e:	ba 0f       	add	r27, r26
 310:	62 1f       	adc	r22, r18
 312:	73 1f       	adc	r23, r19
 314:	84 1f       	adc	r24, r20
 316:	48 f4       	brcc	.+18     	; 0x32a <__addsf3x+0x98>
 318:	87 95       	ror	r24
 31a:	77 95       	ror	r23
 31c:	67 95       	ror	r22
 31e:	b7 95       	ror	r27
 320:	f7 95       	ror	r31
 322:	9e 3f       	cpi	r25, 0xFE	; 254
 324:	08 f0       	brcs	.+2      	; 0x328 <__addsf3x+0x96>
 326:	b3 cf       	rjmp	.-154    	; 0x28e <__addsf3+0x1e>
 328:	93 95       	inc	r25
 32a:	88 0f       	add	r24, r24
 32c:	08 f0       	brcs	.+2      	; 0x330 <__addsf3x+0x9e>
 32e:	99 27       	eor	r25, r25
 330:	ee 0f       	add	r30, r30
 332:	97 95       	ror	r25
 334:	87 95       	ror	r24
 336:	08 95       	ret
 338:	65 d1       	rcall	.+714    	; 0x604 <__fp_pscA>
 33a:	58 f0       	brcs	.+22     	; 0x352 <__addsf3x+0xc0>
 33c:	80 e8       	ldi	r24, 0x80	; 128
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	09 f4       	brne	.+2      	; 0x344 <__addsf3x+0xb2>
 342:	9e ef       	ldi	r25, 0xFE	; 254
 344:	66 d1       	rcall	.+716    	; 0x612 <__fp_pscB>
 346:	28 f0       	brcs	.+10     	; 0x352 <__addsf3x+0xc0>
 348:	40 e8       	ldi	r20, 0x80	; 128
 34a:	51 e0       	ldi	r21, 0x01	; 1
 34c:	59 f4       	brne	.+22     	; 0x364 <atan2+0xe>
 34e:	5e ef       	ldi	r21, 0xFE	; 254
 350:	09 c0       	rjmp	.+18     	; 0x364 <atan2+0xe>
 352:	30 c1       	rjmp	.+608    	; 0x5b4 <__fp_nan>
 354:	98 c1       	rjmp	.+816    	; 0x686 <__fp_zero>

00000356 <atan2>:
 356:	e9 2f       	mov	r30, r25
 358:	e0 78       	andi	r30, 0x80	; 128
 35a:	73 d1       	rcall	.+742    	; 0x642 <__fp_split3>
 35c:	68 f3       	brcs	.-38     	; 0x338 <__addsf3x+0xa6>
 35e:	09 2e       	mov	r0, r25
 360:	05 2a       	or	r0, r21
 362:	c1 f3       	breq	.-16     	; 0x354 <__addsf3x+0xc2>
 364:	26 17       	cp	r18, r22
 366:	37 07       	cpc	r19, r23
 368:	48 07       	cpc	r20, r24
 36a:	59 07       	cpc	r21, r25
 36c:	38 f0       	brcs	.+14     	; 0x37c <atan2+0x26>
 36e:	0e 2e       	mov	r0, r30
 370:	07 f8       	bld	r0, 7
 372:	e0 25       	eor	r30, r0
 374:	69 f0       	breq	.+26     	; 0x390 <atan2+0x3a>
 376:	e0 25       	eor	r30, r0
 378:	e0 64       	ori	r30, 0x40	; 64
 37a:	0a c0       	rjmp	.+20     	; 0x390 <atan2+0x3a>
 37c:	ef 63       	ori	r30, 0x3F	; 63
 37e:	07 f8       	bld	r0, 7
 380:	00 94       	com	r0
 382:	07 fa       	bst	r0, 7
 384:	db 01       	movw	r26, r22
 386:	b9 01       	movw	r22, r18
 388:	9d 01       	movw	r18, r26
 38a:	dc 01       	movw	r26, r24
 38c:	ca 01       	movw	r24, r20
 38e:	ad 01       	movw	r20, r26
 390:	ef 93       	push	r30
 392:	43 d0       	rcall	.+134    	; 0x41a <__divsf3_pse>
 394:	45 d1       	rcall	.+650    	; 0x620 <__fp_round>
 396:	0a d0       	rcall	.+20     	; 0x3ac <atan>
 398:	5f 91       	pop	r21
 39a:	55 23       	and	r21, r21
 39c:	31 f0       	breq	.+12     	; 0x3aa <atan2+0x54>
 39e:	2b ed       	ldi	r18, 0xDB	; 219
 3a0:	3f e0       	ldi	r19, 0x0F	; 15
 3a2:	49 e4       	ldi	r20, 0x49	; 73
 3a4:	50 fd       	sbrc	r21, 0
 3a6:	49 ec       	ldi	r20, 0xC9	; 201
 3a8:	63 cf       	rjmp	.-314    	; 0x270 <__addsf3>
 3aa:	08 95       	ret

000003ac <atan>:
 3ac:	df 93       	push	r29
 3ae:	dd 27       	eor	r29, r29
 3b0:	b9 2f       	mov	r27, r25
 3b2:	bf 77       	andi	r27, 0x7F	; 127
 3b4:	40 e8       	ldi	r20, 0x80	; 128
 3b6:	5f e3       	ldi	r21, 0x3F	; 63
 3b8:	16 16       	cp	r1, r22
 3ba:	17 06       	cpc	r1, r23
 3bc:	48 07       	cpc	r20, r24
 3be:	5b 07       	cpc	r21, r27
 3c0:	10 f4       	brcc	.+4      	; 0x3c6 <atan+0x1a>
 3c2:	d9 2f       	mov	r29, r25
 3c4:	67 d1       	rcall	.+718    	; 0x694 <inverse>
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	7f 93       	push	r23
 3cc:	6f 93       	push	r22
 3ce:	cc d1       	rcall	.+920    	; 0x768 <square>
 3d0:	e6 e2       	ldi	r30, 0x26	; 38
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	f2 d0       	rcall	.+484    	; 0x5ba <__fp_powser>
 3d6:	24 d1       	rcall	.+584    	; 0x620 <__fp_round>
 3d8:	2f 91       	pop	r18
 3da:	3f 91       	pop	r19
 3dc:	4f 91       	pop	r20
 3de:	5f 91       	pop	r21
 3e0:	6c d1       	rcall	.+728    	; 0x6ba <__mulsf3x>
 3e2:	dd 23       	and	r29, r29
 3e4:	49 f0       	breq	.+18     	; 0x3f8 <atan+0x4c>
 3e6:	90 58       	subi	r25, 0x80	; 128
 3e8:	a2 ea       	ldi	r26, 0xA2	; 162
 3ea:	2a ed       	ldi	r18, 0xDA	; 218
 3ec:	3f e0       	ldi	r19, 0x0F	; 15
 3ee:	49 ec       	ldi	r20, 0xC9	; 201
 3f0:	5f e3       	ldi	r21, 0x3F	; 63
 3f2:	d0 78       	andi	r29, 0x80	; 128
 3f4:	5d 27       	eor	r21, r29
 3f6:	4d df       	rcall	.-358    	; 0x292 <__addsf3x>
 3f8:	df 91       	pop	r29
 3fa:	12 c1       	rjmp	.+548    	; 0x620 <__fp_round>

000003fc <__divsf3>:
 3fc:	0c d0       	rcall	.+24     	; 0x416 <__divsf3x>
 3fe:	10 c1       	rjmp	.+544    	; 0x620 <__fp_round>
 400:	08 d1       	rcall	.+528    	; 0x612 <__fp_pscB>
 402:	40 f0       	brcs	.+16     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 404:	ff d0       	rcall	.+510    	; 0x604 <__fp_pscA>
 406:	30 f0       	brcs	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 408:	21 f4       	brne	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40a:	5f 3f       	cpi	r21, 0xFF	; 255
 40c:	19 f0       	breq	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40e:	cc c0       	rjmp	.+408    	; 0x5a8 <__fp_inf>
 410:	51 11       	cpse	r21, r1
 412:	3a c1       	rjmp	.+628    	; 0x688 <__fp_szero>
 414:	cf c0       	rjmp	.+414    	; 0x5b4 <__fp_nan>

00000416 <__divsf3x>:
 416:	15 d1       	rcall	.+554    	; 0x642 <__fp_split3>
 418:	98 f3       	brcs	.-26     	; 0x400 <__LOCK_REGION_LENGTH__>

0000041a <__divsf3_pse>:
 41a:	99 23       	and	r25, r25
 41c:	c9 f3       	breq	.-14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 41e:	55 23       	and	r21, r21
 420:	b1 f3       	breq	.-20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 422:	95 1b       	sub	r25, r21
 424:	55 0b       	sbc	r21, r21
 426:	bb 27       	eor	r27, r27
 428:	aa 27       	eor	r26, r26
 42a:	62 17       	cp	r22, r18
 42c:	73 07       	cpc	r23, r19
 42e:	84 07       	cpc	r24, r20
 430:	38 f0       	brcs	.+14     	; 0x440 <__divsf3_pse+0x26>
 432:	9f 5f       	subi	r25, 0xFF	; 255
 434:	5f 4f       	sbci	r21, 0xFF	; 255
 436:	22 0f       	add	r18, r18
 438:	33 1f       	adc	r19, r19
 43a:	44 1f       	adc	r20, r20
 43c:	aa 1f       	adc	r26, r26
 43e:	a9 f3       	breq	.-22     	; 0x42a <__divsf3_pse+0x10>
 440:	33 d0       	rcall	.+102    	; 0x4a8 <__stack+0x49>
 442:	0e 2e       	mov	r0, r30
 444:	3a f0       	brmi	.+14     	; 0x454 <__divsf3_pse+0x3a>
 446:	e0 e8       	ldi	r30, 0x80	; 128
 448:	30 d0       	rcall	.+96     	; 0x4aa <__stack+0x4b>
 44a:	91 50       	subi	r25, 0x01	; 1
 44c:	50 40       	sbci	r21, 0x00	; 0
 44e:	e6 95       	lsr	r30
 450:	00 1c       	adc	r0, r0
 452:	ca f7       	brpl	.-14     	; 0x446 <__divsf3_pse+0x2c>
 454:	29 d0       	rcall	.+82     	; 0x4a8 <__stack+0x49>
 456:	fe 2f       	mov	r31, r30
 458:	27 d0       	rcall	.+78     	; 0x4a8 <__stack+0x49>
 45a:	66 0f       	add	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	88 1f       	adc	r24, r24
 460:	bb 1f       	adc	r27, r27
 462:	26 17       	cp	r18, r22
 464:	37 07       	cpc	r19, r23
 466:	48 07       	cpc	r20, r24
 468:	ab 07       	cpc	r26, r27
 46a:	b0 e8       	ldi	r27, 0x80	; 128
 46c:	09 f0       	breq	.+2      	; 0x470 <__stack+0x11>
 46e:	bb 0b       	sbc	r27, r27
 470:	80 2d       	mov	r24, r0
 472:	bf 01       	movw	r22, r30
 474:	ff 27       	eor	r31, r31
 476:	93 58       	subi	r25, 0x83	; 131
 478:	5f 4f       	sbci	r21, 0xFF	; 255
 47a:	2a f0       	brmi	.+10     	; 0x486 <__stack+0x27>
 47c:	9e 3f       	cpi	r25, 0xFE	; 254
 47e:	51 05       	cpc	r21, r1
 480:	68 f0       	brcs	.+26     	; 0x49c <__stack+0x3d>
 482:	92 c0       	rjmp	.+292    	; 0x5a8 <__fp_inf>
 484:	01 c1       	rjmp	.+514    	; 0x688 <__fp_szero>
 486:	5f 3f       	cpi	r21, 0xFF	; 255
 488:	ec f3       	brlt	.-6      	; 0x484 <__stack+0x25>
 48a:	98 3e       	cpi	r25, 0xE8	; 232
 48c:	dc f3       	brlt	.-10     	; 0x484 <__stack+0x25>
 48e:	86 95       	lsr	r24
 490:	77 95       	ror	r23
 492:	67 95       	ror	r22
 494:	b7 95       	ror	r27
 496:	f7 95       	ror	r31
 498:	9f 5f       	subi	r25, 0xFF	; 255
 49a:	c9 f7       	brne	.-14     	; 0x48e <__stack+0x2f>
 49c:	88 0f       	add	r24, r24
 49e:	91 1d       	adc	r25, r1
 4a0:	96 95       	lsr	r25
 4a2:	87 95       	ror	r24
 4a4:	97 f9       	bld	r25, 7
 4a6:	08 95       	ret
 4a8:	e1 e0       	ldi	r30, 0x01	; 1
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	88 1f       	adc	r24, r24
 4b0:	bb 1f       	adc	r27, r27
 4b2:	62 17       	cp	r22, r18
 4b4:	73 07       	cpc	r23, r19
 4b6:	84 07       	cpc	r24, r20
 4b8:	ba 07       	cpc	r27, r26
 4ba:	20 f0       	brcs	.+8      	; 0x4c4 <__stack+0x65>
 4bc:	62 1b       	sub	r22, r18
 4be:	73 0b       	sbc	r23, r19
 4c0:	84 0b       	sbc	r24, r20
 4c2:	ba 0b       	sbc	r27, r26
 4c4:	ee 1f       	adc	r30, r30
 4c6:	88 f7       	brcc	.-30     	; 0x4aa <__stack+0x4b>
 4c8:	e0 95       	com	r30
 4ca:	08 95       	ret

000004cc <__fixsfsi>:
 4cc:	04 d0       	rcall	.+8      	; 0x4d6 <__fixunssfsi>
 4ce:	68 94       	set
 4d0:	b1 11       	cpse	r27, r1
 4d2:	da c0       	rjmp	.+436    	; 0x688 <__fp_szero>
 4d4:	08 95       	ret

000004d6 <__fixunssfsi>:
 4d6:	bd d0       	rcall	.+378    	; 0x652 <__fp_splitA>
 4d8:	88 f0       	brcs	.+34     	; 0x4fc <__fixunssfsi+0x26>
 4da:	9f 57       	subi	r25, 0x7F	; 127
 4dc:	90 f0       	brcs	.+36     	; 0x502 <__fixunssfsi+0x2c>
 4de:	b9 2f       	mov	r27, r25
 4e0:	99 27       	eor	r25, r25
 4e2:	b7 51       	subi	r27, 0x17	; 23
 4e4:	a0 f0       	brcs	.+40     	; 0x50e <__fixunssfsi+0x38>
 4e6:	d1 f0       	breq	.+52     	; 0x51c <__fixunssfsi+0x46>
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	88 1f       	adc	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	1a f0       	brmi	.+6      	; 0x4f8 <__fixunssfsi+0x22>
 4f2:	ba 95       	dec	r27
 4f4:	c9 f7       	brne	.-14     	; 0x4e8 <__fixunssfsi+0x12>
 4f6:	12 c0       	rjmp	.+36     	; 0x51c <__fixunssfsi+0x46>
 4f8:	b1 30       	cpi	r27, 0x01	; 1
 4fa:	81 f0       	breq	.+32     	; 0x51c <__fixunssfsi+0x46>
 4fc:	c4 d0       	rcall	.+392    	; 0x686 <__fp_zero>
 4fe:	b1 e0       	ldi	r27, 0x01	; 1
 500:	08 95       	ret
 502:	c1 c0       	rjmp	.+386    	; 0x686 <__fp_zero>
 504:	67 2f       	mov	r22, r23
 506:	78 2f       	mov	r23, r24
 508:	88 27       	eor	r24, r24
 50a:	b8 5f       	subi	r27, 0xF8	; 248
 50c:	39 f0       	breq	.+14     	; 0x51c <__fixunssfsi+0x46>
 50e:	b9 3f       	cpi	r27, 0xF9	; 249
 510:	cc f3       	brlt	.-14     	; 0x504 <__fixunssfsi+0x2e>
 512:	86 95       	lsr	r24
 514:	77 95       	ror	r23
 516:	67 95       	ror	r22
 518:	b3 95       	inc	r27
 51a:	d9 f7       	brne	.-10     	; 0x512 <__fixunssfsi+0x3c>
 51c:	3e f4       	brtc	.+14     	; 0x52c <__fixunssfsi+0x56>
 51e:	90 95       	com	r25
 520:	80 95       	com	r24
 522:	70 95       	com	r23
 524:	61 95       	neg	r22
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	8f 4f       	sbci	r24, 0xFF	; 255
 52a:	9f 4f       	sbci	r25, 0xFF	; 255
 52c:	08 95       	ret

0000052e <__floatunsisf>:
 52e:	e8 94       	clt
 530:	09 c0       	rjmp	.+18     	; 0x544 <__floatsisf+0x12>

00000532 <__floatsisf>:
 532:	97 fb       	bst	r25, 7
 534:	3e f4       	brtc	.+14     	; 0x544 <__floatsisf+0x12>
 536:	90 95       	com	r25
 538:	80 95       	com	r24
 53a:	70 95       	com	r23
 53c:	61 95       	neg	r22
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	8f 4f       	sbci	r24, 0xFF	; 255
 542:	9f 4f       	sbci	r25, 0xFF	; 255
 544:	99 23       	and	r25, r25
 546:	a9 f0       	breq	.+42     	; 0x572 <__floatsisf+0x40>
 548:	f9 2f       	mov	r31, r25
 54a:	96 e9       	ldi	r25, 0x96	; 150
 54c:	bb 27       	eor	r27, r27
 54e:	93 95       	inc	r25
 550:	f6 95       	lsr	r31
 552:	87 95       	ror	r24
 554:	77 95       	ror	r23
 556:	67 95       	ror	r22
 558:	b7 95       	ror	r27
 55a:	f1 11       	cpse	r31, r1
 55c:	f8 cf       	rjmp	.-16     	; 0x54e <__floatsisf+0x1c>
 55e:	fa f4       	brpl	.+62     	; 0x59e <__floatsisf+0x6c>
 560:	bb 0f       	add	r27, r27
 562:	11 f4       	brne	.+4      	; 0x568 <__floatsisf+0x36>
 564:	60 ff       	sbrs	r22, 0
 566:	1b c0       	rjmp	.+54     	; 0x59e <__floatsisf+0x6c>
 568:	6f 5f       	subi	r22, 0xFF	; 255
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	8f 4f       	sbci	r24, 0xFF	; 255
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	16 c0       	rjmp	.+44     	; 0x59e <__floatsisf+0x6c>
 572:	88 23       	and	r24, r24
 574:	11 f0       	breq	.+4      	; 0x57a <__floatsisf+0x48>
 576:	96 e9       	ldi	r25, 0x96	; 150
 578:	11 c0       	rjmp	.+34     	; 0x59c <__floatsisf+0x6a>
 57a:	77 23       	and	r23, r23
 57c:	21 f0       	breq	.+8      	; 0x586 <__floatsisf+0x54>
 57e:	9e e8       	ldi	r25, 0x8E	; 142
 580:	87 2f       	mov	r24, r23
 582:	76 2f       	mov	r23, r22
 584:	05 c0       	rjmp	.+10     	; 0x590 <__floatsisf+0x5e>
 586:	66 23       	and	r22, r22
 588:	71 f0       	breq	.+28     	; 0x5a6 <__floatsisf+0x74>
 58a:	96 e8       	ldi	r25, 0x86	; 134
 58c:	86 2f       	mov	r24, r22
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	2a f0       	brmi	.+10     	; 0x59e <__floatsisf+0x6c>
 594:	9a 95       	dec	r25
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	da f7       	brpl	.-10     	; 0x594 <__floatsisf+0x62>
 59e:	88 0f       	add	r24, r24
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	97 f9       	bld	r25, 7
 5a6:	08 95       	ret

000005a8 <__fp_inf>:
 5a8:	97 f9       	bld	r25, 7
 5aa:	9f 67       	ori	r25, 0x7F	; 127
 5ac:	80 e8       	ldi	r24, 0x80	; 128
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	08 95       	ret

000005b4 <__fp_nan>:
 5b4:	9f ef       	ldi	r25, 0xFF	; 255
 5b6:	80 ec       	ldi	r24, 0xC0	; 192
 5b8:	08 95       	ret

000005ba <__fp_powser>:
 5ba:	df 93       	push	r29
 5bc:	cf 93       	push	r28
 5be:	1f 93       	push	r17
 5c0:	0f 93       	push	r16
 5c2:	ff 92       	push	r15
 5c4:	ef 92       	push	r14
 5c6:	df 92       	push	r13
 5c8:	7b 01       	movw	r14, r22
 5ca:	8c 01       	movw	r16, r24
 5cc:	68 94       	set
 5ce:	05 c0       	rjmp	.+10     	; 0x5da <__fp_powser+0x20>
 5d0:	da 2e       	mov	r13, r26
 5d2:	ef 01       	movw	r28, r30
 5d4:	72 d0       	rcall	.+228    	; 0x6ba <__mulsf3x>
 5d6:	fe 01       	movw	r30, r28
 5d8:	e8 94       	clt
 5da:	a5 91       	lpm	r26, Z+
 5dc:	25 91       	lpm	r18, Z+
 5de:	35 91       	lpm	r19, Z+
 5e0:	45 91       	lpm	r20, Z+
 5e2:	55 91       	lpm	r21, Z+
 5e4:	ae f3       	brts	.-22     	; 0x5d0 <__fp_powser+0x16>
 5e6:	ef 01       	movw	r28, r30
 5e8:	54 de       	rcall	.-856    	; 0x292 <__addsf3x>
 5ea:	fe 01       	movw	r30, r28
 5ec:	97 01       	movw	r18, r14
 5ee:	a8 01       	movw	r20, r16
 5f0:	da 94       	dec	r13
 5f2:	79 f7       	brne	.-34     	; 0x5d2 <__fp_powser+0x18>
 5f4:	df 90       	pop	r13
 5f6:	ef 90       	pop	r14
 5f8:	ff 90       	pop	r15
 5fa:	0f 91       	pop	r16
 5fc:	1f 91       	pop	r17
 5fe:	cf 91       	pop	r28
 600:	df 91       	pop	r29
 602:	08 95       	ret

00000604 <__fp_pscA>:
 604:	00 24       	eor	r0, r0
 606:	0a 94       	dec	r0
 608:	16 16       	cp	r1, r22
 60a:	17 06       	cpc	r1, r23
 60c:	18 06       	cpc	r1, r24
 60e:	09 06       	cpc	r0, r25
 610:	08 95       	ret

00000612 <__fp_pscB>:
 612:	00 24       	eor	r0, r0
 614:	0a 94       	dec	r0
 616:	12 16       	cp	r1, r18
 618:	13 06       	cpc	r1, r19
 61a:	14 06       	cpc	r1, r20
 61c:	05 06       	cpc	r0, r21
 61e:	08 95       	ret

00000620 <__fp_round>:
 620:	09 2e       	mov	r0, r25
 622:	03 94       	inc	r0
 624:	00 0c       	add	r0, r0
 626:	11 f4       	brne	.+4      	; 0x62c <__fp_round+0xc>
 628:	88 23       	and	r24, r24
 62a:	52 f0       	brmi	.+20     	; 0x640 <__fp_round+0x20>
 62c:	bb 0f       	add	r27, r27
 62e:	40 f4       	brcc	.+16     	; 0x640 <__fp_round+0x20>
 630:	bf 2b       	or	r27, r31
 632:	11 f4       	brne	.+4      	; 0x638 <__fp_round+0x18>
 634:	60 ff       	sbrs	r22, 0
 636:	04 c0       	rjmp	.+8      	; 0x640 <__fp_round+0x20>
 638:	6f 5f       	subi	r22, 0xFF	; 255
 63a:	7f 4f       	sbci	r23, 0xFF	; 255
 63c:	8f 4f       	sbci	r24, 0xFF	; 255
 63e:	9f 4f       	sbci	r25, 0xFF	; 255
 640:	08 95       	ret

00000642 <__fp_split3>:
 642:	57 fd       	sbrc	r21, 7
 644:	90 58       	subi	r25, 0x80	; 128
 646:	44 0f       	add	r20, r20
 648:	55 1f       	adc	r21, r21
 64a:	59 f0       	breq	.+22     	; 0x662 <__fp_splitA+0x10>
 64c:	5f 3f       	cpi	r21, 0xFF	; 255
 64e:	71 f0       	breq	.+28     	; 0x66c <__fp_splitA+0x1a>
 650:	47 95       	ror	r20

00000652 <__fp_splitA>:
 652:	88 0f       	add	r24, r24
 654:	97 fb       	bst	r25, 7
 656:	99 1f       	adc	r25, r25
 658:	61 f0       	breq	.+24     	; 0x672 <__fp_splitA+0x20>
 65a:	9f 3f       	cpi	r25, 0xFF	; 255
 65c:	79 f0       	breq	.+30     	; 0x67c <__fp_splitA+0x2a>
 65e:	87 95       	ror	r24
 660:	08 95       	ret
 662:	12 16       	cp	r1, r18
 664:	13 06       	cpc	r1, r19
 666:	14 06       	cpc	r1, r20
 668:	55 1f       	adc	r21, r21
 66a:	f2 cf       	rjmp	.-28     	; 0x650 <__fp_split3+0xe>
 66c:	46 95       	lsr	r20
 66e:	f1 df       	rcall	.-30     	; 0x652 <__fp_splitA>
 670:	08 c0       	rjmp	.+16     	; 0x682 <__fp_splitA+0x30>
 672:	16 16       	cp	r1, r22
 674:	17 06       	cpc	r1, r23
 676:	18 06       	cpc	r1, r24
 678:	99 1f       	adc	r25, r25
 67a:	f1 cf       	rjmp	.-30     	; 0x65e <__fp_splitA+0xc>
 67c:	86 95       	lsr	r24
 67e:	71 05       	cpc	r23, r1
 680:	61 05       	cpc	r22, r1
 682:	08 94       	sec
 684:	08 95       	ret

00000686 <__fp_zero>:
 686:	e8 94       	clt

00000688 <__fp_szero>:
 688:	bb 27       	eor	r27, r27
 68a:	66 27       	eor	r22, r22
 68c:	77 27       	eor	r23, r23
 68e:	cb 01       	movw	r24, r22
 690:	97 f9       	bld	r25, 7
 692:	08 95       	ret

00000694 <inverse>:
 694:	9b 01       	movw	r18, r22
 696:	ac 01       	movw	r20, r24
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	80 e8       	ldi	r24, 0x80	; 128
 69e:	9f e3       	ldi	r25, 0x3F	; 63
 6a0:	ad ce       	rjmp	.-678    	; 0x3fc <__divsf3>

000006a2 <__mulsf3>:
 6a2:	0b d0       	rcall	.+22     	; 0x6ba <__mulsf3x>
 6a4:	bd cf       	rjmp	.-134    	; 0x620 <__fp_round>
 6a6:	ae df       	rcall	.-164    	; 0x604 <__fp_pscA>
 6a8:	28 f0       	brcs	.+10     	; 0x6b4 <__mulsf3+0x12>
 6aa:	b3 df       	rcall	.-154    	; 0x612 <__fp_pscB>
 6ac:	18 f0       	brcs	.+6      	; 0x6b4 <__mulsf3+0x12>
 6ae:	95 23       	and	r25, r21
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <__mulsf3+0x12>
 6b2:	7a cf       	rjmp	.-268    	; 0x5a8 <__fp_inf>
 6b4:	7f cf       	rjmp	.-258    	; 0x5b4 <__fp_nan>
 6b6:	11 24       	eor	r1, r1
 6b8:	e7 cf       	rjmp	.-50     	; 0x688 <__fp_szero>

000006ba <__mulsf3x>:
 6ba:	c3 df       	rcall	.-122    	; 0x642 <__fp_split3>
 6bc:	a0 f3       	brcs	.-24     	; 0x6a6 <__mulsf3+0x4>

000006be <__mulsf3_pse>:
 6be:	95 9f       	mul	r25, r21
 6c0:	d1 f3       	breq	.-12     	; 0x6b6 <__mulsf3+0x14>
 6c2:	95 0f       	add	r25, r21
 6c4:	50 e0       	ldi	r21, 0x00	; 0
 6c6:	55 1f       	adc	r21, r21
 6c8:	62 9f       	mul	r22, r18
 6ca:	f0 01       	movw	r30, r0
 6cc:	72 9f       	mul	r23, r18
 6ce:	bb 27       	eor	r27, r27
 6d0:	f0 0d       	add	r31, r0
 6d2:	b1 1d       	adc	r27, r1
 6d4:	63 9f       	mul	r22, r19
 6d6:	aa 27       	eor	r26, r26
 6d8:	f0 0d       	add	r31, r0
 6da:	b1 1d       	adc	r27, r1
 6dc:	aa 1f       	adc	r26, r26
 6de:	64 9f       	mul	r22, r20
 6e0:	66 27       	eor	r22, r22
 6e2:	b0 0d       	add	r27, r0
 6e4:	a1 1d       	adc	r26, r1
 6e6:	66 1f       	adc	r22, r22
 6e8:	82 9f       	mul	r24, r18
 6ea:	22 27       	eor	r18, r18
 6ec:	b0 0d       	add	r27, r0
 6ee:	a1 1d       	adc	r26, r1
 6f0:	62 1f       	adc	r22, r18
 6f2:	73 9f       	mul	r23, r19
 6f4:	b0 0d       	add	r27, r0
 6f6:	a1 1d       	adc	r26, r1
 6f8:	62 1f       	adc	r22, r18
 6fa:	83 9f       	mul	r24, r19
 6fc:	a0 0d       	add	r26, r0
 6fe:	61 1d       	adc	r22, r1
 700:	22 1f       	adc	r18, r18
 702:	74 9f       	mul	r23, r20
 704:	33 27       	eor	r19, r19
 706:	a0 0d       	add	r26, r0
 708:	61 1d       	adc	r22, r1
 70a:	23 1f       	adc	r18, r19
 70c:	84 9f       	mul	r24, r20
 70e:	60 0d       	add	r22, r0
 710:	21 1d       	adc	r18, r1
 712:	82 2f       	mov	r24, r18
 714:	76 2f       	mov	r23, r22
 716:	6a 2f       	mov	r22, r26
 718:	11 24       	eor	r1, r1
 71a:	9f 57       	subi	r25, 0x7F	; 127
 71c:	50 40       	sbci	r21, 0x00	; 0
 71e:	8a f0       	brmi	.+34     	; 0x742 <__mulsf3_pse+0x84>
 720:	e1 f0       	breq	.+56     	; 0x75a <__mulsf3_pse+0x9c>
 722:	88 23       	and	r24, r24
 724:	4a f0       	brmi	.+18     	; 0x738 <__mulsf3_pse+0x7a>
 726:	ee 0f       	add	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	bb 1f       	adc	r27, r27
 72c:	66 1f       	adc	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	91 50       	subi	r25, 0x01	; 1
 734:	50 40       	sbci	r21, 0x00	; 0
 736:	a9 f7       	brne	.-22     	; 0x722 <__mulsf3_pse+0x64>
 738:	9e 3f       	cpi	r25, 0xFE	; 254
 73a:	51 05       	cpc	r21, r1
 73c:	70 f0       	brcs	.+28     	; 0x75a <__mulsf3_pse+0x9c>
 73e:	34 cf       	rjmp	.-408    	; 0x5a8 <__fp_inf>
 740:	a3 cf       	rjmp	.-186    	; 0x688 <__fp_szero>
 742:	5f 3f       	cpi	r21, 0xFF	; 255
 744:	ec f3       	brlt	.-6      	; 0x740 <__mulsf3_pse+0x82>
 746:	98 3e       	cpi	r25, 0xE8	; 232
 748:	dc f3       	brlt	.-10     	; 0x740 <__mulsf3_pse+0x82>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	f7 95       	ror	r31
 754:	e7 95       	ror	r30
 756:	9f 5f       	subi	r25, 0xFF	; 255
 758:	c1 f7       	brne	.-16     	; 0x74a <__mulsf3_pse+0x8c>
 75a:	fe 2b       	or	r31, r30
 75c:	88 0f       	add	r24, r24
 75e:	91 1d       	adc	r25, r1
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	97 f9       	bld	r25, 7
 766:	08 95       	ret

00000768 <square>:
 768:	9b 01       	movw	r18, r22
 76a:	ac 01       	movw	r20, r24
 76c:	9a cf       	rjmp	.-204    	; 0x6a2 <__mulsf3>

0000076e <__tablejump2__>:
 76e:	ee 0f       	add	r30, r30
 770:	ff 1f       	adc	r31, r31
 772:	05 90       	lpm	r0, Z+
 774:	f4 91       	lpm	r31, Z
 776:	e0 2d       	mov	r30, r0
 778:	09 94       	ijmp

0000077a <_exit>:
 77a:	f8 94       	cli

0000077c <__stop_program>:
 77c:	ff cf       	rjmp	.-2      	; 0x77c <__stop_program>
