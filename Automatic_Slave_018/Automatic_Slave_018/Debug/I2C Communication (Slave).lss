
I2C Communication (Slave).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000120e  000012a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000120e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  00800202  00800202  000012a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000225d  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a9  00000000  00000000  000037d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001307  00000000  00000000  00004082  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a4  00000000  00000000  0000538c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cc9  00000000  00000000  00005b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000131d  00000000  00000000  000067f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  00007b16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c0       	rjmp	.+508    	; 0x20a <__vector_3>
       e:	00 00       	nop
      10:	23 c1       	rjmp	.+582    	; 0x258 <__vector_4>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__vector_5>
      16:	00 00       	nop
      18:	d1 c0       	rjmp	.+418    	; 0x1bc <__vector_6>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	d6 c4       	rjmp	.+2476   	; 0x9d2 <__vector_9>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c6       	rjmp	.+3366   	; 0xd64 <__vector_15>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__vector_23>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	c9 c6       	rjmp	.+3474   	; 0xdf8 <__vector_25>
      66:	00 00       	nop
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cd c6       	rjmp	.+3482   	; 0xe2c <__vector_36>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bf c6       	rjmp	.+3454   	; 0xe4c <__vector_51>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ef c6       	rjmp	.+3550   	; 0xeb8 <__vector_54>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	10 05       	cpc	r17, r0

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	ee e0       	ldi	r30, 0x0E	; 14
      fe:	f2 e1       	ldi	r31, 0x12	; 18
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	a2 30       	cpi	r26, 0x02	; 2
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	a2 e0       	ldi	r26, 0x02	; 2
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ac 39       	cpi	r26, 0x9C	; 156
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	ec d3       	rcall	.+2008   	; 0x91a <main>
     142:	0c 94 05 09 	jmp	0x120a	; 0x120a <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_ZN7encoder22Init_encoder_interruptEv>:
}
float encoder::getdistance()
	{
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
	return distance;
}
     148:	78 94       	sei
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	80 93 69 00 	sts	0x0069, r24
     150:	8f e0       	ldi	r24, 0x0F	; 15
     152:	80 93 6a 00 	sts	0x006A, r24
     156:	8d b3       	in	r24, 0x1d	; 29
     158:	8c 63       	ori	r24, 0x3C	; 60
     15a:	8d bb       	out	0x1d, r24	; 29
     15c:	08 95       	ret

0000015e <_ZN7encoder10Init_timerEv>:
     15e:	78 94       	sei
     160:	85 b5       	in	r24, 0x25	; 37
     162:	85 60       	ori	r24, 0x05	; 5
     164:	85 bd       	out	0x25, r24	; 37
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	80 93 6e 00 	sts	0x006E, r24
     16c:	08 95       	ret

0000016e <__vector_5>:

ISR(INT4_vect)	//for motor1
{
     16e:	1f 92       	push	r1
     170:	0f 92       	push	r0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	0f 92       	push	r0
     176:	11 24       	eor	r1, r1
     178:	0b b6       	in	r0, 0x3b	; 59
     17a:	0f 92       	push	r0
     17c:	8f 93       	push	r24
     17e:	9f 93       	push	r25
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
	if((bit_is_set(PINA,PA4)))
     184:	04 9b       	sbis	0x00, 4	; 0
     186:	08 c0       	rjmp	.+16     	; 0x198 <__vector_5+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     188:	eb e1       	ldi	r30, 0x1B	; 27
     18a:	f2 e0       	ldi	r31, 0x02	; 2
     18c:	80 81       	ld	r24, Z
     18e:	91 81       	ldd	r25, Z+1	; 0x01
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	91 83       	std	Z+1, r25	; 0x01
     194:	80 83       	st	Z, r24
     196:	07 c0       	rjmp	.+14     	; 0x1a6 <__vector_5+0x38>
		inline void dcr_count(){count_encoder--;};
     198:	eb e1       	ldi	r30, 0x1B	; 27
     19a:	f2 e0       	ldi	r31, 0x02	; 2
     19c:	80 81       	ld	r24, Z
     19e:	91 81       	ldd	r25, Z+1	; 0x01
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	91 83       	std	Z+1, r25	; 0x01
     1a4:	80 83       	st	Z, r24
		e1.inc_count();
	}
	else
	e1.dcr_count();

}
     1a6:	ff 91       	pop	r31
     1a8:	ef 91       	pop	r30
     1aa:	9f 91       	pop	r25
     1ac:	8f 91       	pop	r24
     1ae:	0f 90       	pop	r0
     1b0:	0b be       	out	0x3b, r0	; 59
     1b2:	0f 90       	pop	r0
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	0f 90       	pop	r0
     1b8:	1f 90       	pop	r1
     1ba:	18 95       	reti

000001bc <__vector_6>:
ISR(INT5_vect)	//for motor2
{
     1bc:	1f 92       	push	r1
     1be:	0f 92       	push	r0
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	0f 92       	push	r0
     1c4:	11 24       	eor	r1, r1
     1c6:	0b b6       	in	r0, 0x3b	; 59
     1c8:	0f 92       	push	r0
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	ef 93       	push	r30
     1d0:	ff 93       	push	r31
	if((bit_is_set(PINA,PA1)))
     1d2:	01 9b       	sbis	0x00, 1	; 0
     1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     1d6:	e3 e1       	ldi	r30, 0x13	; 19
     1d8:	f2 e0       	ldi	r31, 0x02	; 2
     1da:	80 81       	ld	r24, Z
     1dc:	91 81       	ldd	r25, Z+1	; 0x01
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	91 83       	std	Z+1, r25	; 0x01
     1e2:	80 83       	st	Z, r24
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     1e6:	e3 e1       	ldi	r30, 0x13	; 19
     1e8:	f2 e0       	ldi	r31, 0x02	; 2
     1ea:	80 81       	ld	r24, Z
     1ec:	91 81       	ldd	r25, Z+1	; 0x01
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	91 83       	std	Z+1, r25	; 0x01
     1f2:	80 83       	st	Z, r24
	{
		e2.inc_count();
	}
	else
	e2.dcr_count();
}
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	9f 91       	pop	r25
     1fa:	8f 91       	pop	r24
     1fc:	0f 90       	pop	r0
     1fe:	0b be       	out	0x3b, r0	; 59
     200:	0f 90       	pop	r0
     202:	0f be       	out	0x3f, r0	; 63
     204:	0f 90       	pop	r0
     206:	1f 90       	pop	r1
     208:	18 95       	reti

0000020a <__vector_3>:
ISR(INT2_vect)	//for motor3
{
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	0b b6       	in	r0, 0x3b	; 59
     216:	0f 92       	push	r0
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
	if((bit_is_set(PINA,PA2)))
     220:	02 9b       	sbis	0x00, 2	; 0
     222:	08 c0       	rjmp	.+16     	; 0x234 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     224:	eb e0       	ldi	r30, 0x0B	; 11
     226:	f2 e0       	ldi	r31, 0x02	; 2
     228:	80 81       	ld	r24, Z
     22a:	91 81       	ldd	r25, Z+1	; 0x01
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	91 83       	std	Z+1, r25	; 0x01
     230:	80 83       	st	Z, r24
     232:	07 c0       	rjmp	.+14     	; 0x242 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     234:	eb e0       	ldi	r30, 0x0B	; 11
     236:	f2 e0       	ldi	r31, 0x02	; 2
     238:	80 81       	ld	r24, Z
     23a:	91 81       	ldd	r25, Z+1	; 0x01
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	91 83       	std	Z+1, r25	; 0x01
     240:	80 83       	st	Z, r24
	{
		e3.inc_count();
	}
	else
		e3.dcr_count();
}
     242:	ff 91       	pop	r31
     244:	ef 91       	pop	r30
     246:	9f 91       	pop	r25
     248:	8f 91       	pop	r24
     24a:	0f 90       	pop	r0
     24c:	0b be       	out	0x3b, r0	; 59
     24e:	0f 90       	pop	r0
     250:	0f be       	out	0x3f, r0	; 63
     252:	0f 90       	pop	r0
     254:	1f 90       	pop	r1
     256:	18 95       	reti

00000258 <__vector_4>:
ISR(INT3_vect)	//for motor4
{
     258:	1f 92       	push	r1
     25a:	0f 92       	push	r0
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	0f 92       	push	r0
     260:	11 24       	eor	r1, r1
     262:	0b b6       	in	r0, 0x3b	; 59
     264:	0f 92       	push	r0
     266:	8f 93       	push	r24
     268:	9f 93       	push	r25
     26a:	ef 93       	push	r30
     26c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA3)))
     26e:	03 9b       	sbis	0x00, 3	; 0
     270:	08 c0       	rjmp	.+16     	; 0x282 <__vector_4+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     272:	e3 e0       	ldi	r30, 0x03	; 3
     274:	f2 e0       	ldi	r31, 0x02	; 2
     276:	80 81       	ld	r24, Z
     278:	91 81       	ldd	r25, Z+1	; 0x01
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	91 83       	std	Z+1, r25	; 0x01
     27e:	80 83       	st	Z, r24
     280:	07 c0       	rjmp	.+14     	; 0x290 <__vector_4+0x38>
		inline void dcr_count(){count_encoder--;};
     282:	e3 e0       	ldi	r30, 0x03	; 3
     284:	f2 e0       	ldi	r31, 0x02	; 2
     286:	80 81       	ld	r24, Z
     288:	91 81       	ldd	r25, Z+1	; 0x01
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	91 83       	std	Z+1, r25	; 0x01
     28e:	80 83       	st	Z, r24
	{
		e4.inc_count();
	}
	else
	e4.dcr_count();
}
     290:	ff 91       	pop	r31
     292:	ef 91       	pop	r30
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	0f 90       	pop	r0
     29a:	0b be       	out	0x3b, r0	; 59
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     2a6:	1f 92       	push	r1
     2a8:	0f 92       	push	r0
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	0f 92       	push	r0
     2ae:	11 24       	eor	r1, r1
     2b0:	0b b6       	in	r0, 0x3b	; 59
     2b2:	0f 92       	push	r0
     2b4:	8f 93       	push	r24
     2b6:	9f 93       	push	r25
     2b8:	ef 93       	push	r30
     2ba:	ff 93       	push	r31
	datacount++;
     2bc:	80 91 02 02 	lds	r24, 0x0202
     2c0:	8f 5f       	subi	r24, 0xFF	; 255
     2c2:	80 93 02 02 	sts	0x0202, r24
	
		PidUpdateFlagMotor = true;
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	90 93 8f 02 	sts	0x028F, r25
		
 	if(datacount == 2){
     2cc:	82 30       	cpi	r24, 0x02	; 2
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <__vector_23+0x2e>
 		//getdata = true;
 		datacount = 0;
     2d0:	10 92 02 02 	sts	0x0202, r1
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     2d4:	eb e1       	ldi	r30, 0x1B	; 27
     2d6:	f2 e0       	ldi	r31, 0x02	; 2
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	93 83       	std	Z+3, r25	; 0x03
     2de:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     2e0:	11 82       	std	Z+1, r1	; 0x01
     2e2:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     2e4:	e3 e1       	ldi	r30, 0x13	; 19
     2e6:	f2 e0       	ldi	r31, 0x02	; 2
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	93 83       	std	Z+3, r25	; 0x03
     2ee:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     2f0:	11 82       	std	Z+1, r1	; 0x01
     2f2:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     2f4:	eb e0       	ldi	r30, 0x0B	; 11
     2f6:	f2 e0       	ldi	r31, 0x02	; 2
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	93 83       	std	Z+3, r25	; 0x03
     2fe:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     300:	11 82       	std	Z+1, r1	; 0x01
     302:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     304:	e3 e0       	ldi	r30, 0x03	; 3
     306:	f2 e0       	ldi	r31, 0x02	; 2
     308:	80 81       	ld	r24, Z
     30a:	91 81       	ldd	r25, Z+1	; 0x01
     30c:	93 83       	std	Z+3, r25	; 0x03
     30e:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     310:	11 82       	std	Z+1, r1	; 0x01
     312:	10 82       	st	Z, r1
	e1.setspeed();
	e2.setspeed();
	e3.setspeed();
	e4.setspeed();
	
     314:	ff 91       	pop	r31
     316:	ef 91       	pop	r30
     318:	9f 91       	pop	r25
     31a:	8f 91       	pop	r24
     31c:	0f 90       	pop	r0
     31e:	0b be       	out	0x3b, r0	; 59
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <_Z12setTuningsM1a>:
UART3TransmitData(md.ki * 100);
UART3TransmitString(" ");
UART3TransmitData(md.kd * 2);

UART3TransmitString("\r\n");
}
     32a:	8f 92       	push	r8
     32c:	9f 92       	push	r9
     32e:	af 92       	push	r10
     330:	bf 92       	push	r11
     332:	cf 92       	push	r12
     334:	df 92       	push	r13
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	20 91 1d 02 	lds	r18, 0x021D
     346:	30 91 1e 02 	lds	r19, 0x021E
     34a:	c5 e7       	ldi	r28, 0x75	; 117
     34c:	d2 e0       	ldi	r29, 0x02	; 2
     34e:	3d 87       	std	Y+13, r19	; 0x0d
     350:	2c 87       	std	Y+12, r18	; 0x0c
     352:	08 2f       	mov	r16, r24
     354:	88 0f       	add	r24, r24
     356:	11 0b       	sbc	r17, r17
     358:	02 1b       	sub	r16, r18
     35a:	13 0b       	sbc	r17, r19
     35c:	19 8b       	std	Y+17, r17	; 0x11
     35e:	08 8b       	std	Y+16, r16	; 0x10
     360:	b8 01       	movw	r22, r16
     362:	01 2e       	mov	r0, r17
     364:	00 0c       	add	r0, r0
     366:	88 0b       	sbc	r24, r24
     368:	99 0b       	sbc	r25, r25
     36a:	58 d6       	rcall	.+3248   	; 0x101c <__floatsisf>
     36c:	4b 01       	movw	r8, r22
     36e:	5c 01       	movw	r10, r24
     370:	2c 81       	ldd	r18, Y+4	; 0x04
     372:	3d 81       	ldd	r19, Y+5	; 0x05
     374:	4e 81       	ldd	r20, Y+6	; 0x06
     376:	5f 81       	ldd	r21, Y+7	; 0x07
     378:	dd d6       	rcall	.+3514   	; 0x1134 <__mulsf3>
     37a:	2a 89       	ldd	r18, Y+18	; 0x12
     37c:	3b 89       	ldd	r19, Y+19	; 0x13
     37e:	4c 89       	ldd	r20, Y+20	; 0x14
     380:	5d 89       	ldd	r21, Y+21	; 0x15
     382:	b5 d5       	rcall	.+2922   	; 0xeee <__addsf3>
     384:	6b 01       	movw	r12, r22
     386:	7c 01       	movw	r14, r24
     388:	6a 8b       	std	Y+18, r22	; 0x12
     38a:	7b 8b       	std	Y+19, r23	; 0x13
     38c:	8c 8b       	std	Y+20, r24	; 0x14
     38e:	9d 8b       	std	Y+21, r25	; 0x15
     390:	28 81       	ld	r18, Y
     392:	39 81       	ldd	r19, Y+1	; 0x01
     394:	4a 81       	ldd	r20, Y+2	; 0x02
     396:	5b 81       	ldd	r21, Y+3	; 0x03
     398:	c5 01       	movw	r24, r10
     39a:	b4 01       	movw	r22, r8
     39c:	cb d6       	rcall	.+3478   	; 0x1134 <__mulsf3>
     39e:	9b 01       	movw	r18, r22
     3a0:	ac 01       	movw	r20, r24
     3a2:	c7 01       	movw	r24, r14
     3a4:	b6 01       	movw	r22, r12
     3a6:	a3 d5       	rcall	.+2886   	; 0xeee <__addsf3>
     3a8:	6b 01       	movw	r12, r22
     3aa:	7c 01       	movw	r14, r24
     3ac:	8e 89       	ldd	r24, Y+22	; 0x16
     3ae:	9f 89       	ldd	r25, Y+23	; 0x17
     3b0:	98 01       	movw	r18, r16
     3b2:	28 1b       	sub	r18, r24
     3b4:	39 0b       	sbc	r19, r25
     3b6:	b9 01       	movw	r22, r18
     3b8:	33 0f       	add	r19, r19
     3ba:	88 0b       	sbc	r24, r24
     3bc:	99 0b       	sbc	r25, r25
     3be:	2e d6       	rcall	.+3164   	; 0x101c <__floatsisf>
     3c0:	28 85       	ldd	r18, Y+8	; 0x08
     3c2:	39 85       	ldd	r19, Y+9	; 0x09
     3c4:	4a 85       	ldd	r20, Y+10	; 0x0a
     3c6:	5b 85       	ldd	r21, Y+11	; 0x0b
     3c8:	b5 d6       	rcall	.+3434   	; 0x1134 <__mulsf3>
     3ca:	9b 01       	movw	r18, r22
     3cc:	ac 01       	movw	r20, r24
     3ce:	c7 01       	movw	r24, r14
     3d0:	b6 01       	movw	r22, r12
     3d2:	8d d5       	rcall	.+2842   	; 0xeee <__addsf3>
     3d4:	f0 d5       	rcall	.+3040   	; 0xfb6 <__fixsfsi>
     3d6:	7f 87       	std	Y+15, r23	; 0x0f
     3d8:	6e 87       	std	Y+14, r22	; 0x0e
     3da:	1f 8b       	std	Y+23, r17	; 0x17
     3dc:	0e 8b       	std	Y+22, r16	; 0x16
     3de:	28 8d       	ldd	r18, Y+24	; 0x18
     3e0:	39 8d       	ldd	r19, Y+25	; 0x19
     3e2:	62 0f       	add	r22, r18
     3e4:	73 1f       	adc	r23, r19
     3e6:	cb 01       	movw	r24, r22
     3e8:	77 23       	and	r23, r23
     3ea:	24 f4       	brge	.+8      	; 0x3f4 <_Z12setTuningsM1a+0xca>
     3ec:	88 27       	eor	r24, r24
     3ee:	99 27       	eor	r25, r25
     3f0:	86 1b       	sub	r24, r22
     3f2:	97 0b       	sbc	r25, r23
     3f4:	8a 3f       	cpi	r24, 0xFA	; 250
     3f6:	91 05       	cpc	r25, r1
     3f8:	2c f4       	brge	.+10     	; 0x404 <_Z12setTuningsM1a+0xda>
     3fa:	70 93 8e 02 	sts	0x028E, r23
     3fe:	60 93 8d 02 	sts	0x028D, r22
     402:	10 c0       	rjmp	.+32     	; 0x424 <_Z12setTuningsM1a+0xfa>
     404:	16 16       	cp	r1, r22
     406:	17 06       	cpc	r1, r23
     408:	3c f4       	brge	.+14     	; 0x418 <_Z12setTuningsM1a+0xee>
     40a:	89 ef       	ldi	r24, 0xF9	; 249
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	90 93 8e 02 	sts	0x028E, r25
     412:	80 93 8d 02 	sts	0x028D, r24
     416:	06 c0       	rjmp	.+12     	; 0x424 <_Z12setTuningsM1a+0xfa>
     418:	87 e0       	ldi	r24, 0x07	; 7
     41a:	9f ef       	ldi	r25, 0xFF	; 255
     41c:	90 93 8e 02 	sts	0x028E, r25
     420:	80 93 8d 02 	sts	0x028D, r24
     424:	60 91 8d 02 	lds	r22, 0x028D
     428:	70 91 8e 02 	lds	r23, 0x028E
     42c:	86 e2       	ldi	r24, 0x26	; 38
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	5d d4       	rcall	.+2234   	; 0xcec <_ZN5Motor11SetOcrValueEi>
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	df 90       	pop	r13
     440:	cf 90       	pop	r12
     442:	bf 90       	pop	r11
     444:	af 90       	pop	r10
     446:	9f 90       	pop	r9
     448:	8f 90       	pop	r8
     44a:	08 95       	ret

0000044c <_Z12setTuningsM2a>:
     44c:	8f 92       	push	r8
     44e:	9f 92       	push	r9
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	20 91 15 02 	lds	r18, 0x0215
     468:	30 91 16 02 	lds	r19, 0x0216
     46c:	cb e5       	ldi	r28, 0x5B	; 91
     46e:	d2 e0       	ldi	r29, 0x02	; 2
     470:	3d 87       	std	Y+13, r19	; 0x0d
     472:	2c 87       	std	Y+12, r18	; 0x0c
     474:	08 2f       	mov	r16, r24
     476:	88 0f       	add	r24, r24
     478:	11 0b       	sbc	r17, r17
     47a:	02 1b       	sub	r16, r18
     47c:	13 0b       	sbc	r17, r19
     47e:	19 8b       	std	Y+17, r17	; 0x11
     480:	08 8b       	std	Y+16, r16	; 0x10
     482:	b8 01       	movw	r22, r16
     484:	01 2e       	mov	r0, r17
     486:	00 0c       	add	r0, r0
     488:	88 0b       	sbc	r24, r24
     48a:	99 0b       	sbc	r25, r25
     48c:	c7 d5       	rcall	.+2958   	; 0x101c <__floatsisf>
     48e:	4b 01       	movw	r8, r22
     490:	5c 01       	movw	r10, r24
     492:	2c 81       	ldd	r18, Y+4	; 0x04
     494:	3d 81       	ldd	r19, Y+5	; 0x05
     496:	4e 81       	ldd	r20, Y+6	; 0x06
     498:	5f 81       	ldd	r21, Y+7	; 0x07
     49a:	4c d6       	rcall	.+3224   	; 0x1134 <__mulsf3>
     49c:	2a 89       	ldd	r18, Y+18	; 0x12
     49e:	3b 89       	ldd	r19, Y+19	; 0x13
     4a0:	4c 89       	ldd	r20, Y+20	; 0x14
     4a2:	5d 89       	ldd	r21, Y+21	; 0x15
     4a4:	24 d5       	rcall	.+2632   	; 0xeee <__addsf3>
     4a6:	6b 01       	movw	r12, r22
     4a8:	7c 01       	movw	r14, r24
     4aa:	6a 8b       	std	Y+18, r22	; 0x12
     4ac:	7b 8b       	std	Y+19, r23	; 0x13
     4ae:	8c 8b       	std	Y+20, r24	; 0x14
     4b0:	9d 8b       	std	Y+21, r25	; 0x15
     4b2:	28 81       	ld	r18, Y
     4b4:	39 81       	ldd	r19, Y+1	; 0x01
     4b6:	4a 81       	ldd	r20, Y+2	; 0x02
     4b8:	5b 81       	ldd	r21, Y+3	; 0x03
     4ba:	c5 01       	movw	r24, r10
     4bc:	b4 01       	movw	r22, r8
     4be:	3a d6       	rcall	.+3188   	; 0x1134 <__mulsf3>
     4c0:	9b 01       	movw	r18, r22
     4c2:	ac 01       	movw	r20, r24
     4c4:	c7 01       	movw	r24, r14
     4c6:	b6 01       	movw	r22, r12
     4c8:	12 d5       	rcall	.+2596   	; 0xeee <__addsf3>
     4ca:	6b 01       	movw	r12, r22
     4cc:	7c 01       	movw	r14, r24
     4ce:	8e 89       	ldd	r24, Y+22	; 0x16
     4d0:	9f 89       	ldd	r25, Y+23	; 0x17
     4d2:	98 01       	movw	r18, r16
     4d4:	28 1b       	sub	r18, r24
     4d6:	39 0b       	sbc	r19, r25
     4d8:	b9 01       	movw	r22, r18
     4da:	33 0f       	add	r19, r19
     4dc:	88 0b       	sbc	r24, r24
     4de:	99 0b       	sbc	r25, r25
     4e0:	9d d5       	rcall	.+2874   	; 0x101c <__floatsisf>
     4e2:	28 85       	ldd	r18, Y+8	; 0x08
     4e4:	39 85       	ldd	r19, Y+9	; 0x09
     4e6:	4a 85       	ldd	r20, Y+10	; 0x0a
     4e8:	5b 85       	ldd	r21, Y+11	; 0x0b
     4ea:	24 d6       	rcall	.+3144   	; 0x1134 <__mulsf3>
     4ec:	9b 01       	movw	r18, r22
     4ee:	ac 01       	movw	r20, r24
     4f0:	c7 01       	movw	r24, r14
     4f2:	b6 01       	movw	r22, r12
     4f4:	fc d4       	rcall	.+2552   	; 0xeee <__addsf3>
     4f6:	5f d5       	rcall	.+2750   	; 0xfb6 <__fixsfsi>
     4f8:	7f 87       	std	Y+15, r23	; 0x0f
     4fa:	6e 87       	std	Y+14, r22	; 0x0e
     4fc:	1f 8b       	std	Y+23, r17	; 0x17
     4fe:	0e 8b       	std	Y+22, r16	; 0x16
     500:	28 8d       	ldd	r18, Y+24	; 0x18
     502:	39 8d       	ldd	r19, Y+25	; 0x19
     504:	62 0f       	add	r22, r18
     506:	73 1f       	adc	r23, r19
     508:	cb 01       	movw	r24, r22
     50a:	77 23       	and	r23, r23
     50c:	24 f4       	brge	.+8      	; 0x516 <_Z12setTuningsM2a+0xca>
     50e:	88 27       	eor	r24, r24
     510:	99 27       	eor	r25, r25
     512:	86 1b       	sub	r24, r22
     514:	97 0b       	sbc	r25, r23
     516:	8a 3f       	cpi	r24, 0xFA	; 250
     518:	91 05       	cpc	r25, r1
     51a:	2c f4       	brge	.+10     	; 0x526 <_Z12setTuningsM2a+0xda>
     51c:	70 93 74 02 	sts	0x0274, r23
     520:	60 93 73 02 	sts	0x0273, r22
     524:	10 c0       	rjmp	.+32     	; 0x546 <_Z12setTuningsM2a+0xfa>
     526:	16 16       	cp	r1, r22
     528:	17 06       	cpc	r1, r23
     52a:	3c f4       	brge	.+14     	; 0x53a <_Z12setTuningsM2a+0xee>
     52c:	89 ef       	ldi	r24, 0xF9	; 249
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	90 93 74 02 	sts	0x0274, r25
     534:	80 93 73 02 	sts	0x0273, r24
     538:	06 c0       	rjmp	.+12     	; 0x546 <_Z12setTuningsM2a+0xfa>
     53a:	87 e0       	ldi	r24, 0x07	; 7
     53c:	9f ef       	ldi	r25, 0xFF	; 255
     53e:	90 93 74 02 	sts	0x0274, r25
     542:	80 93 73 02 	sts	0x0273, r24
     546:	60 91 73 02 	lds	r22, 0x0273
     54a:	70 91 74 02 	lds	r23, 0x0274
     54e:	85 e2       	ldi	r24, 0x25	; 37
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	cc d3       	rcall	.+1944   	; 0xcec <_ZN5Motor11SetOcrValueEi>
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	cf 90       	pop	r12
     564:	bf 90       	pop	r11
     566:	af 90       	pop	r10
     568:	9f 90       	pop	r9
     56a:	8f 90       	pop	r8
     56c:	08 95       	ret

0000056e <_Z12setTuningsM3a>:
     56e:	8f 92       	push	r8
     570:	9f 92       	push	r9
     572:	af 92       	push	r10
     574:	bf 92       	push	r11
     576:	cf 92       	push	r12
     578:	df 92       	push	r13
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	20 91 0d 02 	lds	r18, 0x020D
     58a:	30 91 0e 02 	lds	r19, 0x020E
     58e:	c1 e4       	ldi	r28, 0x41	; 65
     590:	d2 e0       	ldi	r29, 0x02	; 2
     592:	3d 87       	std	Y+13, r19	; 0x0d
     594:	2c 87       	std	Y+12, r18	; 0x0c
     596:	08 2f       	mov	r16, r24
     598:	88 0f       	add	r24, r24
     59a:	11 0b       	sbc	r17, r17
     59c:	02 1b       	sub	r16, r18
     59e:	13 0b       	sbc	r17, r19
     5a0:	19 8b       	std	Y+17, r17	; 0x11
     5a2:	08 8b       	std	Y+16, r16	; 0x10
     5a4:	b8 01       	movw	r22, r16
     5a6:	01 2e       	mov	r0, r17
     5a8:	00 0c       	add	r0, r0
     5aa:	88 0b       	sbc	r24, r24
     5ac:	99 0b       	sbc	r25, r25
     5ae:	36 d5       	rcall	.+2668   	; 0x101c <__floatsisf>
     5b0:	4b 01       	movw	r8, r22
     5b2:	5c 01       	movw	r10, r24
     5b4:	2c 81       	ldd	r18, Y+4	; 0x04
     5b6:	3d 81       	ldd	r19, Y+5	; 0x05
     5b8:	4e 81       	ldd	r20, Y+6	; 0x06
     5ba:	5f 81       	ldd	r21, Y+7	; 0x07
     5bc:	bb d5       	rcall	.+2934   	; 0x1134 <__mulsf3>
     5be:	2a 89       	ldd	r18, Y+18	; 0x12
     5c0:	3b 89       	ldd	r19, Y+19	; 0x13
     5c2:	4c 89       	ldd	r20, Y+20	; 0x14
     5c4:	5d 89       	ldd	r21, Y+21	; 0x15
     5c6:	93 d4       	rcall	.+2342   	; 0xeee <__addsf3>
     5c8:	6b 01       	movw	r12, r22
     5ca:	7c 01       	movw	r14, r24
     5cc:	6a 8b       	std	Y+18, r22	; 0x12
     5ce:	7b 8b       	std	Y+19, r23	; 0x13
     5d0:	8c 8b       	std	Y+20, r24	; 0x14
     5d2:	9d 8b       	std	Y+21, r25	; 0x15
     5d4:	28 81       	ld	r18, Y
     5d6:	39 81       	ldd	r19, Y+1	; 0x01
     5d8:	4a 81       	ldd	r20, Y+2	; 0x02
     5da:	5b 81       	ldd	r21, Y+3	; 0x03
     5dc:	c5 01       	movw	r24, r10
     5de:	b4 01       	movw	r22, r8
     5e0:	a9 d5       	rcall	.+2898   	; 0x1134 <__mulsf3>
     5e2:	9b 01       	movw	r18, r22
     5e4:	ac 01       	movw	r20, r24
     5e6:	c7 01       	movw	r24, r14
     5e8:	b6 01       	movw	r22, r12
     5ea:	81 d4       	rcall	.+2306   	; 0xeee <__addsf3>
     5ec:	6b 01       	movw	r12, r22
     5ee:	7c 01       	movw	r14, r24
     5f0:	8e 89       	ldd	r24, Y+22	; 0x16
     5f2:	9f 89       	ldd	r25, Y+23	; 0x17
     5f4:	98 01       	movw	r18, r16
     5f6:	28 1b       	sub	r18, r24
     5f8:	39 0b       	sbc	r19, r25
     5fa:	b9 01       	movw	r22, r18
     5fc:	33 0f       	add	r19, r19
     5fe:	88 0b       	sbc	r24, r24
     600:	99 0b       	sbc	r25, r25
     602:	0c d5       	rcall	.+2584   	; 0x101c <__floatsisf>
     604:	28 85       	ldd	r18, Y+8	; 0x08
     606:	39 85       	ldd	r19, Y+9	; 0x09
     608:	4a 85       	ldd	r20, Y+10	; 0x0a
     60a:	5b 85       	ldd	r21, Y+11	; 0x0b
     60c:	93 d5       	rcall	.+2854   	; 0x1134 <__mulsf3>
     60e:	9b 01       	movw	r18, r22
     610:	ac 01       	movw	r20, r24
     612:	c7 01       	movw	r24, r14
     614:	b6 01       	movw	r22, r12
     616:	6b d4       	rcall	.+2262   	; 0xeee <__addsf3>
     618:	ce d4       	rcall	.+2460   	; 0xfb6 <__fixsfsi>
     61a:	7f 87       	std	Y+15, r23	; 0x0f
     61c:	6e 87       	std	Y+14, r22	; 0x0e
     61e:	1f 8b       	std	Y+23, r17	; 0x17
     620:	0e 8b       	std	Y+22, r16	; 0x16
     622:	28 8d       	ldd	r18, Y+24	; 0x18
     624:	39 8d       	ldd	r19, Y+25	; 0x19
     626:	62 0f       	add	r22, r18
     628:	73 1f       	adc	r23, r19
     62a:	cb 01       	movw	r24, r22
     62c:	77 23       	and	r23, r23
     62e:	24 f4       	brge	.+8      	; 0x638 <_Z12setTuningsM3a+0xca>
     630:	88 27       	eor	r24, r24
     632:	99 27       	eor	r25, r25
     634:	86 1b       	sub	r24, r22
     636:	97 0b       	sbc	r25, r23
     638:	8a 3f       	cpi	r24, 0xFA	; 250
     63a:	91 05       	cpc	r25, r1
     63c:	2c f4       	brge	.+10     	; 0x648 <_Z12setTuningsM3a+0xda>
     63e:	70 93 5a 02 	sts	0x025A, r23
     642:	60 93 59 02 	sts	0x0259, r22
     646:	10 c0       	rjmp	.+32     	; 0x668 <_Z12setTuningsM3a+0xfa>
     648:	16 16       	cp	r1, r22
     64a:	17 06       	cpc	r1, r23
     64c:	3c f4       	brge	.+14     	; 0x65c <_Z12setTuningsM3a+0xee>
     64e:	89 ef       	ldi	r24, 0xF9	; 249
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	90 93 5a 02 	sts	0x025A, r25
     656:	80 93 59 02 	sts	0x0259, r24
     65a:	06 c0       	rjmp	.+12     	; 0x668 <_Z12setTuningsM3a+0xfa>
     65c:	87 e0       	ldi	r24, 0x07	; 7
     65e:	9f ef       	ldi	r25, 0xFF	; 255
     660:	90 93 5a 02 	sts	0x025A, r25
     664:	80 93 59 02 	sts	0x0259, r24
     668:	60 91 59 02 	lds	r22, 0x0259
     66c:	70 91 5a 02 	lds	r23, 0x025A
     670:	84 e2       	ldi	r24, 0x24	; 36
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	3b d3       	rcall	.+1654   	; 0xcec <_ZN5Motor11SetOcrValueEi>
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	df 90       	pop	r13
     684:	cf 90       	pop	r12
     686:	bf 90       	pop	r11
     688:	af 90       	pop	r10
     68a:	9f 90       	pop	r9
     68c:	8f 90       	pop	r8
     68e:	08 95       	ret

00000690 <_Z12setTuningsM4a>:
     690:	8f 92       	push	r8
     692:	9f 92       	push	r9
     694:	af 92       	push	r10
     696:	bf 92       	push	r11
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	20 91 05 02 	lds	r18, 0x0205
     6ac:	30 91 06 02 	lds	r19, 0x0206
     6b0:	c7 e2       	ldi	r28, 0x27	; 39
     6b2:	d2 e0       	ldi	r29, 0x02	; 2
     6b4:	3d 87       	std	Y+13, r19	; 0x0d
     6b6:	2c 87       	std	Y+12, r18	; 0x0c
     6b8:	08 2f       	mov	r16, r24
     6ba:	88 0f       	add	r24, r24
     6bc:	11 0b       	sbc	r17, r17
     6be:	02 1b       	sub	r16, r18
     6c0:	13 0b       	sbc	r17, r19
     6c2:	19 8b       	std	Y+17, r17	; 0x11
     6c4:	08 8b       	std	Y+16, r16	; 0x10
     6c6:	b8 01       	movw	r22, r16
     6c8:	01 2e       	mov	r0, r17
     6ca:	00 0c       	add	r0, r0
     6cc:	88 0b       	sbc	r24, r24
     6ce:	99 0b       	sbc	r25, r25
     6d0:	a5 d4       	rcall	.+2378   	; 0x101c <__floatsisf>
     6d2:	4b 01       	movw	r8, r22
     6d4:	5c 01       	movw	r10, r24
     6d6:	2c 81       	ldd	r18, Y+4	; 0x04
     6d8:	3d 81       	ldd	r19, Y+5	; 0x05
     6da:	4e 81       	ldd	r20, Y+6	; 0x06
     6dc:	5f 81       	ldd	r21, Y+7	; 0x07
     6de:	2a d5       	rcall	.+2644   	; 0x1134 <__mulsf3>
     6e0:	2a 89       	ldd	r18, Y+18	; 0x12
     6e2:	3b 89       	ldd	r19, Y+19	; 0x13
     6e4:	4c 89       	ldd	r20, Y+20	; 0x14
     6e6:	5d 89       	ldd	r21, Y+21	; 0x15
     6e8:	02 d4       	rcall	.+2052   	; 0xeee <__addsf3>
     6ea:	6b 01       	movw	r12, r22
     6ec:	7c 01       	movw	r14, r24
     6ee:	6a 8b       	std	Y+18, r22	; 0x12
     6f0:	7b 8b       	std	Y+19, r23	; 0x13
     6f2:	8c 8b       	std	Y+20, r24	; 0x14
     6f4:	9d 8b       	std	Y+21, r25	; 0x15
     6f6:	28 81       	ld	r18, Y
     6f8:	39 81       	ldd	r19, Y+1	; 0x01
     6fa:	4a 81       	ldd	r20, Y+2	; 0x02
     6fc:	5b 81       	ldd	r21, Y+3	; 0x03
     6fe:	c5 01       	movw	r24, r10
     700:	b4 01       	movw	r22, r8
     702:	18 d5       	rcall	.+2608   	; 0x1134 <__mulsf3>
     704:	9b 01       	movw	r18, r22
     706:	ac 01       	movw	r20, r24
     708:	c7 01       	movw	r24, r14
     70a:	b6 01       	movw	r22, r12
     70c:	f0 d3       	rcall	.+2016   	; 0xeee <__addsf3>
     70e:	6b 01       	movw	r12, r22
     710:	7c 01       	movw	r14, r24
     712:	8e 89       	ldd	r24, Y+22	; 0x16
     714:	9f 89       	ldd	r25, Y+23	; 0x17
     716:	98 01       	movw	r18, r16
     718:	28 1b       	sub	r18, r24
     71a:	39 0b       	sbc	r19, r25
     71c:	b9 01       	movw	r22, r18
     71e:	33 0f       	add	r19, r19
     720:	88 0b       	sbc	r24, r24
     722:	99 0b       	sbc	r25, r25
     724:	7b d4       	rcall	.+2294   	; 0x101c <__floatsisf>
     726:	28 85       	ldd	r18, Y+8	; 0x08
     728:	39 85       	ldd	r19, Y+9	; 0x09
     72a:	4a 85       	ldd	r20, Y+10	; 0x0a
     72c:	5b 85       	ldd	r21, Y+11	; 0x0b
     72e:	02 d5       	rcall	.+2564   	; 0x1134 <__mulsf3>
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	da d3       	rcall	.+1972   	; 0xeee <__addsf3>
     73a:	3d d4       	rcall	.+2170   	; 0xfb6 <__fixsfsi>
     73c:	7f 87       	std	Y+15, r23	; 0x0f
     73e:	6e 87       	std	Y+14, r22	; 0x0e
     740:	1f 8b       	std	Y+23, r17	; 0x17
     742:	0e 8b       	std	Y+22, r16	; 0x16
     744:	28 8d       	ldd	r18, Y+24	; 0x18
     746:	39 8d       	ldd	r19, Y+25	; 0x19
     748:	62 0f       	add	r22, r18
     74a:	73 1f       	adc	r23, r19
     74c:	cb 01       	movw	r24, r22
     74e:	77 23       	and	r23, r23
     750:	24 f4       	brge	.+8      	; 0x75a <_Z12setTuningsM4a+0xca>
     752:	88 27       	eor	r24, r24
     754:	99 27       	eor	r25, r25
     756:	86 1b       	sub	r24, r22
     758:	97 0b       	sbc	r25, r23
     75a:	8a 3f       	cpi	r24, 0xFA	; 250
     75c:	91 05       	cpc	r25, r1
     75e:	2c f4       	brge	.+10     	; 0x76a <_Z12setTuningsM4a+0xda>
     760:	70 93 40 02 	sts	0x0240, r23
     764:	60 93 3f 02 	sts	0x023F, r22
     768:	10 c0       	rjmp	.+32     	; 0x78a <_Z12setTuningsM4a+0xfa>
     76a:	16 16       	cp	r1, r22
     76c:	17 06       	cpc	r1, r23
     76e:	3c f4       	brge	.+14     	; 0x77e <_Z12setTuningsM4a+0xee>
     770:	89 ef       	ldi	r24, 0xF9	; 249
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	90 93 40 02 	sts	0x0240, r25
     778:	80 93 3f 02 	sts	0x023F, r24
     77c:	06 c0       	rjmp	.+12     	; 0x78a <_Z12setTuningsM4a+0xfa>
     77e:	87 e0       	ldi	r24, 0x07	; 7
     780:	9f ef       	ldi	r25, 0xFF	; 255
     782:	90 93 40 02 	sts	0x0240, r25
     786:	80 93 3f 02 	sts	0x023F, r24
     78a:	60 91 3f 02 	lds	r22, 0x023F
     78e:	70 91 40 02 	lds	r23, 0x0240
     792:	83 e2       	ldi	r24, 0x23	; 35
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	aa d2       	rcall	.+1364   	; 0xcec <_ZN5Motor11SetOcrValueEi>
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	9f 90       	pop	r9
     7ae:	8f 90       	pop	r8
     7b0:	08 95       	ret

000007b2 <_Z10computePidv>:
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	80 91 00 02 	lds	r24, 0x0200
     7ba:	88 23       	and	r24, r24
     7bc:	91 f0       	breq	.+36     	; 0x7e2 <_Z10computePidv+0x30>
     7be:	80 91 8f 02 	lds	r24, 0x028F
     7c2:	88 23       	and	r24, r24
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <_Z10computePidv+0x16>
     7c6:	4f c0       	rjmp	.+158    	; 0x866 <_Z10computePidv+0xb4>
     7c8:	c4 e9       	ldi	r28, 0x94	; 148
     7ca:	d2 e0       	ldi	r29, 0x02	; 2
     7cc:	88 81       	ld	r24, Y
     7ce:	ad dd       	rcall	.-1190   	; 0x32a <_Z12setTuningsM1a>
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	3c de       	rcall	.-904    	; 0x44c <_Z12setTuningsM2a>
     7d4:	8a 81       	ldd	r24, Y+2	; 0x02
     7d6:	cb de       	rcall	.-618    	; 0x56e <_Z12setTuningsM3a>
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	5a df       	rcall	.-332    	; 0x690 <_Z12setTuningsM4a>
     7dc:	10 92 8f 02 	sts	0x028F, r1
     7e0:	42 c0       	rjmp	.+132    	; 0x866 <_Z10computePidv+0xb4>
     7e2:	c4 e9       	ldi	r28, 0x94	; 148
     7e4:	d2 e0       	ldi	r29, 0x02	; 2
     7e6:	68 81       	ld	r22, Y
     7e8:	06 2e       	mov	r0, r22
     7ea:	00 0c       	add	r0, r0
     7ec:	77 0b       	sbc	r23, r23
     7ee:	88 0b       	sbc	r24, r24
     7f0:	99 0b       	sbc	r25, r25
     7f2:	14 d4       	rcall	.+2088   	; 0x101c <__floatsisf>
     7f4:	2d ec       	ldi	r18, 0xCD	; 205
     7f6:	3c ec       	ldi	r19, 0xCC	; 204
     7f8:	4c ea       	ldi	r20, 0xAC	; 172
     7fa:	50 e4       	ldi	r21, 0x40	; 64
     7fc:	9b d4       	rcall	.+2358   	; 0x1134 <__mulsf3>
     7fe:	db d3       	rcall	.+1974   	; 0xfb6 <__fixsfsi>
     800:	86 e2       	ldi	r24, 0x26	; 38
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	73 d2       	rcall	.+1254   	; 0xcec <_ZN5Motor11SetOcrValueEi>
     806:	69 81       	ldd	r22, Y+1	; 0x01
     808:	06 2e       	mov	r0, r22
     80a:	00 0c       	add	r0, r0
     80c:	77 0b       	sbc	r23, r23
     80e:	88 0b       	sbc	r24, r24
     810:	99 0b       	sbc	r25, r25
     812:	04 d4       	rcall	.+2056   	; 0x101c <__floatsisf>
     814:	2d ec       	ldi	r18, 0xCD	; 205
     816:	3c ec       	ldi	r19, 0xCC	; 204
     818:	4c ea       	ldi	r20, 0xAC	; 172
     81a:	50 e4       	ldi	r21, 0x40	; 64
     81c:	8b d4       	rcall	.+2326   	; 0x1134 <__mulsf3>
     81e:	cb d3       	rcall	.+1942   	; 0xfb6 <__fixsfsi>
     820:	85 e2       	ldi	r24, 0x25	; 37
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	63 d2       	rcall	.+1222   	; 0xcec <_ZN5Motor11SetOcrValueEi>
     826:	6a 81       	ldd	r22, Y+2	; 0x02
     828:	06 2e       	mov	r0, r22
     82a:	00 0c       	add	r0, r0
     82c:	77 0b       	sbc	r23, r23
     82e:	88 0b       	sbc	r24, r24
     830:	99 0b       	sbc	r25, r25
     832:	f4 d3       	rcall	.+2024   	; 0x101c <__floatsisf>
     834:	2d ec       	ldi	r18, 0xCD	; 205
     836:	3c ec       	ldi	r19, 0xCC	; 204
     838:	4c ea       	ldi	r20, 0xAC	; 172
     83a:	50 e4       	ldi	r21, 0x40	; 64
     83c:	7b d4       	rcall	.+2294   	; 0x1134 <__mulsf3>
     83e:	bb d3       	rcall	.+1910   	; 0xfb6 <__fixsfsi>
     840:	84 e2       	ldi	r24, 0x24	; 36
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	53 d2       	rcall	.+1190   	; 0xcec <_ZN5Motor11SetOcrValueEi>
     846:	6b 81       	ldd	r22, Y+3	; 0x03
     848:	06 2e       	mov	r0, r22
     84a:	00 0c       	add	r0, r0
     84c:	77 0b       	sbc	r23, r23
     84e:	88 0b       	sbc	r24, r24
     850:	99 0b       	sbc	r25, r25
     852:	e4 d3       	rcall	.+1992   	; 0x101c <__floatsisf>
     854:	2d ec       	ldi	r18, 0xCD	; 205
     856:	3c ec       	ldi	r19, 0xCC	; 204
     858:	4c ea       	ldi	r20, 0xAC	; 172
     85a:	50 e4       	ldi	r21, 0x40	; 64
     85c:	6b d4       	rcall	.+2262   	; 0x1134 <__mulsf3>
     85e:	ab d3       	rcall	.+1878   	; 0xfb6 <__fixsfsi>
     860:	83 e2       	ldi	r24, 0x23	; 35
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	43 d2       	rcall	.+1158   	; 0xcec <_ZN5Motor11SetOcrValueEi>
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <_Z9stopDrivev>:
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	86 e2       	ldi	r24, 0x26	; 38
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	fa d1       	rcall	.+1012   	; 0xc6a <_ZN5Motor9StopMotorEv>
     876:	85 e2       	ldi	r24, 0x25	; 37
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	f7 d1       	rcall	.+1006   	; 0xc6a <_ZN5Motor9StopMotorEv>
     87c:	84 e2       	ldi	r24, 0x24	; 36
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	f4 d1       	rcall	.+1000   	; 0xc6a <_ZN5Motor9StopMotorEv>
     882:	83 e2       	ldi	r24, 0x23	; 35
     884:	92 e0       	ldi	r25, 0x02	; 2
     886:	f1 d1       	rcall	.+994    	; 0xc6a <_ZN5Motor9StopMotorEv>
     888:	87 e2       	ldi	r24, 0x27	; 39
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	fc 01       	movw	r30, r24
     88e:	17 8a       	std	Z+23, r1	; 0x17
     890:	16 8a       	std	Z+22, r1	; 0x16
     892:	c1 e4       	ldi	r28, 0x41	; 65
     894:	d2 e0       	ldi	r29, 0x02	; 2
     896:	1f 8a       	std	Y+23, r1	; 0x17
     898:	1e 8a       	std	Y+22, r1	; 0x16
     89a:	ab e5       	ldi	r26, 0x5B	; 91
     89c:	b2 e0       	ldi	r27, 0x02	; 2
     89e:	57 96       	adiw	r26, 0x17	; 23
     8a0:	1c 92       	st	X, r1
     8a2:	1e 92       	st	-X, r1
     8a4:	56 97       	sbiw	r26, 0x16	; 22
     8a6:	25 e7       	ldi	r18, 0x75	; 117
     8a8:	32 e0       	ldi	r19, 0x02	; 2
     8aa:	f9 01       	movw	r30, r18
     8ac:	17 8a       	std	Z+23, r1	; 0x17
     8ae:	16 8a       	std	Z+22, r1	; 0x16
     8b0:	fc 01       	movw	r30, r24
     8b2:	12 8a       	std	Z+18, r1	; 0x12
     8b4:	13 8a       	std	Z+19, r1	; 0x13
     8b6:	14 8a       	std	Z+20, r1	; 0x14
     8b8:	15 8a       	std	Z+21, r1	; 0x15
     8ba:	1a 8a       	std	Y+18, r1	; 0x12
     8bc:	1b 8a       	std	Y+19, r1	; 0x13
     8be:	1c 8a       	std	Y+20, r1	; 0x14
     8c0:	1d 8a       	std	Y+21, r1	; 0x15
     8c2:	52 96       	adiw	r26, 0x12	; 18
     8c4:	1d 92       	st	X+, r1
     8c6:	1d 92       	st	X+, r1
     8c8:	1d 92       	st	X+, r1
     8ca:	1c 92       	st	X, r1
     8cc:	55 97       	sbiw	r26, 0x15	; 21
     8ce:	f9 01       	movw	r30, r18
     8d0:	12 8a       	std	Z+18, r1	; 0x12
     8d2:	13 8a       	std	Z+19, r1	; 0x13
     8d4:	14 8a       	std	Z+20, r1	; 0x14
     8d6:	15 8a       	std	Z+21, r1	; 0x15
     8d8:	fc 01       	movw	r30, r24
     8da:	17 86       	std	Z+15, r1	; 0x0f
     8dc:	16 86       	std	Z+14, r1	; 0x0e
     8de:	1f 86       	std	Y+15, r1	; 0x0f
     8e0:	1e 86       	std	Y+14, r1	; 0x0e
     8e2:	1f 96       	adiw	r26, 0x0f	; 15
     8e4:	1c 92       	st	X, r1
     8e6:	1e 92       	st	-X, r1
     8e8:	1e 97       	sbiw	r26, 0x0e	; 14
     8ea:	f9 01       	movw	r30, r18
     8ec:	17 86       	std	Z+15, r1	; 0x0f
     8ee:	16 86       	std	Z+14, r1	; 0x0e
     8f0:	fc 01       	movw	r30, r24
     8f2:	11 8e       	std	Z+25, r1	; 0x19
     8f4:	10 8e       	std	Z+24, r1	; 0x18
     8f6:	19 8e       	std	Y+25, r1	; 0x19
     8f8:	18 8e       	std	Y+24, r1	; 0x18
     8fa:	59 96       	adiw	r26, 0x19	; 25
     8fc:	1c 92       	st	X, r1
     8fe:	1e 92       	st	-X, r1
     900:	58 97       	sbiw	r26, 0x18	; 24
     902:	f9 01       	movw	r30, r18
     904:	11 8e       	std	Z+25, r1	; 0x19
     906:	10 8e       	std	Z+24, r1	; 0x18
     908:	e4 e9       	ldi	r30, 0x94	; 148
     90a:	f2 e0       	ldi	r31, 0x02	; 2
     90c:	10 82       	st	Z, r1
     90e:	11 82       	std	Z+1, r1	; 0x01
     910:	12 82       	std	Z+2, r1	; 0x02
     912:	13 82       	std	Z+3, r1	; 0x03
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <main>:

int main(void)
{
 	PCICR |= (1<<PCIE0);
     91a:	e8 e6       	ldi	r30, 0x68	; 104
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	81 60       	ori	r24, 0x01	; 1
     922:	80 83       	st	Z, r24
 	PCMSK0 |= (1<<PCINT5);
     924:	eb e6       	ldi	r30, 0x6B	; 107
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	80 62       	ori	r24, 0x20	; 32
     92c:	80 83       	st	Z, r24
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     92e:	e5 e7       	ldi	r30, 0x75	; 117
     930:	f2 e0       	ldi	r31, 0x02	; 2
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e8       	ldi	r26, 0x80	; 128
     938:	bf e3       	ldi	r27, 0x3F	; 63
     93a:	80 83       	st	Z, r24
     93c:	91 83       	std	Z+1, r25	; 0x01
     93e:	a2 83       	std	Z+2, r26	; 0x02
     940:	b3 83       	std	Z+3, r27	; 0x03
		ki = KI;
     942:	14 82       	std	Z+4, r1	; 0x04
     944:	15 82       	std	Z+5, r1	; 0x05
     946:	16 82       	std	Z+6, r1	; 0x06
     948:	17 82       	std	Z+7, r1	; 0x07
		kd = KD;
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	60 ec       	ldi	r22, 0xC0	; 192
     950:	70 e4       	ldi	r23, 0x40	; 64
     952:	40 87       	std	Z+8, r20	; 0x08
     954:	51 87       	std	Z+9, r21	; 0x09
     956:	62 87       	std	Z+10, r22	; 0x0a
     958:	73 87       	std	Z+11, r23	; 0x0b
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     95a:	eb e5       	ldi	r30, 0x5B	; 91
     95c:	f2 e0       	ldi	r31, 0x02	; 2
     95e:	80 83       	st	Z, r24
     960:	91 83       	std	Z+1, r25	; 0x01
     962:	a2 83       	std	Z+2, r26	; 0x02
     964:	b3 83       	std	Z+3, r27	; 0x03
		ki = KI;
     966:	14 82       	std	Z+4, r1	; 0x04
     968:	15 82       	std	Z+5, r1	; 0x05
     96a:	16 82       	std	Z+6, r1	; 0x06
     96c:	17 82       	std	Z+7, r1	; 0x07
		kd = KD;
     96e:	40 87       	std	Z+8, r20	; 0x08
     970:	51 87       	std	Z+9, r21	; 0x09
     972:	62 87       	std	Z+10, r22	; 0x0a
     974:	73 87       	std	Z+11, r23	; 0x0b
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     976:	e1 e4       	ldi	r30, 0x41	; 65
     978:	f2 e0       	ldi	r31, 0x02	; 2
     97a:	4a e9       	ldi	r20, 0x9A	; 154
     97c:	59 e9       	ldi	r21, 0x99	; 153
     97e:	69 eb       	ldi	r22, 0xB9	; 185
     980:	7f e3       	ldi	r23, 0x3F	; 63
     982:	40 83       	st	Z, r20
     984:	51 83       	std	Z+1, r21	; 0x01
     986:	62 83       	std	Z+2, r22	; 0x02
     988:	73 83       	std	Z+3, r23	; 0x03
		ki = KI;
     98a:	14 82       	std	Z+4, r1	; 0x04
     98c:	15 82       	std	Z+5, r1	; 0x05
     98e:	16 82       	std	Z+6, r1	; 0x06
     990:	17 82       	std	Z+7, r1	; 0x07
		kd = KD;
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	70 e4       	ldi	r23, 0x40	; 64
     99a:	40 87       	std	Z+8, r20	; 0x08
     99c:	51 87       	std	Z+9, r21	; 0x09
     99e:	62 87       	std	Z+10, r22	; 0x0a
     9a0:	73 87       	std	Z+11, r23	; 0x0b
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     9a2:	e7 e2       	ldi	r30, 0x27	; 39
     9a4:	f2 e0       	ldi	r31, 0x02	; 2
     9a6:	80 83       	st	Z, r24
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	a2 83       	std	Z+2, r26	; 0x02
     9ac:	b3 83       	std	Z+3, r27	; 0x03
		ki = KI;
     9ae:	14 82       	std	Z+4, r1	; 0x04
     9b0:	15 82       	std	Z+5, r1	; 0x05
     9b2:	16 82       	std	Z+6, r1	; 0x06
     9b4:	17 82       	std	Z+7, r1	; 0x07
		kd = KD;
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e4       	ldi	r26, 0x40	; 64
     9bc:	b0 e4       	ldi	r27, 0x40	; 64
     9be:	80 87       	std	Z+8, r24	; 0x08
     9c0:	91 87       	std	Z+9, r25	; 0x09
     9c2:	a2 87       	std	Z+10, r26	; 0x0a
     9c4:	b3 87       	std	Z+11, r27	; 0x0b
	ma.setpid(1,0,6);//(0,0,0);//(2.6,0,3);
	mb.setpid(1,0,6);//(0,0,0);//(2.2,0,4);
	mc.setpid(1.45,0,2);//(0,0,0);//(1.9,0,6);
	md.setpid(1,0,3);//(0,0,0);//(1.95,0,6);
	
	initUART0();
     9c6:	ec d1       	rcall	.+984    	; 0xda0 <_Z9initUART0v>
	initUART2();
     9c8:	f7 d1       	rcall	.+1006   	; 0xdb8 <_Z9initUART2v>
	initUART3();
     9ca:	0a d2       	rcall	.+1044   	; 0xde0 <_Z9initUART3v>

	sei();
     9cc:	78 94       	sei
		 		//UART0TransmitString("\r\n");
		//
		 		//////////////////////////////////////////////////////////////////
//
		//
		computePid();	
     9ce:	f1 de       	rcall	.-542    	; 0x7b2 <_Z10computePidv>
UART3TransmitData(md.kd * 2);

UART3TransmitString("\r\n");
}

int main(void)
     9d0:	fe cf       	rjmp	.-4      	; 0x9ce <main+0xb4>

000009d2 <__vector_9>:
		//
		computePid();	
	}
}
 ISR(PCINT0_vect)
 {
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	0b b6       	in	r0, 0x3b	; 59
     9de:	0f 92       	push	r0
     9e0:	2f 93       	push	r18
     9e2:	3f 93       	push	r19
     9e4:	4f 93       	push	r20
     9e6:	5f 93       	push	r21
     9e8:	6f 93       	push	r22
     9ea:	7f 93       	push	r23
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	ef 93       	push	r30
     9f6:	ff 93       	push	r31
	stopDrive();
     9f8:	39 df       	rcall	.-398    	; 0x86c <_Z9stopDrivev>
}
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	0b be       	out	0x3b, r0	; 59
     a16:	0f 90       	pop	r0
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	0f 90       	pop	r0
     a1c:	1f 90       	pop	r1
     a1e:	18 95       	reti

00000a20 <_GLOBAL__sub_I_MotorPidFlag>:
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	80 93 26 02 	sts	0x0226, r24
			InitPWM();
     a26:	86 e2       	ldi	r24, 0x26	; 38
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	3b d0       	rcall	.+118    	; 0xaa2 <_ZN5Motor7InitPWMEv>
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	80 93 25 02 	sts	0x0225, r24
			InitPWM();
     a32:	85 e2       	ldi	r24, 0x25	; 37
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	35 d0       	rcall	.+106    	; 0xaa2 <_ZN5Motor7InitPWMEv>
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	80 93 24 02 	sts	0x0224, r24
			InitPWM();
     a3e:	84 e2       	ldi	r24, 0x24	; 36
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	2f d0       	rcall	.+94     	; 0xaa2 <_ZN5Motor7InitPWMEv>
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a44:	84 e0       	ldi	r24, 0x04	; 4
     a46:	80 93 23 02 	sts	0x0223, r24
			InitPWM();
     a4a:	83 e2       	ldi	r24, 0x23	; 35
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	29 d0       	rcall	.+82     	; 0xaa2 <_ZN5Motor7InitPWMEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     a50:	10 92 1c 02 	sts	0x021C, r1
     a54:	10 92 1b 02 	sts	0x021B, r1
			Init_encoder_interrupt();
     a58:	8b e1       	ldi	r24, 0x1B	; 27
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	75 db       	rcall	.-2326   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     a5e:	8b e1       	ldi	r24, 0x1B	; 27
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	7d db       	rcall	.-2310   	; 0x15e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     a64:	10 92 14 02 	sts	0x0214, r1
     a68:	10 92 13 02 	sts	0x0213, r1
			Init_encoder_interrupt();
     a6c:	83 e1       	ldi	r24, 0x13	; 19
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	6b db       	rcall	.-2346   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     a72:	83 e1       	ldi	r24, 0x13	; 19
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	73 db       	rcall	.-2330   	; 0x15e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     a78:	10 92 0c 02 	sts	0x020C, r1
     a7c:	10 92 0b 02 	sts	0x020B, r1
			Init_encoder_interrupt();
     a80:	8b e0       	ldi	r24, 0x0B	; 11
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	61 db       	rcall	.-2366   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     a86:	8b e0       	ldi	r24, 0x0B	; 11
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	69 db       	rcall	.-2350   	; 0x15e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     a8c:	10 92 04 02 	sts	0x0204, r1
     a90:	10 92 03 02 	sts	0x0203, r1
			Init_encoder_interrupt();
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	57 db       	rcall	.-2386   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	5f cb       	rjmp	.-2370   	; 0x15e <_ZN7encoder10Init_timerEv>
     aa0:	08 95       	ret

00000aa2 <_ZN5Motor7InitPWMEv>:



void Motor::InitPWM()
{
	if (num==1)
     aa2:	fc 01       	movw	r30, r24
     aa4:	80 81       	ld	r24, Z
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	f1 f4       	brne	.+60     	; 0xae6 <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
     aaa:	e7 e0       	ldi	r30, 0x07	; 7
     aac:	f1 e0       	ldi	r31, 0x01	; 1
     aae:	80 81       	ld	r24, Z
     ab0:	80 64       	ori	r24, 0x40	; 64
     ab2:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     ab4:	80 81       	ld	r24, Z
     ab6:	80 68       	ori	r24, 0x80	; 128
     ab8:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
     aba:	ea e0       	ldi	r30, 0x0A	; 10
     abc:	f1 e0       	ldi	r31, 0x01	; 1
     abe:	80 81       	ld	r24, Z
     ac0:	80 62       	ori	r24, 0x20	; 32
     ac2:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
     ac4:	e0 e2       	ldi	r30, 0x20	; 32
     ac6:	f1 e0       	ldi	r31, 0x01	; 1
     ac8:	80 81       	ld	r24, Z
     aca:	8a 60       	ori	r24, 0x0A	; 10
     acc:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     ace:	e1 e2       	ldi	r30, 0x21	; 33
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	80 81       	ld	r24, Z
     ad4:	8a 61       	ori	r24, 0x1A	; 26
     ad6:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     ad8:	89 ef       	ldi	r24, 0xF9	; 249
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	90 93 27 01 	sts	0x0127, r25
     ae0:	80 93 26 01 	sts	0x0126, r24
     ae4:	08 95       	ret
	}
	else if(num==2)
     ae6:	82 30       	cpi	r24, 0x02	; 2
     ae8:	f1 f4       	brne	.+60     	; 0xb26 <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
     aea:	e7 e0       	ldi	r30, 0x07	; 7
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	80 81       	ld	r24, Z
     af0:	88 60       	ori	r24, 0x08	; 8
     af2:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
     af4:	80 81       	ld	r24, Z
     af6:	84 60       	ori	r24, 0x04	; 4
     af8:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	f1 e0       	ldi	r31, 0x01	; 1
     afe:	80 81       	ld	r24, Z
     b00:	88 60       	ori	r24, 0x08	; 8
     b02:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
     b04:	e0 e2       	ldi	r30, 0x20	; 32
     b06:	f1 e0       	ldi	r31, 0x01	; 1
     b08:	80 81       	ld	r24, Z
     b0a:	82 68       	ori	r24, 0x82	; 130
     b0c:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
     b0e:	e1 e2       	ldi	r30, 0x21	; 33
     b10:	f1 e0       	ldi	r31, 0x01	; 1
     b12:	80 81       	ld	r24, Z
     b14:	8a 61       	ori	r24, 0x1A	; 26
     b16:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
     b18:	89 ef       	ldi	r24, 0xF9	; 249
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	90 93 27 01 	sts	0x0127, r25
     b20:	80 93 26 01 	sts	0x0126, r24
     b24:	08 95       	ret
	}
	else if(num==3)
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	f1 f4       	brne	.+60     	; 0xb66 <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
     b2a:	e7 e0       	ldi	r30, 0x07	; 7
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	80 81       	ld	r24, Z
     b30:	80 61       	ori	r24, 0x10	; 16
     b32:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
     b34:	80 81       	ld	r24, Z
     b36:	80 62       	ori	r24, 0x20	; 32
     b38:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
     b3a:	ea e0       	ldi	r30, 0x0A	; 10
     b3c:	f1 e0       	ldi	r31, 0x01	; 1
     b3e:	80 81       	ld	r24, Z
     b40:	80 61       	ori	r24, 0x10	; 16
     b42:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
     b44:	e0 e2       	ldi	r30, 0x20	; 32
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	80 81       	ld	r24, Z
     b4a:	82 62       	ori	r24, 0x22	; 34
     b4c:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
     b4e:	e1 e2       	ldi	r30, 0x21	; 33
     b50:	f1 e0       	ldi	r31, 0x01	; 1
     b52:	80 81       	ld	r24, Z
     b54:	8a 61       	ori	r24, 0x1A	; 26
     b56:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
     b58:	89 ef       	ldi	r24, 0xF9	; 249
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	90 93 27 01 	sts	0x0127, r25
     b60:	80 93 26 01 	sts	0x0126, r24
     b64:	08 95       	ret
	} 
	else if(num==4)
     b66:	84 30       	cpi	r24, 0x04	; 4
     b68:	e9 f4       	brne	.+58     	; 0xba4 <_ZN5Motor7InitPWMEv+0x102>
	{
		OUTPUT(DD_F4);
     b6a:	e7 e0       	ldi	r30, 0x07	; 7
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	80 81       	ld	r24, Z
     b70:	82 60       	ori	r24, 0x02	; 2
     b72:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
     b74:	80 81       	ld	r24, Z
     b76:	81 60       	ori	r24, 0x01	; 1
     b78:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
     b7a:	e1 e0       	ldi	r30, 0x01	; 1
     b7c:	f1 e0       	ldi	r31, 0x01	; 1
     b7e:	80 81       	ld	r24, Z
     b80:	88 60       	ori	r24, 0x08	; 8
     b82:	80 83       	st	Z, r24

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
     b84:	e0 ea       	ldi	r30, 0xA0	; 160
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	82 68       	ori	r24, 0x82	; 130
     b8c:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
     b8e:	e1 ea       	ldi	r30, 0xA1	; 161
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	8a 61       	ori	r24, 0x1A	; 26
     b96:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
     b98:	89 ef       	ldi	r24, 0xF9	; 249
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	90 93 a7 00 	sts	0x00A7, r25
     ba0:	80 93 a6 00 	sts	0x00A6, r24
     ba4:	08 95       	ret

00000ba6 <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
     ba6:	fc 01       	movw	r30, r24
     ba8:	80 81       	ld	r24, Z
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	91 f0       	breq	.+36     	; 0xbd2 <_ZN5Motor19SetForwardDirectionEv+0x2c>
     bae:	18 f4       	brcc	.+6      	; 0xbb6 <_ZN5Motor19SetForwardDirectionEv+0x10>
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	31 f0       	breq	.+12     	; 0xbc0 <_ZN5Motor19SetForwardDirectionEv+0x1a>
     bb4:	08 95       	ret
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	a9 f0       	breq	.+42     	; 0xbe4 <_ZN5Motor19SetForwardDirectionEv+0x3e>
     bba:	84 30       	cpi	r24, 0x04	; 4
     bbc:	e1 f0       	breq	.+56     	; 0xbf6 <_ZN5Motor19SetForwardDirectionEv+0x50>
     bbe:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
     bc0:	e8 e0       	ldi	r30, 0x08	; 8
     bc2:	f1 e0       	ldi	r31, 0x01	; 1
     bc4:	80 81       	ld	r24, Z
     bc6:	80 64       	ori	r24, 0x40	; 64
     bc8:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     bca:	80 81       	ld	r24, Z
     bcc:	8f 77       	andi	r24, 0x7F	; 127
     bce:	80 83       	st	Z, r24
			break;
     bd0:	08 95       	ret
		case 2:
			SET		(DD_F2);
     bd2:	e8 e0       	ldi	r30, 0x08	; 8
     bd4:	f1 e0       	ldi	r31, 0x01	; 1
     bd6:	80 81       	ld	r24, Z
     bd8:	88 60       	ori	r24, 0x08	; 8
     bda:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     bdc:	80 81       	ld	r24, Z
     bde:	8b 7f       	andi	r24, 0xFB	; 251
     be0:	80 83       	st	Z, r24
			break;
     be2:	08 95       	ret
		case 3:
			SET		(DD_F3);
     be4:	e8 e0       	ldi	r30, 0x08	; 8
     be6:	f1 e0       	ldi	r31, 0x01	; 1
     be8:	80 81       	ld	r24, Z
     bea:	80 61       	ori	r24, 0x10	; 16
     bec:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     bee:	80 81       	ld	r24, Z
     bf0:	8f 7d       	andi	r24, 0xDF	; 223
     bf2:	80 83       	st	Z, r24
			break;
     bf4:	08 95       	ret
		case 4:
			SET		(DD_F4);
     bf6:	e8 e0       	ldi	r30, 0x08	; 8
     bf8:	f1 e0       	ldi	r31, 0x01	; 1
     bfa:	80 81       	ld	r24, Z
     bfc:	82 60       	ori	r24, 0x02	; 2
     bfe:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     c00:	80 81       	ld	r24, Z
     c02:	8e 7f       	andi	r24, 0xFE	; 254
     c04:	80 83       	st	Z, r24
     c06:	08 95       	ret

00000c08 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
     c08:	fc 01       	movw	r30, r24
     c0a:	80 81       	ld	r24, Z
     c0c:	82 30       	cpi	r24, 0x02	; 2
     c0e:	91 f0       	breq	.+36     	; 0xc34 <_ZN5Motor19SetReverseDirectionEv+0x2c>
     c10:	18 f4       	brcc	.+6      	; 0xc18 <_ZN5Motor19SetReverseDirectionEv+0x10>
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	31 f0       	breq	.+12     	; 0xc22 <_ZN5Motor19SetReverseDirectionEv+0x1a>
     c16:	08 95       	ret
     c18:	83 30       	cpi	r24, 0x03	; 3
     c1a:	a9 f0       	breq	.+42     	; 0xc46 <_ZN5Motor19SetReverseDirectionEv+0x3e>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	e1 f0       	breq	.+56     	; 0xc58 <_ZN5Motor19SetReverseDirectionEv+0x50>
     c20:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     c22:	e8 e0       	ldi	r30, 0x08	; 8
     c24:	f1 e0       	ldi	r31, 0x01	; 1
     c26:	80 81       	ld	r24, Z
     c28:	8f 7b       	andi	r24, 0xBF	; 191
     c2a:	80 83       	st	Z, r24
			SET		(DD_B1);
     c2c:	80 81       	ld	r24, Z
     c2e:	80 68       	ori	r24, 0x80	; 128
     c30:	80 83       	st	Z, r24
			break;
     c32:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     c34:	e8 e0       	ldi	r30, 0x08	; 8
     c36:	f1 e0       	ldi	r31, 0x01	; 1
     c38:	80 81       	ld	r24, Z
     c3a:	87 7f       	andi	r24, 0xF7	; 247
     c3c:	80 83       	st	Z, r24
			SET		(DD_B2);
     c3e:	80 81       	ld	r24, Z
     c40:	84 60       	ori	r24, 0x04	; 4
     c42:	80 83       	st	Z, r24
			break;
     c44:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     c46:	e8 e0       	ldi	r30, 0x08	; 8
     c48:	f1 e0       	ldi	r31, 0x01	; 1
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 7e       	andi	r24, 0xEF	; 239
     c4e:	80 83       	st	Z, r24
			SET		(DD_B3);
     c50:	80 81       	ld	r24, Z
     c52:	80 62       	ori	r24, 0x20	; 32
     c54:	80 83       	st	Z, r24
			break;
     c56:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     c58:	e8 e0       	ldi	r30, 0x08	; 8
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	80 81       	ld	r24, Z
     c5e:	8d 7f       	andi	r24, 0xFD	; 253
     c60:	80 83       	st	Z, r24
			SET		(DD_B4);
     c62:	80 81       	ld	r24, Z
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	80 83       	st	Z, r24
     c68:	08 95       	ret

00000c6a <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	b1 f0       	breq	.+44     	; 0xc9e <_ZN5Motor9StopMotorEv+0x34>
     c72:	18 f4       	brcc	.+6      	; 0xc7a <_ZN5Motor9StopMotorEv+0x10>
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	31 f0       	breq	.+12     	; 0xc84 <_ZN5Motor9StopMotorEv+0x1a>
     c78:	08 95       	ret
     c7a:	83 30       	cpi	r24, 0x03	; 3
     c7c:	e9 f0       	breq	.+58     	; 0xcb8 <_ZN5Motor9StopMotorEv+0x4e>
     c7e:	84 30       	cpi	r24, 0x04	; 4
     c80:	41 f1       	breq	.+80     	; 0xcd2 <_ZN5Motor9StopMotorEv+0x68>
     c82:	08 95       	ret
	{
		case 1:
			SET	(DD_F1);
     c84:	e8 e0       	ldi	r30, 0x08	; 8
     c86:	f1 e0       	ldi	r31, 0x01	; 1
     c88:	80 81       	ld	r24, Z
     c8a:	80 64       	ori	r24, 0x40	; 64
     c8c:	80 83       	st	Z, r24
			SET	(DD_B1);
     c8e:	80 81       	ld	r24, Z
     c90:	80 68       	ori	r24, 0x80	; 128
     c92:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
     c94:	10 92 2d 01 	sts	0x012D, r1
     c98:	10 92 2c 01 	sts	0x012C, r1
			break;
     c9c:	08 95       	ret
		case 2:
			SET	(DD_F2);
     c9e:	e8 e0       	ldi	r30, 0x08	; 8
     ca0:	f1 e0       	ldi	r31, 0x01	; 1
     ca2:	80 81       	ld	r24, Z
     ca4:	88 60       	ori	r24, 0x08	; 8
     ca6:	80 83       	st	Z, r24
			SET	(DD_B2);
     ca8:	80 81       	ld	r24, Z
     caa:	84 60       	ori	r24, 0x04	; 4
     cac:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
     cae:	10 92 29 01 	sts	0x0129, r1
     cb2:	10 92 28 01 	sts	0x0128, r1
			break;
     cb6:	08 95       	ret
		case 3:
			SET	(DD_F3);
     cb8:	e8 e0       	ldi	r30, 0x08	; 8
     cba:	f1 e0       	ldi	r31, 0x01	; 1
     cbc:	80 81       	ld	r24, Z
     cbe:	80 61       	ori	r24, 0x10	; 16
     cc0:	80 83       	st	Z, r24
			SET	(DD_B3);
     cc2:	80 81       	ld	r24, Z
     cc4:	80 62       	ori	r24, 0x20	; 32
     cc6:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
     cc8:	10 92 2b 01 	sts	0x012B, r1
     ccc:	10 92 2a 01 	sts	0x012A, r1
			break;
     cd0:	08 95       	ret
		case 4:
			SET	(DD_F4);
     cd2:	e8 e0       	ldi	r30, 0x08	; 8
     cd4:	f1 e0       	ldi	r31, 0x01	; 1
     cd6:	80 81       	ld	r24, Z
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	80 83       	st	Z, r24
			SET	(DD_B4);
     cdc:	80 81       	ld	r24, Z
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
     ce2:	10 92 a9 00 	sts	0x00A9, r1
     ce6:	10 92 a8 00 	sts	0x00A8, r1
     cea:	08 95       	ret

00000cec <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	8c 01       	movw	r16, r24
     cf6:	eb 01       	movw	r28, r22
    if (Ocr > 0)
     cf8:	1c 16       	cp	r1, r28
     cfa:	1d 06       	cpc	r1, r29
     cfc:	0c f4       	brge	.+2      	; 0xd00 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
     cfe:	53 df       	rcall	.-346    	; 0xba6 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
     d00:	c9 3f       	cpi	r28, 0xF9	; 249
     d02:	d1 05       	cpc	r29, r1
     d04:	44 f4       	brge	.+16     	; 0xd16 <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
	if( Ocr < 0)
     d06:	dd 23       	and	r29, r29
     d08:	44 f4       	brge	.+16     	; 0xd1a <_ZN5Motor11SetOcrValueEi+0x2e>
	{
        Ocr = -Ocr;
     d0a:	d1 95       	neg	r29
     d0c:	c1 95       	neg	r28
     d0e:	d1 09       	sbc	r29, r1
        SetReverseDirection();
     d10:	c8 01       	movw	r24, r16
     d12:	7a df       	rcall	.-268    	; 0xc08 <_ZN5Motor19SetReverseDirectionEv>
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <_ZN5Motor11SetOcrValueEi+0x2e>
void Motor::SetOcrValue(int Ocr)
{
    if (Ocr > 0)
        SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
     d16:	c9 ef       	ldi	r28, 0xF9	; 249
     d18:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0)
	{
        Ocr = -Ocr;
        SetReverseDirection();
	}
	switch(num)
     d1a:	f8 01       	movw	r30, r16
     d1c:	80 81       	ld	r24, Z
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	71 f0       	breq	.+28     	; 0xd3e <_ZN5Motor11SetOcrValueEi+0x52>
     d22:	18 f4       	brcc	.+6      	; 0xd2a <_ZN5Motor11SetOcrValueEi+0x3e>
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	31 f0       	breq	.+12     	; 0xd34 <_ZN5Motor11SetOcrValueEi+0x48>
     d28:	18 c0       	rjmp	.+48     	; 0xd5a <_ZN5Motor11SetOcrValueEi+0x6e>
     d2a:	83 30       	cpi	r24, 0x03	; 3
     d2c:	69 f0       	breq	.+26     	; 0xd48 <_ZN5Motor11SetOcrValueEi+0x5c>
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	81 f0       	breq	.+32     	; 0xd52 <_ZN5Motor11SetOcrValueEi+0x66>
     d32:	13 c0       	rjmp	.+38     	; 0xd5a <_ZN5Motor11SetOcrValueEi+0x6e>
	{
		case 1:
			PWM_OCR1	= Ocr;
     d34:	d0 93 2d 01 	sts	0x012D, r29
     d38:	c0 93 2c 01 	sts	0x012C, r28
			break;
     d3c:	0e c0       	rjmp	.+28     	; 0xd5a <_ZN5Motor11SetOcrValueEi+0x6e>
		case 2:
			PWM_OCR2	= Ocr;
     d3e:	d0 93 29 01 	sts	0x0129, r29
     d42:	c0 93 28 01 	sts	0x0128, r28
			break;
     d46:	09 c0       	rjmp	.+18     	; 0xd5a <_ZN5Motor11SetOcrValueEi+0x6e>
		case 3:
			PWM_OCR3	= Ocr;
     d48:	d0 93 2b 01 	sts	0x012B, r29
     d4c:	c0 93 2a 01 	sts	0x012A, r28
			break;
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <_ZN5Motor11SetOcrValueEi+0x6e>
		case 4:
			PWM_OCR4	= Ocr;
     d52:	d0 93 a9 00 	sts	0x00A9, r29
     d56:	c0 93 a8 00 	sts	0x00A8, r28
			break;
	}
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <__vector_15>:

/*************************************************************************	
  Interrupt Service Routine for timer overflow for I2C timeout
*************************************************************************/
ISR(TIMER2_OVF_vect)
{
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1
     d6e:	8f 93       	push	r24
	_Timer_overflow_count = (_Timer_overflow_count == 3)	?	0	: (_Timer_overflow_count+1);
     d70:	80 91 91 02 	lds	r24, 0x0291
     d74:	83 30       	cpi	r24, 0x03	; 3
     d76:	21 f0       	breq	.+8      	; 0xd80 <__vector_15+0x1c>
     d78:	80 91 91 02 	lds	r24, 0x0291
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <__vector_15+0x1e>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	80 93 91 02 	sts	0x0291, r24
	if (_Timer_overflow_count	==	3)
     d86:	80 91 91 02 	lds	r24, 0x0291
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	19 f4       	brne	.+6      	; 0xd94 <__vector_15+0x30>
	{
		_Flag_Timer_overflow = true;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	80 93 90 02 	sts	0x0290, r24
	}
     d94:	8f 91       	pop	r24
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
     da0:	10 92 c5 00 	sts	0x00C5, r1
     da4:	87 e6       	ldi	r24, 0x67	; 103
     da6:	80 93 c4 00 	sts	0x00C4, r24
     daa:	88 e9       	ldi	r24, 0x98	; 152
     dac:	80 93 c1 00 	sts	0x00C1, r24
     db0:	86 e0       	ldi	r24, 0x06	; 6
     db2:	80 93 c2 00 	sts	0x00C2, r24
     db6:	08 95       	ret

00000db8 <_Z9initUART2v>:
     db8:	10 92 93 02 	sts	0x0293, r1
     dbc:	e4 e9       	ldi	r30, 0x94	; 148
     dbe:	f2 e0       	ldi	r31, 0x02	; 2
     dc0:	10 82       	st	Z, r1
     dc2:	11 82       	std	Z+1, r1	; 0x01
     dc4:	12 82       	std	Z+2, r1	; 0x02
     dc6:	13 82       	std	Z+3, r1	; 0x03
     dc8:	10 92 d5 00 	sts	0x00D5, r1
     dcc:	89 e1       	ldi	r24, 0x19	; 25
     dce:	80 93 d4 00 	sts	0x00D4, r24
     dd2:	88 e9       	ldi	r24, 0x98	; 152
     dd4:	80 93 d1 00 	sts	0x00D1, r24
     dd8:	86 e0       	ldi	r24, 0x06	; 6
     dda:	80 93 d2 00 	sts	0x00D2, r24
     dde:	08 95       	ret

00000de0 <_Z9initUART3v>:
     de0:	10 92 35 01 	sts	0x0135, r1
     de4:	87 e6       	ldi	r24, 0x67	; 103
     de6:	80 93 34 01 	sts	0x0134, r24
     dea:	88 e9       	ldi	r24, 0x98	; 152
     dec:	80 93 31 01 	sts	0x0131, r24
     df0:	86 e0       	ldi	r24, 0x06	; 6
     df2:	80 93 32 01 	sts	0x0132, r24
     df6:	08 95       	ret

00000df8 <__vector_25>:

ISR(USART0_RX_vect)
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	0b b6       	in	r0, 0x3b	; 59
     e04:	0f 92       	push	r0
     e06:	8f 93       	push	r24
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
	

	buffer=UDR0;
     e0c:	e6 ec       	ldi	r30, 0xC6	; 198
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 93 9b 02 	sts	0x029B, r24
	UDR0 = 0;
     e16:	10 82       	st	Z, r1
}
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	8f 91       	pop	r24
     e1e:	0f 90       	pop	r0
     e20:	0b be       	out	0x3b, r0	; 59
     e22:	0f 90       	pop	r0
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	0f 90       	pop	r0
     e28:	1f 90       	pop	r1
     e2a:	18 95       	reti

00000e2c <__vector_36>:

ISR(USART1_RX_vect)
{
     e2c:	1f 92       	push	r1
     e2e:	0f 92       	push	r0
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	0f 92       	push	r0
     e34:	11 24       	eor	r1, r1
     e36:	8f 93       	push	r24
	buffer1=UDR1;
     e38:	80 91 ce 00 	lds	r24, 0x00CE
     e3c:	80 93 9a 02 	sts	0x029A, r24
	
}
     e40:	8f 91       	pop	r24
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	0f 90       	pop	r0
     e48:	1f 90       	pop	r1
     e4a:	18 95       	reti

00000e4c <__vector_51>:

ISR(USART2_RX_vect)
{
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	0b b6       	in	r0, 0x3b	; 59
     e58:	0f 92       	push	r0
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
	buffer2=UDR2;
     e62:	90 91 d6 00 	lds	r25, 0x00D6
     e66:	90 93 98 02 	sts	0x0298, r25
		if(rcvflag)
     e6a:	80 91 92 02 	lds	r24, 0x0292
     e6e:	88 23       	and	r24, r24
     e70:	89 f0       	breq	.+34     	; 0xe94 <__vector_51+0x48>
		{
			rcvdata[datacount] = buffer2;
     e72:	80 91 93 02 	lds	r24, 0x0293
     e76:	e8 2f       	mov	r30, r24
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	ec 56       	subi	r30, 0x6C	; 108
     e7c:	fd 4f       	sbci	r31, 0xFD	; 253
     e7e:	90 83       	st	Z, r25
			datacount++;
     e80:	8f 5f       	subi	r24, 0xFF	; 255
			if(datacount>3)
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	18 f4       	brcc	.+6      	; 0xe8c <__vector_51+0x40>
{
	buffer2=UDR2;
		if(rcvflag)
		{
			rcvdata[datacount] = buffer2;
			datacount++;
     e86:	80 93 93 02 	sts	0x0293, r24
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <__vector_51+0x48>
			if(datacount>3)
			{
				 datacount=0;
     e8c:	10 92 93 02 	sts	0x0293, r1
				rcvflag = false; 
     e90:	10 92 92 02 	sts	0x0292, r1
			}
		}
		if(buffer2==START_BYTE)
     e94:	80 91 98 02 	lds	r24, 0x0298
     e98:	8f 37       	cpi	r24, 0x7F	; 127
     e9a:	19 f4       	brne	.+6      	; 0xea2 <__vector_51+0x56>
			rcvflag=true;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 92 02 	sts	0x0292, r24
		
}
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	0f 90       	pop	r0
     eac:	0b be       	out	0x3b, r0	; 59
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	0f 90       	pop	r0
     eb4:	1f 90       	pop	r1
     eb6:	18 95       	reti

00000eb8 <__vector_54>:


ISR(USART3_RX_vect)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	0b b6       	in	r0, 0x3b	; 59
     ec4:	0f 92       	push	r0
     ec6:	8f 93       	push	r24
     ec8:	ef 93       	push	r30
     eca:	ff 93       	push	r31
	buffer3=UDR3;
     ecc:	e6 e3       	ldi	r30, 0x36	; 54
     ece:	f1 e0       	ldi	r31, 0x01	; 1
     ed0:	80 81       	ld	r24, Z
     ed2:	80 93 99 02 	sts	0x0299, r24
	UDR3 = 0;
     ed6:	10 82       	st	Z, r1
	
}
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	8f 91       	pop	r24
     ede:	0f 90       	pop	r0
     ee0:	0b be       	out	0x3b, r0	; 59
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <__subsf3>:
     eec:	50 58       	subi	r21, 0x80	; 128

00000eee <__addsf3>:
     eee:	bb 27       	eor	r27, r27
     ef0:	aa 27       	eor	r26, r26
     ef2:	0e d0       	rcall	.+28     	; 0xf10 <__addsf3x>
     ef4:	e5 c0       	rjmp	.+458    	; 0x10c0 <__fp_round>
     ef6:	d6 d0       	rcall	.+428    	; 0x10a4 <__fp_pscA>
     ef8:	30 f0       	brcs	.+12     	; 0xf06 <__addsf3+0x18>
     efa:	db d0       	rcall	.+438    	; 0x10b2 <__fp_pscB>
     efc:	20 f0       	brcs	.+8      	; 0xf06 <__addsf3+0x18>
     efe:	31 f4       	brne	.+12     	; 0xf0c <__addsf3+0x1e>
     f00:	9f 3f       	cpi	r25, 0xFF	; 255
     f02:	11 f4       	brne	.+4      	; 0xf08 <__addsf3+0x1a>
     f04:	1e f4       	brtc	.+6      	; 0xf0c <__addsf3+0x1e>
     f06:	cb c0       	rjmp	.+406    	; 0x109e <__fp_nan>
     f08:	0e f4       	brtc	.+2      	; 0xf0c <__addsf3+0x1e>
     f0a:	e0 95       	com	r30
     f0c:	e7 fb       	bst	r30, 7
     f0e:	c1 c0       	rjmp	.+386    	; 0x1092 <__fp_inf>

00000f10 <__addsf3x>:
     f10:	e9 2f       	mov	r30, r25
     f12:	e7 d0       	rcall	.+462    	; 0x10e2 <__fp_split3>
     f14:	80 f3       	brcs	.-32     	; 0xef6 <__addsf3+0x8>
     f16:	ba 17       	cp	r27, r26
     f18:	62 07       	cpc	r22, r18
     f1a:	73 07       	cpc	r23, r19
     f1c:	84 07       	cpc	r24, r20
     f1e:	95 07       	cpc	r25, r21
     f20:	18 f0       	brcs	.+6      	; 0xf28 <__addsf3x+0x18>
     f22:	71 f4       	brne	.+28     	; 0xf40 <__addsf3x+0x30>
     f24:	9e f5       	brtc	.+102    	; 0xf8c <__addsf3x+0x7c>
     f26:	ff c0       	rjmp	.+510    	; 0x1126 <__fp_zero>
     f28:	0e f4       	brtc	.+2      	; 0xf2c <__addsf3x+0x1c>
     f2a:	e0 95       	com	r30
     f2c:	0b 2e       	mov	r0, r27
     f2e:	ba 2f       	mov	r27, r26
     f30:	a0 2d       	mov	r26, r0
     f32:	0b 01       	movw	r0, r22
     f34:	b9 01       	movw	r22, r18
     f36:	90 01       	movw	r18, r0
     f38:	0c 01       	movw	r0, r24
     f3a:	ca 01       	movw	r24, r20
     f3c:	a0 01       	movw	r20, r0
     f3e:	11 24       	eor	r1, r1
     f40:	ff 27       	eor	r31, r31
     f42:	59 1b       	sub	r21, r25
     f44:	99 f0       	breq	.+38     	; 0xf6c <__addsf3x+0x5c>
     f46:	59 3f       	cpi	r21, 0xF9	; 249
     f48:	50 f4       	brcc	.+20     	; 0xf5e <__addsf3x+0x4e>
     f4a:	50 3e       	cpi	r21, 0xE0	; 224
     f4c:	68 f1       	brcs	.+90     	; 0xfa8 <__addsf3x+0x98>
     f4e:	1a 16       	cp	r1, r26
     f50:	f0 40       	sbci	r31, 0x00	; 0
     f52:	a2 2f       	mov	r26, r18
     f54:	23 2f       	mov	r18, r19
     f56:	34 2f       	mov	r19, r20
     f58:	44 27       	eor	r20, r20
     f5a:	58 5f       	subi	r21, 0xF8	; 248
     f5c:	f3 cf       	rjmp	.-26     	; 0xf44 <__addsf3x+0x34>
     f5e:	46 95       	lsr	r20
     f60:	37 95       	ror	r19
     f62:	27 95       	ror	r18
     f64:	a7 95       	ror	r26
     f66:	f0 40       	sbci	r31, 0x00	; 0
     f68:	53 95       	inc	r21
     f6a:	c9 f7       	brne	.-14     	; 0xf5e <__addsf3x+0x4e>
     f6c:	7e f4       	brtc	.+30     	; 0xf8c <__addsf3x+0x7c>
     f6e:	1f 16       	cp	r1, r31
     f70:	ba 0b       	sbc	r27, r26
     f72:	62 0b       	sbc	r22, r18
     f74:	73 0b       	sbc	r23, r19
     f76:	84 0b       	sbc	r24, r20
     f78:	ba f0       	brmi	.+46     	; 0xfa8 <__addsf3x+0x98>
     f7a:	91 50       	subi	r25, 0x01	; 1
     f7c:	a1 f0       	breq	.+40     	; 0xfa6 <__addsf3x+0x96>
     f7e:	ff 0f       	add	r31, r31
     f80:	bb 1f       	adc	r27, r27
     f82:	66 1f       	adc	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	c2 f7       	brpl	.-16     	; 0xf7a <__addsf3x+0x6a>
     f8a:	0e c0       	rjmp	.+28     	; 0xfa8 <__addsf3x+0x98>
     f8c:	ba 0f       	add	r27, r26
     f8e:	62 1f       	adc	r22, r18
     f90:	73 1f       	adc	r23, r19
     f92:	84 1f       	adc	r24, r20
     f94:	48 f4       	brcc	.+18     	; 0xfa8 <__addsf3x+0x98>
     f96:	87 95       	ror	r24
     f98:	77 95       	ror	r23
     f9a:	67 95       	ror	r22
     f9c:	b7 95       	ror	r27
     f9e:	f7 95       	ror	r31
     fa0:	9e 3f       	cpi	r25, 0xFE	; 254
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <__addsf3x+0x96>
     fa4:	b3 cf       	rjmp	.-154    	; 0xf0c <__addsf3+0x1e>
     fa6:	93 95       	inc	r25
     fa8:	88 0f       	add	r24, r24
     faa:	08 f0       	brcs	.+2      	; 0xfae <__addsf3x+0x9e>
     fac:	99 27       	eor	r25, r25
     fae:	ee 0f       	add	r30, r30
     fb0:	97 95       	ror	r25
     fb2:	87 95       	ror	r24
     fb4:	08 95       	ret

00000fb6 <__fixsfsi>:
     fb6:	04 d0       	rcall	.+8      	; 0xfc0 <__fixunssfsi>
     fb8:	68 94       	set
     fba:	b1 11       	cpse	r27, r1
     fbc:	b5 c0       	rjmp	.+362    	; 0x1128 <__fp_szero>
     fbe:	08 95       	ret

00000fc0 <__fixunssfsi>:
     fc0:	98 d0       	rcall	.+304    	; 0x10f2 <__fp_splitA>
     fc2:	88 f0       	brcs	.+34     	; 0xfe6 <__fixunssfsi+0x26>
     fc4:	9f 57       	subi	r25, 0x7F	; 127
     fc6:	90 f0       	brcs	.+36     	; 0xfec <__fixunssfsi+0x2c>
     fc8:	b9 2f       	mov	r27, r25
     fca:	99 27       	eor	r25, r25
     fcc:	b7 51       	subi	r27, 0x17	; 23
     fce:	a0 f0       	brcs	.+40     	; 0xff8 <__fixunssfsi+0x38>
     fd0:	d1 f0       	breq	.+52     	; 0x1006 <__fixunssfsi+0x46>
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	1a f0       	brmi	.+6      	; 0xfe2 <__fixunssfsi+0x22>
     fdc:	ba 95       	dec	r27
     fde:	c9 f7       	brne	.-14     	; 0xfd2 <__fixunssfsi+0x12>
     fe0:	12 c0       	rjmp	.+36     	; 0x1006 <__fixunssfsi+0x46>
     fe2:	b1 30       	cpi	r27, 0x01	; 1
     fe4:	81 f0       	breq	.+32     	; 0x1006 <__fixunssfsi+0x46>
     fe6:	9f d0       	rcall	.+318    	; 0x1126 <__fp_zero>
     fe8:	b1 e0       	ldi	r27, 0x01	; 1
     fea:	08 95       	ret
     fec:	9c c0       	rjmp	.+312    	; 0x1126 <__fp_zero>
     fee:	67 2f       	mov	r22, r23
     ff0:	78 2f       	mov	r23, r24
     ff2:	88 27       	eor	r24, r24
     ff4:	b8 5f       	subi	r27, 0xF8	; 248
     ff6:	39 f0       	breq	.+14     	; 0x1006 <__fixunssfsi+0x46>
     ff8:	b9 3f       	cpi	r27, 0xF9	; 249
     ffa:	cc f3       	brlt	.-14     	; 0xfee <__fixunssfsi+0x2e>
     ffc:	86 95       	lsr	r24
     ffe:	77 95       	ror	r23
    1000:	67 95       	ror	r22
    1002:	b3 95       	inc	r27
    1004:	d9 f7       	brne	.-10     	; 0xffc <__fixunssfsi+0x3c>
    1006:	3e f4       	brtc	.+14     	; 0x1016 <__fixunssfsi+0x56>
    1008:	90 95       	com	r25
    100a:	80 95       	com	r24
    100c:	70 95       	com	r23
    100e:	61 95       	neg	r22
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	8f 4f       	sbci	r24, 0xFF	; 255
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	08 95       	ret

00001018 <__floatunsisf>:
    1018:	e8 94       	clt
    101a:	09 c0       	rjmp	.+18     	; 0x102e <__floatsisf+0x12>

0000101c <__floatsisf>:
    101c:	97 fb       	bst	r25, 7
    101e:	3e f4       	brtc	.+14     	; 0x102e <__floatsisf+0x12>
    1020:	90 95       	com	r25
    1022:	80 95       	com	r24
    1024:	70 95       	com	r23
    1026:	61 95       	neg	r22
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	8f 4f       	sbci	r24, 0xFF	; 255
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	99 23       	and	r25, r25
    1030:	a9 f0       	breq	.+42     	; 0x105c <__floatsisf+0x40>
    1032:	f9 2f       	mov	r31, r25
    1034:	96 e9       	ldi	r25, 0x96	; 150
    1036:	bb 27       	eor	r27, r27
    1038:	93 95       	inc	r25
    103a:	f6 95       	lsr	r31
    103c:	87 95       	ror	r24
    103e:	77 95       	ror	r23
    1040:	67 95       	ror	r22
    1042:	b7 95       	ror	r27
    1044:	f1 11       	cpse	r31, r1
    1046:	f8 cf       	rjmp	.-16     	; 0x1038 <__floatsisf+0x1c>
    1048:	fa f4       	brpl	.+62     	; 0x1088 <__floatsisf+0x6c>
    104a:	bb 0f       	add	r27, r27
    104c:	11 f4       	brne	.+4      	; 0x1052 <__floatsisf+0x36>
    104e:	60 ff       	sbrs	r22, 0
    1050:	1b c0       	rjmp	.+54     	; 0x1088 <__floatsisf+0x6c>
    1052:	6f 5f       	subi	r22, 0xFF	; 255
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	8f 4f       	sbci	r24, 0xFF	; 255
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	16 c0       	rjmp	.+44     	; 0x1088 <__floatsisf+0x6c>
    105c:	88 23       	and	r24, r24
    105e:	11 f0       	breq	.+4      	; 0x1064 <__floatsisf+0x48>
    1060:	96 e9       	ldi	r25, 0x96	; 150
    1062:	11 c0       	rjmp	.+34     	; 0x1086 <__floatsisf+0x6a>
    1064:	77 23       	and	r23, r23
    1066:	21 f0       	breq	.+8      	; 0x1070 <__floatsisf+0x54>
    1068:	9e e8       	ldi	r25, 0x8E	; 142
    106a:	87 2f       	mov	r24, r23
    106c:	76 2f       	mov	r23, r22
    106e:	05 c0       	rjmp	.+10     	; 0x107a <__floatsisf+0x5e>
    1070:	66 23       	and	r22, r22
    1072:	71 f0       	breq	.+28     	; 0x1090 <__floatsisf+0x74>
    1074:	96 e8       	ldi	r25, 0x86	; 134
    1076:	86 2f       	mov	r24, r22
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	2a f0       	brmi	.+10     	; 0x1088 <__floatsisf+0x6c>
    107e:	9a 95       	dec	r25
    1080:	66 0f       	add	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	da f7       	brpl	.-10     	; 0x107e <__floatsisf+0x62>
    1088:	88 0f       	add	r24, r24
    108a:	96 95       	lsr	r25
    108c:	87 95       	ror	r24
    108e:	97 f9       	bld	r25, 7
    1090:	08 95       	ret

00001092 <__fp_inf>:
    1092:	97 f9       	bld	r25, 7
    1094:	9f 67       	ori	r25, 0x7F	; 127
    1096:	80 e8       	ldi	r24, 0x80	; 128
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	08 95       	ret

0000109e <__fp_nan>:
    109e:	9f ef       	ldi	r25, 0xFF	; 255
    10a0:	80 ec       	ldi	r24, 0xC0	; 192
    10a2:	08 95       	ret

000010a4 <__fp_pscA>:
    10a4:	00 24       	eor	r0, r0
    10a6:	0a 94       	dec	r0
    10a8:	16 16       	cp	r1, r22
    10aa:	17 06       	cpc	r1, r23
    10ac:	18 06       	cpc	r1, r24
    10ae:	09 06       	cpc	r0, r25
    10b0:	08 95       	ret

000010b2 <__fp_pscB>:
    10b2:	00 24       	eor	r0, r0
    10b4:	0a 94       	dec	r0
    10b6:	12 16       	cp	r1, r18
    10b8:	13 06       	cpc	r1, r19
    10ba:	14 06       	cpc	r1, r20
    10bc:	05 06       	cpc	r0, r21
    10be:	08 95       	ret

000010c0 <__fp_round>:
    10c0:	09 2e       	mov	r0, r25
    10c2:	03 94       	inc	r0
    10c4:	00 0c       	add	r0, r0
    10c6:	11 f4       	brne	.+4      	; 0x10cc <__fp_round+0xc>
    10c8:	88 23       	and	r24, r24
    10ca:	52 f0       	brmi	.+20     	; 0x10e0 <__fp_round+0x20>
    10cc:	bb 0f       	add	r27, r27
    10ce:	40 f4       	brcc	.+16     	; 0x10e0 <__fp_round+0x20>
    10d0:	bf 2b       	or	r27, r31
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <__fp_round+0x18>
    10d4:	60 ff       	sbrs	r22, 0
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <__fp_round+0x20>
    10d8:	6f 5f       	subi	r22, 0xFF	; 255
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	8f 4f       	sbci	r24, 0xFF	; 255
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	08 95       	ret

000010e2 <__fp_split3>:
    10e2:	57 fd       	sbrc	r21, 7
    10e4:	90 58       	subi	r25, 0x80	; 128
    10e6:	44 0f       	add	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	59 f0       	breq	.+22     	; 0x1102 <__fp_splitA+0x10>
    10ec:	5f 3f       	cpi	r21, 0xFF	; 255
    10ee:	71 f0       	breq	.+28     	; 0x110c <__fp_splitA+0x1a>
    10f0:	47 95       	ror	r20

000010f2 <__fp_splitA>:
    10f2:	88 0f       	add	r24, r24
    10f4:	97 fb       	bst	r25, 7
    10f6:	99 1f       	adc	r25, r25
    10f8:	61 f0       	breq	.+24     	; 0x1112 <__fp_splitA+0x20>
    10fa:	9f 3f       	cpi	r25, 0xFF	; 255
    10fc:	79 f0       	breq	.+30     	; 0x111c <__fp_splitA+0x2a>
    10fe:	87 95       	ror	r24
    1100:	08 95       	ret
    1102:	12 16       	cp	r1, r18
    1104:	13 06       	cpc	r1, r19
    1106:	14 06       	cpc	r1, r20
    1108:	55 1f       	adc	r21, r21
    110a:	f2 cf       	rjmp	.-28     	; 0x10f0 <__fp_split3+0xe>
    110c:	46 95       	lsr	r20
    110e:	f1 df       	rcall	.-30     	; 0x10f2 <__fp_splitA>
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <__fp_splitA+0x30>
    1112:	16 16       	cp	r1, r22
    1114:	17 06       	cpc	r1, r23
    1116:	18 06       	cpc	r1, r24
    1118:	99 1f       	adc	r25, r25
    111a:	f1 cf       	rjmp	.-30     	; 0x10fe <__fp_splitA+0xc>
    111c:	86 95       	lsr	r24
    111e:	71 05       	cpc	r23, r1
    1120:	61 05       	cpc	r22, r1
    1122:	08 94       	sec
    1124:	08 95       	ret

00001126 <__fp_zero>:
    1126:	e8 94       	clt

00001128 <__fp_szero>:
    1128:	bb 27       	eor	r27, r27
    112a:	66 27       	eor	r22, r22
    112c:	77 27       	eor	r23, r23
    112e:	cb 01       	movw	r24, r22
    1130:	97 f9       	bld	r25, 7
    1132:	08 95       	ret

00001134 <__mulsf3>:
    1134:	0b d0       	rcall	.+22     	; 0x114c <__mulsf3x>
    1136:	c4 cf       	rjmp	.-120    	; 0x10c0 <__fp_round>
    1138:	b5 df       	rcall	.-150    	; 0x10a4 <__fp_pscA>
    113a:	28 f0       	brcs	.+10     	; 0x1146 <__mulsf3+0x12>
    113c:	ba df       	rcall	.-140    	; 0x10b2 <__fp_pscB>
    113e:	18 f0       	brcs	.+6      	; 0x1146 <__mulsf3+0x12>
    1140:	95 23       	and	r25, r21
    1142:	09 f0       	breq	.+2      	; 0x1146 <__mulsf3+0x12>
    1144:	a6 cf       	rjmp	.-180    	; 0x1092 <__fp_inf>
    1146:	ab cf       	rjmp	.-170    	; 0x109e <__fp_nan>
    1148:	11 24       	eor	r1, r1
    114a:	ee cf       	rjmp	.-36     	; 0x1128 <__fp_szero>

0000114c <__mulsf3x>:
    114c:	ca df       	rcall	.-108    	; 0x10e2 <__fp_split3>
    114e:	a0 f3       	brcs	.-24     	; 0x1138 <__mulsf3+0x4>

00001150 <__mulsf3_pse>:
    1150:	95 9f       	mul	r25, r21
    1152:	d1 f3       	breq	.-12     	; 0x1148 <__mulsf3+0x14>
    1154:	95 0f       	add	r25, r21
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	55 1f       	adc	r21, r21
    115a:	62 9f       	mul	r22, r18
    115c:	f0 01       	movw	r30, r0
    115e:	72 9f       	mul	r23, r18
    1160:	bb 27       	eor	r27, r27
    1162:	f0 0d       	add	r31, r0
    1164:	b1 1d       	adc	r27, r1
    1166:	63 9f       	mul	r22, r19
    1168:	aa 27       	eor	r26, r26
    116a:	f0 0d       	add	r31, r0
    116c:	b1 1d       	adc	r27, r1
    116e:	aa 1f       	adc	r26, r26
    1170:	64 9f       	mul	r22, r20
    1172:	66 27       	eor	r22, r22
    1174:	b0 0d       	add	r27, r0
    1176:	a1 1d       	adc	r26, r1
    1178:	66 1f       	adc	r22, r22
    117a:	82 9f       	mul	r24, r18
    117c:	22 27       	eor	r18, r18
    117e:	b0 0d       	add	r27, r0
    1180:	a1 1d       	adc	r26, r1
    1182:	62 1f       	adc	r22, r18
    1184:	73 9f       	mul	r23, r19
    1186:	b0 0d       	add	r27, r0
    1188:	a1 1d       	adc	r26, r1
    118a:	62 1f       	adc	r22, r18
    118c:	83 9f       	mul	r24, r19
    118e:	a0 0d       	add	r26, r0
    1190:	61 1d       	adc	r22, r1
    1192:	22 1f       	adc	r18, r18
    1194:	74 9f       	mul	r23, r20
    1196:	33 27       	eor	r19, r19
    1198:	a0 0d       	add	r26, r0
    119a:	61 1d       	adc	r22, r1
    119c:	23 1f       	adc	r18, r19
    119e:	84 9f       	mul	r24, r20
    11a0:	60 0d       	add	r22, r0
    11a2:	21 1d       	adc	r18, r1
    11a4:	82 2f       	mov	r24, r18
    11a6:	76 2f       	mov	r23, r22
    11a8:	6a 2f       	mov	r22, r26
    11aa:	11 24       	eor	r1, r1
    11ac:	9f 57       	subi	r25, 0x7F	; 127
    11ae:	50 40       	sbci	r21, 0x00	; 0
    11b0:	8a f0       	brmi	.+34     	; 0x11d4 <__mulsf3_pse+0x84>
    11b2:	e1 f0       	breq	.+56     	; 0x11ec <__mulsf3_pse+0x9c>
    11b4:	88 23       	and	r24, r24
    11b6:	4a f0       	brmi	.+18     	; 0x11ca <__mulsf3_pse+0x7a>
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	bb 1f       	adc	r27, r27
    11be:	66 1f       	adc	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	88 1f       	adc	r24, r24
    11c4:	91 50       	subi	r25, 0x01	; 1
    11c6:	50 40       	sbci	r21, 0x00	; 0
    11c8:	a9 f7       	brne	.-22     	; 0x11b4 <__mulsf3_pse+0x64>
    11ca:	9e 3f       	cpi	r25, 0xFE	; 254
    11cc:	51 05       	cpc	r21, r1
    11ce:	70 f0       	brcs	.+28     	; 0x11ec <__mulsf3_pse+0x9c>
    11d0:	60 cf       	rjmp	.-320    	; 0x1092 <__fp_inf>
    11d2:	aa cf       	rjmp	.-172    	; 0x1128 <__fp_szero>
    11d4:	5f 3f       	cpi	r21, 0xFF	; 255
    11d6:	ec f3       	brlt	.-6      	; 0x11d2 <__mulsf3_pse+0x82>
    11d8:	98 3e       	cpi	r25, 0xE8	; 232
    11da:	dc f3       	brlt	.-10     	; 0x11d2 <__mulsf3_pse+0x82>
    11dc:	86 95       	lsr	r24
    11de:	77 95       	ror	r23
    11e0:	67 95       	ror	r22
    11e2:	b7 95       	ror	r27
    11e4:	f7 95       	ror	r31
    11e6:	e7 95       	ror	r30
    11e8:	9f 5f       	subi	r25, 0xFF	; 255
    11ea:	c1 f7       	brne	.-16     	; 0x11dc <__mulsf3_pse+0x8c>
    11ec:	fe 2b       	or	r31, r30
    11ee:	88 0f       	add	r24, r24
    11f0:	91 1d       	adc	r25, r1
    11f2:	96 95       	lsr	r25
    11f4:	87 95       	ror	r24
    11f6:	97 f9       	bld	r25, 7
    11f8:	08 95       	ret

000011fa <__tablejump2__>:
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	88 1f       	adc	r24, r24
    1200:	8b bf       	out	0x3b, r24	; 59
    1202:	07 90       	elpm	r0, Z+
    1204:	f6 91       	elpm	r31, Z
    1206:	e0 2d       	mov	r30, r0
    1208:	19 94       	eijmp

0000120a <_exit>:
    120a:	f8 94       	cli

0000120c <__stop_program>:
    120c:	ff cf       	rjmp	.-2      	; 0x120c <__stop_program>
