
Automatic Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800200  00001ed2  00001f66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ed2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  00800298  00800298  00001ffe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ffe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004dc1  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001578  00000000  00000000  00007141  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002124  00000000  00000000  000086b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  0000a7e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001aab  00000000  00000000  0000b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000230f  00000000  00000000  0000cda3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000f0b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	86 c0       	rjmp	.+268    	; 0x10e <__ctors_end>
       2:	00 00       	nop
       4:	c8 c0       	rjmp	.+400    	; 0x196 <__vector_1>
       6:	00 00       	nop
       8:	ed c0       	rjmp	.+474    	; 0x1e4 <__vector_2>
       a:	00 00       	nop
       c:	12 c1       	rjmp	.+548    	; 0x232 <__vector_3>
       e:	00 00       	nop
      10:	37 c1       	rjmp	.+622    	; 0x280 <__vector_4>
      12:	00 00       	nop
      14:	5c c1       	rjmp	.+696    	; 0x2ce <__vector_5>
      16:	00 00       	nop
      18:	81 c1       	rjmp	.+770    	; 0x31c <__vector_6>
      1a:	00 00       	nop
      1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
      22:	00 00       	nop
      24:	68 c7       	rjmp	.+3792   	; 0xef6 <__vector_9>
      26:	00 00       	nop
      28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c7       	rjmp	.+3838   	; 0xf2c <__vector_11>
      2e:	00 00       	nop
      30:	9e c0       	rjmp	.+316    	; 0x16e <__bad_interrupt>
      32:	00 00       	nop
      34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
      52:	00 00       	nop
      54:	8c c0       	rjmp	.+280    	; 0x16e <__bad_interrupt>
      56:	00 00       	nop
      58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	86 c1       	rjmp	.+780    	; 0x36a <__vector_23>
      5e:	00 00       	nop
      60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__vector_25>
      68:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_26>
      6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
      92:	00 00       	nop
      94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
      96:	00 00       	nop
      98:	6a c0       	rjmp	.+212    	; 0x16e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	68 c0       	rjmp	.+208    	; 0x16e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	66 c0       	rjmp	.+204    	; 0x16e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	64 c0       	rjmp	.+200    	; 0x16e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	62 c0       	rjmp	.+196    	; 0x16e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	60 c0       	rjmp	.+192    	; 0x16e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5e c0       	rjmp	.+188    	; 0x16e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5c c0       	rjmp	.+184    	; 0x16e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5a c0       	rjmp	.+180    	; 0x16e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	58 c0       	rjmp	.+176    	; 0x16e <__bad_interrupt>
      be:	00 00       	nop
      c0:	56 c0       	rjmp	.+172    	; 0x16e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	54 c0       	rjmp	.+168    	; 0x16e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	52 c0       	rjmp	.+164    	; 0x16e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__vector_51>
      d0:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__vector_52>
      d4:	4c c0       	rjmp	.+152    	; 0x16e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__vector_54>
      dc:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_55>
      e0:	46 c0       	rjmp	.+140    	; 0x16e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	81 08       	sbc	r8, r1
      e6:	45 08       	sbc	r4, r5
      e8:	8a 08       	sbc	r8, r10
      ea:	61 08       	sbc	r6, r1
      ec:	6c 08       	sbc	r6, r12
      ee:	8a 08       	sbc	r8, r10
      f0:	29 08       	sbc	r2, r9
      f2:	8a 08       	sbc	r8, r10
      f4:	8a 08       	sbc	r8, r10
      f6:	8a 08       	sbc	r8, r10
      f8:	8a 08       	sbc	r8, r10
      fa:	8a 08       	sbc	r8, r10
      fc:	1b 08       	sbc	r1, r11
      fe:	0d 08       	sbc	r0, r13
     100:	8a 08       	sbc	r8, r10
     102:	8a 08       	sbc	r8, r10
     104:	53 08       	sbc	r5, r3
     106:	8a 08       	sbc	r8, r10
     108:	37 08       	sbc	r3, r7
     10a:	77 08       	sbc	r7, r7

0000010c <__ctors_start>:
     10c:	de 08       	sbc	r13, r14

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d1 e2       	ldi	r29, 0x21	; 33
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61
     11a:	00 e0       	ldi	r16, 0x00	; 0
     11c:	0c bf       	out	0x3c, r16	; 60

0000011e <__do_copy_data>:
     11e:	12 e0       	ldi	r17, 0x02	; 2
     120:	a0 e0       	ldi	r26, 0x00	; 0
     122:	b2 e0       	ldi	r27, 0x02	; 2
     124:	e2 ed       	ldi	r30, 0xD2	; 210
     126:	fe e1       	ldi	r31, 0x1E	; 30
     128:	00 e0       	ldi	r16, 0x00	; 0
     12a:	0b bf       	out	0x3b, r16	; 59
     12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x14>
     12e:	07 90       	elpm	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	a8 39       	cpi	r26, 0x98	; 152
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0x10>

00000138 <__do_clear_bss>:
     138:	24 e0       	ldi	r18, 0x04	; 4
     13a:	a8 e9       	ldi	r26, 0x98	; 152
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a6 3b       	cpi	r26, 0xB6	; 182
     144:	b2 07       	cpc	r27, r18
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>

00000148 <__do_global_ctors>:
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	c7 e8       	ldi	r28, 0x87	; 135
     14c:	d0 e0       	ldi	r29, 0x00	; 0
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	06 c0       	rjmp	.+12     	; 0x15e <__do_global_ctors+0x16>
     152:	21 97       	sbiw	r28, 0x01	; 1
     154:	01 09       	sbc	r16, r1
     156:	80 2f       	mov	r24, r16
     158:	fe 01       	movw	r30, r28
     15a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <__tablejump2__>
     15e:	c6 38       	cpi	r28, 0x86	; 134
     160:	d1 07       	cpc	r29, r17
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	08 07       	cpc	r16, r24
     166:	a9 f7       	brne	.-22     	; 0x152 <__do_global_ctors+0xa>
     168:	1c d7       	rcall	.+3640   	; 0xfa2 <main>
     16a:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <_exit>

0000016e <__bad_interrupt>:
     16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <_ZN7encoder22Init_encoder_interruptEv>:
}
float encoder::getdistance()
{
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
	return distance;
}
     170:	78 94       	sei
     172:	8f ef       	ldi	r24, 0xFF	; 255
     174:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     178:	8f e0       	ldi	r24, 0x0F	; 15
     17a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     17e:	8d b3       	in	r24, 0x1d	; 29
     180:	8f 63       	ori	r24, 0x3F	; 63
     182:	8d bb       	out	0x1d, r24	; 29
     184:	08 95       	ret

00000186 <_ZN7encoder10Init_timerEv>:
     186:	78 94       	sei
     188:	85 b5       	in	r24, 0x25	; 37
     18a:	85 60       	ori	r24, 0x05	; 5
     18c:	85 bd       	out	0x25, r24	; 37
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     194:	08 95       	ret

00000196 <__vector_1>:

ISR(INT0_vect)	//for x -axis
{
     196:	1f 92       	push	r1
     198:	0f 92       	push	r0
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	0f 92       	push	r0
     19e:	11 24       	eor	r1, r1
     1a0:	0b b6       	in	r0, 0x3b	; 59
     1a2:	0f 92       	push	r0
     1a4:	8f 93       	push	r24
     1a6:	9f 93       	push	r25
     1a8:	ef 93       	push	r30
     1aa:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     1ac:	00 9b       	sbis	0x00, 0	; 0
     1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <__vector_1+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     1b0:	ed ec       	ldi	r30, 0xCD	; 205
     1b2:	f2 e0       	ldi	r31, 0x02	; 2
     1b4:	80 81       	ld	r24, Z
     1b6:	91 81       	ldd	r25, Z+1	; 0x01
     1b8:	01 96       	adiw	r24, 0x01	; 1
     1ba:	91 83       	std	Z+1, r25	; 0x01
     1bc:	80 83       	st	Z, r24
     1be:	07 c0       	rjmp	.+14     	; 0x1ce <__vector_1+0x38>
		inline void dcr_count(){count_encoder--;};
     1c0:	ed ec       	ldi	r30, 0xCD	; 205
     1c2:	f2 e0       	ldi	r31, 0x02	; 2
     1c4:	80 81       	ld	r24, Z
     1c6:	91 81       	ldd	r25, Z+1	; 0x01
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	91 83       	std	Z+1, r25	; 0x01
     1cc:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}	 
     1ce:	ff 91       	pop	r31
     1d0:	ef 91       	pop	r30
     1d2:	9f 91       	pop	r25
     1d4:	8f 91       	pop	r24
     1d6:	0f 90       	pop	r0
     1d8:	0b be       	out	0x3b, r0	; 59
     1da:	0f 90       	pop	r0
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	0f 90       	pop	r0
     1e0:	1f 90       	pop	r1
     1e2:	18 95       	reti

000001e4 <__vector_2>:
ISR(INT1_vect)	//for motor1
{
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	0b b6       	in	r0, 0x3b	; 59
     1f0:	0f 92       	push	r0
     1f2:	8f 93       	push	r24
     1f4:	9f 93       	push	r25
     1f6:	ef 93       	push	r30
     1f8:	ff 93       	push	r31
	if((bit_is_set(PINA,PA1)))
     1fa:	01 9b       	sbis	0x00, 1	; 0
     1fc:	08 c0       	rjmp	.+16     	; 0x20e <__vector_2+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     1fe:	e5 ec       	ldi	r30, 0xC5	; 197
     200:	f2 e0       	ldi	r31, 0x02	; 2
     202:	80 81       	ld	r24, Z
     204:	91 81       	ldd	r25, Z+1	; 0x01
     206:	01 96       	adiw	r24, 0x01	; 1
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	07 c0       	rjmp	.+14     	; 0x21c <__vector_2+0x38>
		inline void dcr_count(){count_encoder--;};
     20e:	e5 ec       	ldi	r30, 0xC5	; 197
     210:	f2 e0       	ldi	r31, 0x02	; 2
     212:	80 81       	ld	r24, Z
     214:	91 81       	ldd	r25, Z+1	; 0x01
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
		e1.inc_count();
	}
	else
	e1.dcr_count();

}
     21c:	ff 91       	pop	r31
     21e:	ef 91       	pop	r30
     220:	9f 91       	pop	r25
     222:	8f 91       	pop	r24
     224:	0f 90       	pop	r0
     226:	0b be       	out	0x3b, r0	; 59
     228:	0f 90       	pop	r0
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	0f 90       	pop	r0
     22e:	1f 90       	pop	r1
     230:	18 95       	reti

00000232 <__vector_3>:
ISR(INT2_vect)	//for motor2
{
     232:	1f 92       	push	r1
     234:	0f 92       	push	r0
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	0f 92       	push	r0
     23a:	11 24       	eor	r1, r1
     23c:	0b b6       	in	r0, 0x3b	; 59
     23e:	0f 92       	push	r0
     240:	8f 93       	push	r24
     242:	9f 93       	push	r25
     244:	ef 93       	push	r30
     246:	ff 93       	push	r31
	if((bit_is_set(PINA,PA2)))
     248:	02 9b       	sbis	0x00, 2	; 0
     24a:	08 c0       	rjmp	.+16     	; 0x25c <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     24c:	ed eb       	ldi	r30, 0xBD	; 189
     24e:	f2 e0       	ldi	r31, 0x02	; 2
     250:	80 81       	ld	r24, Z
     252:	91 81       	ldd	r25, Z+1	; 0x01
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	91 83       	std	Z+1, r25	; 0x01
     258:	80 83       	st	Z, r24
     25a:	07 c0       	rjmp	.+14     	; 0x26a <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     25c:	ed eb       	ldi	r30, 0xBD	; 189
     25e:	f2 e0       	ldi	r31, 0x02	; 2
     260:	80 81       	ld	r24, Z
     262:	91 81       	ldd	r25, Z+1	; 0x01
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	91 83       	std	Z+1, r25	; 0x01
     268:	80 83       	st	Z, r24
	{
		e2.inc_count();
	}
	else
	e2.dcr_count();
}
     26a:	ff 91       	pop	r31
     26c:	ef 91       	pop	r30
     26e:	9f 91       	pop	r25
     270:	8f 91       	pop	r24
     272:	0f 90       	pop	r0
     274:	0b be       	out	0x3b, r0	; 59
     276:	0f 90       	pop	r0
     278:	0f be       	out	0x3f, r0	; 63
     27a:	0f 90       	pop	r0
     27c:	1f 90       	pop	r1
     27e:	18 95       	reti

00000280 <__vector_4>:
ISR(INT3_vect)	//for motor3
{
     280:	1f 92       	push	r1
     282:	0f 92       	push	r0
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	0f 92       	push	r0
     288:	11 24       	eor	r1, r1
     28a:	0b b6       	in	r0, 0x3b	; 59
     28c:	0f 92       	push	r0
     28e:	8f 93       	push	r24
     290:	9f 93       	push	r25
     292:	ef 93       	push	r30
     294:	ff 93       	push	r31
	if((bit_is_set(PINA,PA3)))
     296:	03 9b       	sbis	0x00, 3	; 0
     298:	08 c0       	rjmp	.+16     	; 0x2aa <__vector_4+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     29a:	e5 eb       	ldi	r30, 0xB5	; 181
     29c:	f2 e0       	ldi	r31, 0x02	; 2
     29e:	80 81       	ld	r24, Z
     2a0:	91 81       	ldd	r25, Z+1	; 0x01
     2a2:	01 96       	adiw	r24, 0x01	; 1
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	80 83       	st	Z, r24
     2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <__vector_4+0x38>
		inline void dcr_count(){count_encoder--;};
     2aa:	e5 eb       	ldi	r30, 0xB5	; 181
     2ac:	f2 e0       	ldi	r31, 0x02	; 2
     2ae:	80 81       	ld	r24, Z
     2b0:	91 81       	ldd	r25, Z+1	; 0x01
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	91 83       	std	Z+1, r25	; 0x01
     2b6:	80 83       	st	Z, r24
	{
		e3.inc_count();
	}
	else
		e3.dcr_count();
}
     2b8:	ff 91       	pop	r31
     2ba:	ef 91       	pop	r30
     2bc:	9f 91       	pop	r25
     2be:	8f 91       	pop	r24
     2c0:	0f 90       	pop	r0
     2c2:	0b be       	out	0x3b, r0	; 59
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <__vector_5>:
ISR(INT4_vect)	//for motor4
{
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	0b b6       	in	r0, 0x3b	; 59
     2da:	0f 92       	push	r0
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	ef 93       	push	r30
     2e2:	ff 93       	push	r31
	if((bit_is_set(PINA,PA4)))
     2e4:	04 9b       	sbis	0x00, 4	; 0
     2e6:	08 c0       	rjmp	.+16     	; 0x2f8 <__vector_5+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     2e8:	ed ea       	ldi	r30, 0xAD	; 173
     2ea:	f2 e0       	ldi	r31, 0x02	; 2
     2ec:	80 81       	ld	r24, Z
     2ee:	91 81       	ldd	r25, Z+1	; 0x01
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	91 83       	std	Z+1, r25	; 0x01
     2f4:	80 83       	st	Z, r24
     2f6:	07 c0       	rjmp	.+14     	; 0x306 <__vector_5+0x38>
		inline void dcr_count(){count_encoder--;};
     2f8:	ed ea       	ldi	r30, 0xAD	; 173
     2fa:	f2 e0       	ldi	r31, 0x02	; 2
     2fc:	80 81       	ld	r24, Z
     2fe:	91 81       	ldd	r25, Z+1	; 0x01
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	91 83       	std	Z+1, r25	; 0x01
     304:	80 83       	st	Z, r24
	{
		e4.inc_count();
	}
	else
	e4.dcr_count();
}
     306:	ff 91       	pop	r31
     308:	ef 91       	pop	r30
     30a:	9f 91       	pop	r25
     30c:	8f 91       	pop	r24
     30e:	0f 90       	pop	r0
     310:	0b be       	out	0x3b, r0	; 59
     312:	0f 90       	pop	r0
     314:	0f be       	out	0x3f, r0	; 63
     316:	0f 90       	pop	r0
     318:	1f 90       	pop	r1
     31a:	18 95       	reti

0000031c <__vector_6>:
ISR(INT5_vect)	//for y-axis
{
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	0b b6       	in	r0, 0x3b	; 59
     328:	0f 92       	push	r0
     32a:	8f 93       	push	r24
     32c:	9f 93       	push	r25
     32e:	ef 93       	push	r30
     330:	ff 93       	push	r31
	if((bit_is_set(PINA,PA5)))
     332:	05 9b       	sbis	0x00, 5	; 0
     334:	08 c0       	rjmp	.+16     	; 0x346 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     336:	e5 ed       	ldi	r30, 0xD5	; 213
     338:	f2 e0       	ldi	r31, 0x02	; 2
     33a:	80 81       	ld	r24, Z
     33c:	91 81       	ldd	r25, Z+1	; 0x01
     33e:	01 96       	adiw	r24, 0x01	; 1
     340:	91 83       	std	Z+1, r25	; 0x01
     342:	80 83       	st	Z, r24
     344:	07 c0       	rjmp	.+14     	; 0x354 <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     346:	e5 ed       	ldi	r30, 0xD5	; 213
     348:	f2 e0       	ldi	r31, 0x02	; 2
     34a:	80 81       	ld	r24, Z
     34c:	91 81       	ldd	r25, Z+1	; 0x01
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	91 83       	std	Z+1, r25	; 0x01
     352:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     354:	ff 91       	pop	r31
     356:	ef 91       	pop	r30
     358:	9f 91       	pop	r25
     35a:	8f 91       	pop	r24
     35c:	0f 90       	pop	r0
     35e:	0b be       	out	0x3b, r0	; 59
     360:	0f 90       	pop	r0
     362:	0f be       	out	0x3f, r0	; 63
     364:	0f 90       	pop	r0
     366:	1f 90       	pop	r1
     368:	18 95       	reti

0000036a <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     36a:	1f 92       	push	r1
     36c:	0f 92       	push	r0
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	0f 92       	push	r0
     372:	11 24       	eor	r1, r1
     374:	0b b6       	in	r0, 0x3b	; 59
     376:	0f 92       	push	r0
     378:	8f 93       	push	r24
     37a:	9f 93       	push	r25
     37c:	ef 93       	push	r30
     37e:	ff 93       	push	r31
	
	PidUpdateFlagDriveX = true;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <PidUpdateFlagDriveX>
	PidUpdateFlagDriveY = true;
     386:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <PidUpdateFlagDriveY>
	
	PidUpdateFlagMotor = true;
     38a:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <PidUpdateFlagMotor>
	
	PidUpdateFlagCompass = true;
     38e:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <PidUpdateFlagCompass>
	PidUpdateFlagLinetracker = true;
     392:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <PidUpdateFlagLinetracker>
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     396:	e5 ec       	ldi	r30, 0xC5	; 197
     398:	f2 e0       	ldi	r31, 0x02	; 2
     39a:	80 81       	ld	r24, Z
     39c:	91 81       	ldd	r25, Z+1	; 0x01
     39e:	93 83       	std	Z+3, r25	; 0x03
     3a0:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     3a2:	11 82       	std	Z+1, r1	; 0x01
     3a4:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     3a6:	ed eb       	ldi	r30, 0xBD	; 189
     3a8:	f2 e0       	ldi	r31, 0x02	; 2
     3aa:	80 81       	ld	r24, Z
     3ac:	91 81       	ldd	r25, Z+1	; 0x01
     3ae:	93 83       	std	Z+3, r25	; 0x03
     3b0:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     3b2:	11 82       	std	Z+1, r1	; 0x01
     3b4:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     3b6:	e5 eb       	ldi	r30, 0xB5	; 181
     3b8:	f2 e0       	ldi	r31, 0x02	; 2
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	93 83       	std	Z+3, r25	; 0x03
     3c0:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     3c2:	11 82       	std	Z+1, r1	; 0x01
     3c4:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		void setspeed(){
			speed = count_encoder;
     3c6:	ed ea       	ldi	r30, 0xAD	; 173
     3c8:	f2 e0       	ldi	r31, 0x02	; 2
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	93 83       	std	Z+3, r25	; 0x03
     3d0:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     3d2:	11 82       	std	Z+1, r1	; 0x01
     3d4:	10 82       	st	Z, r1
	e1.setspeed();
	e2.setspeed();
	e3.setspeed();
	e4.setspeed();
	
     3d6:	ff 91       	pop	r31
     3d8:	ef 91       	pop	r30
     3da:	9f 91       	pop	r25
     3dc:	8f 91       	pop	r24
     3de:	0f 90       	pop	r0
     3e0:	0b be       	out	0x3b, r0	; 59
     3e2:	0f 90       	pop	r0
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	0f 90       	pop	r0
     3e8:	1f 90       	pop	r1
     3ea:	18 95       	reti

000003ec <_ZN11LinetrackerC1Ei>:



#include "Linetracker.h"

Linetracker::Linetracker(int addr) // 0 to 255
     3ec:	fc 01       	movw	r30, r24
{
	address = addr;
     3ee:	60 83       	st	Z, r22
	junction_detect = false;
     3f0:	16 82       	std	Z+6, r1	; 0x06
	junction_count = 0;
     3f2:	13 82       	std	Z+3, r1	; 0x03
     3f4:	12 82       	std	Z+2, r1	; 0x02
     3f6:	08 95       	ret

000003f8 <_ZN5MotorC1Eh>:
			////////to check/////////////////
			backtoLZ2 = true;
			GoThrowingZone2 = false;	
		}
		
		if(backtoLZ2 && task6 && !task7){
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	ec 01       	movw	r28, r24
     3fe:	68 83       	st	Y, r22
     400:	5a d7       	rcall	.+3764   	; 0x12b6 <_ZN5Motor7InitPWMEv>
     402:	ce 01       	movw	r24, r28
     404:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN5Motor9StopMotorEv>
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	ce 01       	movw	r24, r28
     40e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN5Motor11SetOcrValueEi>
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <_Z19calculateCompassPIDv>:
     418:	4f 92       	push	r4
     41a:	5f 92       	push	r5
     41c:	6f 92       	push	r6
     41e:	7f 92       	push	r7
     420:	8f 92       	push	r8
     422:	9f 92       	push	r9
     424:	af 92       	push	r10
     426:	bf 92       	push	r11
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	00 d0       	rcall	.+0      	; 0x43a <_Z19calculateCompassPIDv+0x22>
     43a:	00 d0       	rcall	.+0      	; 0x43c <_Z19calculateCompassPIDv+0x24>
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <PidUpdateFlagCompass>
     444:	88 23       	and	r24, r24
     446:	09 f4       	brne	.+2      	; 0x44a <_Z19calculateCompassPIDv+0x32>
     448:	f9 c0       	rjmp	.+498    	; 0x63c <_Z19calculateCompassPIDv+0x224>
     44a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <compassPID>
     44e:	81 11       	cpse	r24, r1
     450:	fe c0       	rjmp	.+508    	; 0x64e <_Z19calculateCompassPIDv+0x236>
     452:	f8 c0       	rjmp	.+496    	; 0x644 <_Z19calculateCompassPIDv+0x22c>
     454:	88 56       	subi	r24, 0x68	; 104
     456:	91 40       	sbci	r25, 0x01	; 1
     458:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <compass+0x3>
     45c:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <compass+0x2>
     460:	0f c0       	rjmp	.+30     	; 0x480 <_Z19calculateCompassPIDv+0x68>
     462:	8c 34       	cpi	r24, 0x4C	; 76
     464:	2f ef       	ldi	r18, 0xFF	; 255
     466:	92 07       	cpc	r25, r18
     468:	2c f0       	brlt	.+10     	; 0x474 <_Z19calculateCompassPIDv+0x5c>
     46a:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <compass+0x3>
     46e:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <compass+0x2>
     472:	06 c0       	rjmp	.+12     	; 0x480 <_Z19calculateCompassPIDv+0x68>
     474:	88 59       	subi	r24, 0x98	; 152
     476:	9e 4f       	sbci	r25, 0xFE	; 254
     478:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <compass+0x3>
     47c:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <compass+0x2>
     480:	60 91 66 03 	lds	r22, 0x0366	; 0x800366 <compass+0x2>
     484:	70 91 67 03 	lds	r23, 0x0367	; 0x800367 <compass+0x3>
     488:	07 2e       	mov	r0, r23
     48a:	00 0c       	add	r0, r0
     48c:	88 0b       	sbc	r24, r24
     48e:	99 0b       	sbc	r25, r25
     490:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__floatsisf>
     494:	4b 01       	movw	r8, r22
     496:	5c 01       	movw	r10, r24
     498:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <compass+0x19>
     49c:	30 91 7e 03 	lds	r19, 0x037E	; 0x80037e <compass+0x1a>
     4a0:	40 91 7f 03 	lds	r20, 0x037F	; 0x80037f <compass+0x1b>
     4a4:	50 91 80 03 	lds	r21, 0x0380	; 0x800380 <compass+0x1c>
     4a8:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     4ac:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <compass+0xa>
     4b0:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <compass+0xb>
     4b4:	40 91 70 03 	lds	r20, 0x0370	; 0x800370 <compass+0xc>
     4b8:	50 91 71 03 	lds	r21, 0x0371	; 0x800371 <compass+0xd>
     4bc:	0e 94 ef 0c 	call	0x19de	; 0x19de <__addsf3>
     4c0:	6b 01       	movw	r12, r22
     4c2:	7c 01       	movw	r14, r24
     4c4:	60 93 6e 03 	sts	0x036E, r22	; 0x80036e <compass+0xa>
     4c8:	70 93 6f 03 	sts	0x036F, r23	; 0x80036f <compass+0xb>
     4cc:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <compass+0xc>
     4d0:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <compass+0xd>
     4d4:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <compass+0x11>
     4d8:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <compass+0x12>
     4dc:	9e 83       	std	Y+6, r25	; 0x06
     4de:	8d 83       	std	Y+5, r24	; 0x05
     4e0:	bc 01       	movw	r22, r24
     4e2:	99 0f       	add	r25, r25
     4e4:	88 0b       	sbc	r24, r24
     4e6:	99 0b       	sbc	r25, r25
     4e8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__floatsisf>
     4ec:	69 83       	std	Y+1, r22	; 0x01
     4ee:	7a 83       	std	Y+2, r23	; 0x02
     4f0:	8b 83       	std	Y+3, r24	; 0x03
     4f2:	9c 83       	std	Y+4, r25	; 0x04
     4f4:	2d ec       	ldi	r18, 0xCD	; 205
     4f6:	3c ec       	ldi	r19, 0xCC	; 204
     4f8:	4c ec       	ldi	r20, 0xCC	; 204
     4fa:	5d e3       	ldi	r21, 0x3D	; 61
     4fc:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     500:	2b 01       	movw	r4, r22
     502:	3c 01       	movw	r6, r24
     504:	c7 01       	movw	r24, r14
     506:	b6 01       	movw	r22, r12
     508:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__fixsfsi>
     50c:	9b 01       	movw	r18, r22
     50e:	77 23       	and	r23, r23
     510:	24 f4       	brge	.+8      	; 0x51a <_Z19calculateCompassPIDv+0x102>
     512:	22 27       	eor	r18, r18
     514:	33 27       	eor	r19, r19
     516:	26 1b       	sub	r18, r22
     518:	37 0b       	sbc	r19, r23
     51a:	b9 01       	movw	r22, r18
     51c:	33 0f       	add	r19, r19
     51e:	88 0b       	sbc	r24, r24
     520:	99 0b       	sbc	r25, r25
     522:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__floatsisf>
     526:	a3 01       	movw	r20, r6
     528:	92 01       	movw	r18, r4
     52a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__gesf2>
     52e:	18 16       	cp	r1, r24
     530:	24 f5       	brge	.+72     	; 0x57a <_Z19calculateCompassPIDv+0x162>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	a9 01       	movw	r20, r18
     538:	c7 01       	movw	r24, r14
     53a:	b6 01       	movw	r22, r12
     53c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <__gesf2>
     540:	18 16       	cp	r1, r24
     542:	4c f4       	brge	.+18     	; 0x556 <_Z19calculateCompassPIDv+0x13e>
     544:	40 92 6e 03 	sts	0x036E, r4	; 0x80036e <compass+0xa>
     548:	50 92 6f 03 	sts	0x036F, r5	; 0x80036f <compass+0xb>
     54c:	60 92 70 03 	sts	0x0370, r6	; 0x800370 <compass+0xc>
     550:	70 92 71 03 	sts	0x0371, r7	; 0x800371 <compass+0xd>
     554:	12 c0       	rjmp	.+36     	; 0x57a <_Z19calculateCompassPIDv+0x162>
     556:	2d ec       	ldi	r18, 0xCD	; 205
     558:	3c ec       	ldi	r19, 0xCC	; 204
     55a:	4c ec       	ldi	r20, 0xCC	; 204
     55c:	5d eb       	ldi	r21, 0xBD	; 189
     55e:	69 81       	ldd	r22, Y+1	; 0x01
     560:	7a 81       	ldd	r23, Y+2	; 0x02
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	9c 81       	ldd	r25, Y+4	; 0x04
     566:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     56a:	60 93 6e 03 	sts	0x036E, r22	; 0x80036e <compass+0xa>
     56e:	70 93 6f 03 	sts	0x036F, r23	; 0x80036f <compass+0xb>
     572:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <compass+0xc>
     576:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <compass+0xd>
     57a:	0f 2e       	mov	r0, r31
     57c:	f4 e6       	ldi	r31, 0x64	; 100
     57e:	ef 2e       	mov	r14, r31
     580:	f3 e0       	ldi	r31, 0x03	; 3
     582:	ff 2e       	mov	r15, r31
     584:	f0 2d       	mov	r31, r0
     586:	f7 01       	movw	r30, r14
     588:	25 89       	ldd	r18, Z+21	; 0x15
     58a:	36 89       	ldd	r19, Z+22	; 0x16
     58c:	47 89       	ldd	r20, Z+23	; 0x17
     58e:	50 8d       	ldd	r21, Z+24	; 0x18
     590:	c5 01       	movw	r24, r10
     592:	b4 01       	movw	r22, r8
     594:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     598:	4b 01       	movw	r8, r22
     59a:	5c 01       	movw	r10, r24
     59c:	f7 01       	movw	r30, r14
     59e:	84 81       	ldd	r24, Z+4	; 0x04
     5a0:	95 81       	ldd	r25, Z+5	; 0x05
     5a2:	b8 01       	movw	r22, r16
     5a4:	68 1b       	sub	r22, r24
     5a6:	79 0b       	sbc	r23, r25
     5a8:	07 2e       	mov	r0, r23
     5aa:	00 0c       	add	r0, r0
     5ac:	88 0b       	sbc	r24, r24
     5ae:	99 0b       	sbc	r25, r25
     5b0:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__floatsisf>
     5b4:	f7 01       	movw	r30, r14
     5b6:	25 8d       	ldd	r18, Z+29	; 0x1d
     5b8:	36 8d       	ldd	r19, Z+30	; 0x1e
     5ba:	47 8d       	ldd	r20, Z+31	; 0x1f
     5bc:	50 a1       	ldd	r21, Z+32	; 0x20
     5be:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     5c2:	9b 01       	movw	r18, r22
     5c4:	ac 01       	movw	r20, r24
     5c6:	c5 01       	movw	r24, r10
     5c8:	b4 01       	movw	r22, r8
     5ca:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__subsf3>
     5ce:	f7 01       	movw	r30, r14
     5d0:	22 85       	ldd	r18, Z+10	; 0x0a
     5d2:	33 85       	ldd	r19, Z+11	; 0x0b
     5d4:	44 85       	ldd	r20, Z+12	; 0x0c
     5d6:	55 85       	ldd	r21, Z+13	; 0x0d
     5d8:	0e 94 ef 0c 	call	0x19de	; 0x19de <__addsf3>
     5dc:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__fixsfsi>
     5e0:	9b 01       	movw	r18, r22
     5e2:	f7 01       	movw	r30, r14
     5e4:	77 83       	std	Z+7, r23	; 0x07
     5e6:	66 83       	std	Z+6, r22	; 0x06
     5e8:	15 83       	std	Z+5, r17	; 0x05
     5ea:	04 83       	std	Z+4, r16	; 0x04
     5ec:	ab 01       	movw	r20, r22
     5ee:	77 23       	and	r23, r23
     5f0:	24 f4       	brge	.+8      	; 0x5fa <_Z19calculateCompassPIDv+0x1e2>
     5f2:	44 27       	eor	r20, r20
     5f4:	55 27       	eor	r21, r21
     5f6:	46 1b       	sub	r20, r22
     5f8:	57 0b       	sbc	r21, r23
     5fa:	8d 81       	ldd	r24, Y+5	; 0x05
     5fc:	9e 81       	ldd	r25, Y+6	; 0x06
     5fe:	84 17       	cp	r24, r20
     600:	95 07       	cpc	r25, r21
     602:	74 f4       	brge	.+28     	; 0x620 <_Z19calculateCompassPIDv+0x208>
     604:	82 17       	cp	r24, r18
     606:	93 07       	cpc	r25, r19
     608:	2c f0       	brlt	.+10     	; 0x614 <_Z19calculateCompassPIDv+0x1fc>
     60a:	91 95       	neg	r25
     60c:	81 95       	neg	r24
     60e:	91 09       	sbc	r25, r1
     610:	9e 83       	std	Y+6, r25	; 0x06
     612:	8d 83       	std	Y+5, r24	; 0x05
     614:	ed 81       	ldd	r30, Y+5	; 0x05
     616:	fe 81       	ldd	r31, Y+6	; 0x06
     618:	f0 93 6b 03 	sts	0x036B, r31	; 0x80036b <compass+0x7>
     61c:	e0 93 6a 03 	sts	0x036A, r30	; 0x80036a <compass+0x6>
     620:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <compass+0x6>
     624:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <compass+0x7>
     628:	91 95       	neg	r25
     62a:	81 95       	neg	r24
     62c:	91 09       	sbc	r25, r1
     62e:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <velocity_robot+0x5>
     632:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <velocity_robot+0x4>
     636:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <PidUpdateFlagCompass>
     63a:	1a c0       	rjmp	.+52     	; 0x670 <_Z19calculateCompassPIDv+0x258>
     63c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <compassPID>
     640:	81 11       	cpse	r24, r1
     642:	16 c0       	rjmp	.+44     	; 0x670 <_Z19calculateCompassPIDv+0x258>
     644:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <velocity_robot+0x5>
     648:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <velocity_robot+0x4>
     64c:	11 c0       	rjmp	.+34     	; 0x670 <_Z19calculateCompassPIDv+0x258>
     64e:	00 91 c7 03 	lds	r16, 0x03C7	; 0x8003c7 <Compass_angle>
     652:	10 91 c8 03 	lds	r17, 0x03C8	; 0x8003c8 <Compass_angle+0x1>
     656:	e4 e6       	ldi	r30, 0x64	; 100
     658:	f3 e0       	ldi	r31, 0x03	; 3
     65a:	11 83       	std	Z+1, r17	; 0x01
     65c:	00 83       	st	Z, r16
     65e:	86 85       	ldd	r24, Z+14	; 0x0e
     660:	97 85       	ldd	r25, Z+15	; 0x0f
     662:	80 1b       	sub	r24, r16
     664:	91 0b       	sbc	r25, r17
     666:	85 3b       	cpi	r24, 0xB5	; 181
     668:	91 05       	cpc	r25, r1
     66a:	0c f0       	brlt	.+2      	; 0x66e <_Z19calculateCompassPIDv+0x256>
     66c:	f3 ce       	rjmp	.-538    	; 0x454 <_Z19calculateCompassPIDv+0x3c>
     66e:	f9 ce       	rjmp	.-526    	; 0x462 <_Z19calculateCompassPIDv+0x4a>
     670:	26 96       	adiw	r28, 0x06	; 6
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	7f 90       	pop	r7
     696:	6f 90       	pop	r6
     698:	5f 90       	pop	r5
     69a:	4f 90       	pop	r4
     69c:	08 95       	ret

0000069e <_Z12calculatevelv>:
     69e:	2f 92       	push	r2
     6a0:	3f 92       	push	r3
     6a2:	4f 92       	push	r4
     6a4:	5f 92       	push	r5
     6a6:	6f 92       	push	r6
     6a8:	7f 92       	push	r7
     6aa:	8f 92       	push	r8
     6ac:	9f 92       	push	r9
     6ae:	af 92       	push	r10
     6b0:	bf 92       	push	r11
     6b2:	cf 92       	push	r12
     6b4:	df 92       	push	r13
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <_Z12calculatevelv+0x26>
     6c4:	1f 92       	push	r1
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	0f 2e       	mov	r0, r31
     6cc:	ff ec       	ldi	r31, 0xCF	; 207
     6ce:	ef 2e       	mov	r14, r31
     6d0:	f3 e0       	ldi	r31, 0x03	; 3
     6d2:	ff 2e       	mov	r15, r31
     6d4:	f0 2d       	mov	r31, r0
     6d6:	0f 2e       	mov	r0, r31
     6d8:	f8 e0       	ldi	r31, 0x08	; 8
     6da:	2f 2e       	mov	r2, r31
     6dc:	f2 e0       	ldi	r31, 0x02	; 2
     6de:	3f 2e       	mov	r3, r31
     6e0:	f0 2d       	mov	r31, r0
     6e2:	0f 2e       	mov	r0, r31
     6e4:	ff ec       	ldi	r31, 0xCF	; 207
     6e6:	8f 2e       	mov	r8, r31
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	9f 2e       	mov	r9, r31
     6ec:	f0 2d       	mov	r31, r0
     6ee:	fa 82       	std	Y+2, r15	; 0x02
     6f0:	e9 82       	std	Y+1, r14	; 0x01
     6f2:	89 ec       	ldi	r24, 0xC9	; 201
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	9c 83       	std	Y+4, r25	; 0x04
     6f8:	8b 83       	std	Y+3, r24	; 0x03
     6fa:	81 01       	movw	r16, r2
     6fc:	a1 2c       	mov	r10, r1
     6fe:	b1 2c       	mov	r11, r1
     700:	c1 2c       	mov	r12, r1
     702:	d1 2c       	mov	r13, r1
     704:	eb 81       	ldd	r30, Y+3	; 0x03
     706:	fc 81       	ldd	r31, Y+4	; 0x04
     708:	61 91       	ld	r22, Z+
     70a:	71 91       	ld	r23, Z+
     70c:	fc 83       	std	Y+4, r31	; 0x04
     70e:	eb 83       	std	Y+3, r30	; 0x03
     710:	f8 01       	movw	r30, r16
     712:	41 90       	ld	r4, Z+
     714:	51 90       	ld	r5, Z+
     716:	61 90       	ld	r6, Z+
     718:	71 90       	ld	r7, Z+
     71a:	8f 01       	movw	r16, r30
     71c:	07 2e       	mov	r0, r23
     71e:	00 0c       	add	r0, r0
     720:	88 0b       	sbc	r24, r24
     722:	99 0b       	sbc	r25, r25
     724:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__floatsisf>
     728:	a3 01       	movw	r20, r6
     72a:	92 01       	movw	r18, r4
     72c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	6a 2d       	mov	r22, r10
     736:	7b 2d       	mov	r23, r11
     738:	8c 2d       	mov	r24, r12
     73a:	9d 2d       	mov	r25, r13
     73c:	0e 94 ef 0c 	call	0x19de	; 0x19de <__addsf3>
     740:	a6 2e       	mov	r10, r22
     742:	b7 2e       	mov	r11, r23
     744:	c8 2e       	mov	r12, r24
     746:	d9 2e       	mov	r13, r25
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	9c 81       	ldd	r25, Y+4	; 0x04
     74c:	88 15       	cp	r24, r8
     74e:	99 05       	cpc	r25, r9
     750:	c9 f6       	brne	.-78     	; 0x704 <_Z12calculatevelv+0x66>
     752:	8a 2d       	mov	r24, r10
     754:	9b 2d       	mov	r25, r11
     756:	ac 2d       	mov	r26, r12
     758:	bd 2d       	mov	r27, r13
     75a:	e9 81       	ldd	r30, Y+1	; 0x01
     75c:	fa 81       	ldd	r31, Y+2	; 0x02
     75e:	80 83       	st	Z, r24
     760:	91 83       	std	Z+1, r25	; 0x01
     762:	a2 83       	std	Z+2, r26	; 0x02
     764:	b3 83       	std	Z+3, r27	; 0x03
     766:	f4 e0       	ldi	r31, 0x04	; 4
     768:	ef 0e       	add	r14, r31
     76a:	f1 1c       	adc	r15, r1
     76c:	8c e0       	ldi	r24, 0x0C	; 12
     76e:	28 0e       	add	r2, r24
     770:	31 1c       	adc	r3, r1
     772:	9f ed       	ldi	r25, 0xDF	; 223
     774:	e9 16       	cp	r14, r25
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	f9 06       	cpc	r15, r25
     77a:	09 f0       	breq	.+2      	; 0x77e <_Z12calculatevelv+0xe0>
     77c:	b8 cf       	rjmp	.-144    	; 0x6ee <_Z12calculatevelv+0x50>
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	48 eb       	ldi	r20, 0xB8	; 184
     784:	51 e4       	ldi	r21, 0x41	; 65
     786:	ef ec       	ldi	r30, 0xCF	; 207
     788:	f3 e0       	ldi	r31, 0x03	; 3
     78a:	60 81       	ld	r22, Z
     78c:	71 81       	ldd	r23, Z+1	; 0x01
     78e:	82 81       	ldd	r24, Z+2	; 0x02
     790:	93 81       	ldd	r25, Z+3	; 0x03
     792:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	49 e7       	ldi	r20, 0x79	; 121
     79c:	53 e4       	ldi	r21, 0x43	; 67
     79e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__divsf3>
     7a2:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__fixsfsi>
     7a6:	70 93 e6 03 	sts	0x03E6, r23	; 0x8003e6 <SETPOINT1+0x1>
     7aa:	60 93 e5 03 	sts	0x03E5, r22	; 0x8003e5 <SETPOINT1>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	48 eb       	ldi	r20, 0xB8	; 184
     7b4:	51 e4       	ldi	r21, 0x41	; 65
     7b6:	60 91 d3 03 	lds	r22, 0x03D3	; 0x8003d3 <velocity_motor+0x4>
     7ba:	70 91 d4 03 	lds	r23, 0x03D4	; 0x8003d4 <velocity_motor+0x5>
     7be:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <velocity_motor+0x6>
     7c2:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <velocity_motor+0x7>
     7c6:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	49 e7       	ldi	r20, 0x79	; 121
     7d0:	53 e4       	ldi	r21, 0x43	; 67
     7d2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__divsf3>
     7d6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__fixsfsi>
     7da:	70 93 e4 03 	sts	0x03E4, r23	; 0x8003e4 <SETPOINT2+0x1>
     7de:	60 93 e3 03 	sts	0x03E3, r22	; 0x8003e3 <SETPOINT2>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	48 eb       	ldi	r20, 0xB8	; 184
     7e8:	51 e4       	ldi	r21, 0x41	; 65
     7ea:	60 91 d7 03 	lds	r22, 0x03D7	; 0x8003d7 <velocity_motor+0x8>
     7ee:	70 91 d8 03 	lds	r23, 0x03D8	; 0x8003d8 <velocity_motor+0x9>
     7f2:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <velocity_motor+0xa>
     7f6:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <velocity_motor+0xb>
     7fa:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	49 e7       	ldi	r20, 0x79	; 121
     804:	53 e4       	ldi	r21, 0x43	; 67
     806:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__divsf3>
     80a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__fixsfsi>
     80e:	70 93 e2 03 	sts	0x03E2, r23	; 0x8003e2 <SETPOINT3+0x1>
     812:	60 93 e1 03 	sts	0x03E1, r22	; 0x8003e1 <SETPOINT3>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	48 eb       	ldi	r20, 0xB8	; 184
     81c:	51 e4       	ldi	r21, 0x41	; 65
     81e:	60 91 db 03 	lds	r22, 0x03DB	; 0x8003db <velocity_motor+0xc>
     822:	70 91 dc 03 	lds	r23, 0x03DC	; 0x8003dc <velocity_motor+0xd>
     826:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <velocity_motor+0xe>
     82a:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <velocity_motor+0xf>
     82e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	49 e7       	ldi	r20, 0x79	; 121
     838:	53 e4       	ldi	r21, 0x43	; 67
     83a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__divsf3>
     83e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__fixsfsi>
     842:	70 93 e0 03 	sts	0x03E0, r23	; 0x8003e0 <SETPOINT4+0x1>
     846:	60 93 df 03 	sts	0x03DF, r22	; 0x8003df <SETPOINT4>
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	df 90       	pop	r13
     860:	cf 90       	pop	r12
     862:	bf 90       	pop	r11
     864:	af 90       	pop	r10
     866:	9f 90       	pop	r9
     868:	8f 90       	pop	r8
     86a:	7f 90       	pop	r7
     86c:	6f 90       	pop	r6
     86e:	5f 90       	pop	r5
     870:	4f 90       	pop	r4
     872:	3f 90       	pop	r3
     874:	2f 90       	pop	r2
     876:	08 95       	ret

00000878 <_Z14initializeDatav>:
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	c4 e6       	ldi	r28, 0x64	; 100
     88a:	d3 e0       	ldi	r29, 0x03	; 3
     88c:	82 e1       	ldi	r24, 0x12	; 18
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	9f 87       	std	Y+15, r25	; 0x0f
     892:	8e 87       	std	Y+14, r24	; 0x0e
     894:	a6 ea       	ldi	r26, 0xA6	; 166
     896:	b3 e0       	ldi	r27, 0x03	; 3
     898:	83 e2       	ldi	r24, 0x23	; 35
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	1f 96       	adiw	r26, 0x0f	; 15
     89e:	9c 93       	st	X, r25
     8a0:	8e 93       	st	-X, r24
     8a2:	1e 97       	sbiw	r26, 0x0e	; 14
     8a4:	e5 e8       	ldi	r30, 0x85	; 133
     8a6:	f3 e0       	ldi	r31, 0x03	; 3
     8a8:	97 87       	std	Z+15, r25	; 0x0f
     8aa:	86 87       	std	Z+14, r24	; 0x0e
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e4       	ldi	r22, 0x40	; 64
     8b2:	70 e4       	ldi	r23, 0x40	; 64
     8b4:	4d 8b       	std	Y+21, r20	; 0x15
     8b6:	5e 8b       	std	Y+22, r21	; 0x16
     8b8:	6f 8b       	std	Y+23, r22	; 0x17
     8ba:	78 8f       	std	Y+24, r23	; 0x18
     8bc:	44 ea       	ldi	r20, 0xA4	; 164
     8be:	50 e7       	ldi	r21, 0x70	; 112
     8c0:	6d e3       	ldi	r22, 0x3D	; 61
     8c2:	7e e3       	ldi	r23, 0x3E	; 62
     8c4:	49 8f       	std	Y+25, r20	; 0x19
     8c6:	5a 8f       	std	Y+26, r21	; 0x1a
     8c8:	6b 8f       	std	Y+27, r22	; 0x1b
     8ca:	7c 8f       	std	Y+28, r23	; 0x1c
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	62 ee       	ldi	r22, 0xE2	; 226
     8d2:	72 e4       	ldi	r23, 0x42	; 66
     8d4:	4d 8f       	std	Y+29, r20	; 0x1d
     8d6:	5e 8f       	std	Y+30, r21	; 0x1e
     8d8:	6f 8f       	std	Y+31, r22	; 0x1f
     8da:	78 a3       	std	Y+32, r23	; 0x20
     8dc:	c1 2c       	mov	r12, r1
     8de:	d1 2c       	mov	r13, r1
     8e0:	76 01       	movw	r14, r12
     8e2:	68 94       	set
     8e4:	e7 f8       	bld	r14, 7
     8e6:	f6 f8       	bld	r15, 6
     8e8:	55 96       	adiw	r26, 0x15	; 21
     8ea:	cd 92       	st	X+, r12
     8ec:	dd 92       	st	X+, r13
     8ee:	ed 92       	st	X+, r14
     8f0:	fc 92       	st	X, r15
     8f2:	58 97       	sbiw	r26, 0x18	; 24
     8f4:	06 ea       	ldi	r16, 0xA6	; 166
     8f6:	1b e9       	ldi	r17, 0x9B	; 155
     8f8:	24 e4       	ldi	r18, 0x44	; 68
     8fa:	3b e3       	ldi	r19, 0x3B	; 59
     8fc:	59 96       	adiw	r26, 0x19	; 25
     8fe:	0d 93       	st	X+, r16
     900:	1d 93       	st	X+, r17
     902:	2d 93       	st	X+, r18
     904:	3c 93       	st	X, r19
     906:	5c 97       	sbiw	r26, 0x1c	; 28
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	64 ef       	ldi	r22, 0xF4	; 244
     90e:	73 e4       	ldi	r23, 0x43	; 67
     910:	5d 96       	adiw	r26, 0x1d	; 29
     912:	4d 93       	st	X+, r20
     914:	5d 93       	st	X+, r21
     916:	6d 93       	st	X+, r22
     918:	7c 93       	st	X, r23
     91a:	90 97       	sbiw	r26, 0x20	; 32
     91c:	c5 8a       	std	Z+21, r12	; 0x15
     91e:	d6 8a       	std	Z+22, r13	; 0x16
     920:	e7 8a       	std	Z+23, r14	; 0x17
     922:	f0 8e       	std	Z+24, r15	; 0x18
     924:	01 8f       	std	Z+25, r16	; 0x19
     926:	12 8f       	std	Z+26, r17	; 0x1a
     928:	23 8f       	std	Z+27, r18	; 0x1b
     92a:	34 8f       	std	Z+28, r19	; 0x1c
     92c:	45 8f       	std	Z+29, r20	; 0x1d
     92e:	56 8f       	std	Z+30, r21	; 0x1e
     930:	67 8f       	std	Z+31, r22	; 0x1f
     932:	70 a3       	std	Z+32, r23	; 0x20
     934:	e3 e4       	ldi	r30, 0x43	; 67
     936:	f3 e0       	ldi	r31, 0x03	; 3
     938:	0a e9       	ldi	r16, 0x9A	; 154
     93a:	19 e9       	ldi	r17, 0x99	; 153
     93c:	29 e9       	ldi	r18, 0x99	; 153
     93e:	3e e3       	ldi	r19, 0x3E	; 62
     940:	05 8b       	std	Z+21, r16	; 0x15
     942:	16 8b       	std	Z+22, r17	; 0x16
     944:	27 8b       	std	Z+23, r18	; 0x17
     946:	30 8f       	std	Z+24, r19	; 0x18
     948:	47 e1       	ldi	r20, 0x17	; 23
     94a:	57 eb       	ldi	r21, 0xB7	; 183
     94c:	61 e5       	ldi	r22, 0x51	; 81
     94e:	79 e3       	ldi	r23, 0x39	; 57
     950:	41 8f       	std	Z+25, r20	; 0x19
     952:	52 8f       	std	Z+26, r21	; 0x1a
     954:	63 8f       	std	Z+27, r22	; 0x1b
     956:	74 8f       	std	Z+28, r23	; 0x1c
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	a0 ea       	ldi	r26, 0xA0	; 160
     95e:	b0 e4       	ldi	r27, 0x40	; 64
     960:	85 8f       	std	Z+29, r24	; 0x1d
     962:	96 8f       	std	Z+30, r25	; 0x1e
     964:	a7 8f       	std	Z+31, r26	; 0x1f
     966:	b0 a3       	std	Z+32, r27	; 0x20
     968:	e2 e2       	ldi	r30, 0x22	; 34
     96a:	f3 e0       	ldi	r31, 0x03	; 3
     96c:	05 8b       	std	Z+21, r16	; 0x15
     96e:	16 8b       	std	Z+22, r17	; 0x16
     970:	27 8b       	std	Z+23, r18	; 0x17
     972:	30 8f       	std	Z+24, r19	; 0x18
     974:	41 8f       	std	Z+25, r20	; 0x19
     976:	52 8f       	std	Z+26, r21	; 0x1a
     978:	63 8f       	std	Z+27, r22	; 0x1b
     97a:	74 8f       	std	Z+28, r23	; 0x1c
     97c:	85 8f       	std	Z+29, r24	; 0x1d
     97e:	96 8f       	std	Z+30, r25	; 0x1e
     980:	a7 8f       	std	Z+31, r26	; 0x1f
     982:	b0 a3       	std	Z+32, r27	; 0x20
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	08 95       	ret

00000996 <_Z12setTuningsM1v>:
     996:	8f 92       	push	r8
     998:	9f 92       	push	r9
     99a:	af 92       	push	r10
     99c:	bf 92       	push	r11
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	00 91 c7 02 	lds	r16, 0x02C7	; 0x8002c7 <e1+0x2>
     9b2:	10 91 c8 02 	lds	r17, 0x02C8	; 0x8002c8 <e1+0x3>
     9b6:	cf e0       	ldi	r28, 0x0F	; 15
     9b8:	d3 e0       	ldi	r29, 0x03	; 3
     9ba:	19 83       	std	Y+1, r17	; 0x01
     9bc:	08 83       	st	Y, r16
     9be:	60 91 e5 03 	lds	r22, 0x03E5	; 0x8003e5 <SETPOINT1>
     9c2:	70 91 e6 03 	lds	r23, 0x03E6	; 0x8003e6 <SETPOINT1+0x1>
     9c6:	60 1b       	sub	r22, r16
     9c8:	71 0b       	sbc	r23, r17
     9ca:	7d 83       	std	Y+5, r23	; 0x05
     9cc:	6c 83       	std	Y+4, r22	; 0x04
     9ce:	07 2e       	mov	r0, r23
     9d0:	00 0c       	add	r0, r0
     9d2:	88 0b       	sbc	r24, r24
     9d4:	99 0b       	sbc	r25, r25
     9d6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__floatsisf>
     9da:	4b 01       	movw	r8, r22
     9dc:	5c 01       	movw	r10, r24
     9de:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <ki>
     9e2:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <ki+0x1>
     9e6:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <ki+0x2>
     9ea:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <ki+0x3>
     9ee:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     9f2:	2e 81       	ldd	r18, Y+6	; 0x06
     9f4:	3f 81       	ldd	r19, Y+7	; 0x07
     9f6:	48 85       	ldd	r20, Y+8	; 0x08
     9f8:	59 85       	ldd	r21, Y+9	; 0x09
     9fa:	f1 d7       	rcall	.+4066   	; 0x19de <__addsf3>
     9fc:	6b 01       	movw	r12, r22
     9fe:	7c 01       	movw	r14, r24
     a00:	6e 83       	std	Y+6, r22	; 0x06
     a02:	7f 83       	std	Y+7, r23	; 0x07
     a04:	88 87       	std	Y+8, r24	; 0x08
     a06:	99 87       	std	Y+9, r25	; 0x09
     a08:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <kp>
     a0c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <kp+0x1>
     a10:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <kp+0x2>
     a14:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <kp+0x3>
     a18:	c5 01       	movw	r24, r10
     a1a:	b4 01       	movw	r22, r8
     a1c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     a20:	a7 01       	movw	r20, r14
     a22:	96 01       	movw	r18, r12
     a24:	dc d7       	rcall	.+4024   	; 0x19de <__addsf3>
     a26:	6b 01       	movw	r12, r22
     a28:	7c 01       	movw	r14, r24
     a2a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a2c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a2e:	b8 01       	movw	r22, r16
     a30:	68 1b       	sub	r22, r24
     a32:	79 0b       	sbc	r23, r25
     a34:	07 2e       	mov	r0, r23
     a36:	00 0c       	add	r0, r0
     a38:	88 0b       	sbc	r24, r24
     a3a:	99 0b       	sbc	r25, r25
     a3c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__floatsisf>
     a40:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     a44:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     a48:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__data_start+0x2>
     a4c:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__data_start+0x3>
     a50:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	c7 01       	movw	r24, r14
     a5a:	b6 01       	movw	r22, r12
     a5c:	bf d7       	rcall	.+3966   	; 0x19dc <__subsf3>
     a5e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__fixsfsi>
     a62:	7b 83       	std	Y+3, r23	; 0x03
     a64:	6a 83       	std	Y+2, r22	; 0x02
     a66:	1b 87       	std	Y+11, r17	; 0x0b
     a68:	0a 87       	std	Y+10, r16	; 0x0a
     a6a:	2c 85       	ldd	r18, Y+12	; 0x0c
     a6c:	3d 85       	ldd	r19, Y+13	; 0x0d
     a6e:	62 0f       	add	r22, r18
     a70:	73 1f       	adc	r23, r19
     a72:	cb 01       	movw	r24, r22
     a74:	77 23       	and	r23, r23
     a76:	24 f4       	brge	.+8      	; 0xa80 <_Z12setTuningsM1v+0xea>
     a78:	88 27       	eor	r24, r24
     a7a:	99 27       	eor	r25, r25
     a7c:	86 1b       	sub	r24, r22
     a7e:	97 0b       	sbc	r25, r23
     a80:	8a 3f       	cpi	r24, 0xFA	; 250
     a82:	91 05       	cpc	r25, r1
     a84:	2c f4       	brge	.+10     	; 0xa90 <_Z12setTuningsM1v+0xfa>
     a86:	70 93 1c 03 	sts	0x031C, r23	; 0x80031c <ma+0xd>
     a8a:	60 93 1b 03 	sts	0x031B, r22	; 0x80031b <ma+0xc>
     a8e:	10 c0       	rjmp	.+32     	; 0xab0 <_Z12setTuningsM1v+0x11a>
     a90:	16 16       	cp	r1, r22
     a92:	17 06       	cpc	r1, r23
     a94:	3c f4       	brge	.+14     	; 0xaa4 <_Z12setTuningsM1v+0x10e>
     a96:	89 ef       	ldi	r24, 0xF9	; 249
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <ma+0xd>
     a9e:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <ma+0xc>
     aa2:	06 c0       	rjmp	.+12     	; 0xab0 <_Z12setTuningsM1v+0x11a>
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	9f ef       	ldi	r25, 0xFF	; 255
     aa8:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <ma+0xd>
     aac:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <ma+0xc>
     ab0:	60 91 1b 03 	lds	r22, 0x031B	; 0x80031b <ma+0xc>
     ab4:	70 91 1c 03 	lds	r23, 0x031C	; 0x80031c <ma+0xd>
     ab8:	8c ea       	ldi	r24, 0xAC	; 172
     aba:	92 e0       	ldi	r25, 0x02	; 2
     abc:	19 d5       	rcall	.+2610   	; 0x14f0 <_ZN5Motor11SetOcrValueEi>
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	af 90       	pop	r10
     ad2:	9f 90       	pop	r9
     ad4:	8f 90       	pop	r8
     ad6:	08 95       	ret

00000ad8 <_Z12setTuningsM2v>:
     ad8:	8f 92       	push	r8
     ada:	9f 92       	push	r9
     adc:	af 92       	push	r10
     ade:	bf 92       	push	r11
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	00 91 bf 02 	lds	r16, 0x02BF	; 0x8002bf <e2+0x2>
     af4:	10 91 c0 02 	lds	r17, 0x02C0	; 0x8002c0 <e2+0x3>
     af8:	c1 e0       	ldi	r28, 0x01	; 1
     afa:	d3 e0       	ldi	r29, 0x03	; 3
     afc:	19 83       	std	Y+1, r17	; 0x01
     afe:	08 83       	st	Y, r16
     b00:	60 91 e3 03 	lds	r22, 0x03E3	; 0x8003e3 <SETPOINT2>
     b04:	70 91 e4 03 	lds	r23, 0x03E4	; 0x8003e4 <SETPOINT2+0x1>
     b08:	60 1b       	sub	r22, r16
     b0a:	71 0b       	sbc	r23, r17
     b0c:	7d 83       	std	Y+5, r23	; 0x05
     b0e:	6c 83       	std	Y+4, r22	; 0x04
     b10:	07 2e       	mov	r0, r23
     b12:	00 0c       	add	r0, r0
     b14:	88 0b       	sbc	r24, r24
     b16:	99 0b       	sbc	r25, r25
     b18:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__floatsisf>
     b1c:	4b 01       	movw	r8, r22
     b1e:	5c 01       	movw	r10, r24
     b20:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <ki>
     b24:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <ki+0x1>
     b28:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <ki+0x2>
     b2c:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <ki+0x3>
     b30:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     b34:	2e 81       	ldd	r18, Y+6	; 0x06
     b36:	3f 81       	ldd	r19, Y+7	; 0x07
     b38:	48 85       	ldd	r20, Y+8	; 0x08
     b3a:	59 85       	ldd	r21, Y+9	; 0x09
     b3c:	50 d7       	rcall	.+3744   	; 0x19de <__addsf3>
     b3e:	6b 01       	movw	r12, r22
     b40:	7c 01       	movw	r14, r24
     b42:	6e 83       	std	Y+6, r22	; 0x06
     b44:	7f 83       	std	Y+7, r23	; 0x07
     b46:	88 87       	std	Y+8, r24	; 0x08
     b48:	99 87       	std	Y+9, r25	; 0x09
     b4a:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <kp>
     b4e:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <kp+0x1>
     b52:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <kp+0x2>
     b56:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <kp+0x3>
     b5a:	c5 01       	movw	r24, r10
     b5c:	b4 01       	movw	r22, r8
     b5e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     b62:	a7 01       	movw	r20, r14
     b64:	96 01       	movw	r18, r12
     b66:	3b d7       	rcall	.+3702   	; 0x19de <__addsf3>
     b68:	6b 01       	movw	r12, r22
     b6a:	7c 01       	movw	r14, r24
     b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b70:	b8 01       	movw	r22, r16
     b72:	68 1b       	sub	r22, r24
     b74:	79 0b       	sbc	r23, r25
     b76:	07 2e       	mov	r0, r23
     b78:	00 0c       	add	r0, r0
     b7a:	88 0b       	sbc	r24, r24
     b7c:	99 0b       	sbc	r25, r25
     b7e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <__floatsisf>
     b82:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     b86:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     b8a:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__data_start+0x2>
     b8e:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__data_start+0x3>
     b92:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     b96:	9b 01       	movw	r18, r22
     b98:	ac 01       	movw	r20, r24
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	1e d7       	rcall	.+3644   	; 0x19dc <__subsf3>
     ba0:	ea d7       	rcall	.+4052   	; 0x1b76 <__fixsfsi>
     ba2:	7b 83       	std	Y+3, r23	; 0x03
     ba4:	6a 83       	std	Y+2, r22	; 0x02
     ba6:	1b 87       	std	Y+11, r17	; 0x0b
     ba8:	0a 87       	std	Y+10, r16	; 0x0a
     baa:	2c 85       	ldd	r18, Y+12	; 0x0c
     bac:	3d 85       	ldd	r19, Y+13	; 0x0d
     bae:	62 0f       	add	r22, r18
     bb0:	73 1f       	adc	r23, r19
     bb2:	cb 01       	movw	r24, r22
     bb4:	77 23       	and	r23, r23
     bb6:	24 f4       	brge	.+8      	; 0xbc0 <_Z12setTuningsM2v+0xe8>
     bb8:	88 27       	eor	r24, r24
     bba:	99 27       	eor	r25, r25
     bbc:	86 1b       	sub	r24, r22
     bbe:	97 0b       	sbc	r25, r23
     bc0:	8a 3f       	cpi	r24, 0xFA	; 250
     bc2:	91 05       	cpc	r25, r1
     bc4:	2c f4       	brge	.+10     	; 0xbd0 <_Z12setTuningsM2v+0xf8>
     bc6:	70 93 0e 03 	sts	0x030E, r23	; 0x80030e <mb+0xd>
     bca:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <mb+0xc>
     bce:	10 c0       	rjmp	.+32     	; 0xbf0 <_Z12setTuningsM2v+0x118>
     bd0:	16 16       	cp	r1, r22
     bd2:	17 06       	cpc	r1, r23
     bd4:	3c f4       	brge	.+14     	; 0xbe4 <_Z12setTuningsM2v+0x10c>
     bd6:	89 ef       	ldi	r24, 0xF9	; 249
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <mb+0xd>
     bde:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <mb+0xc>
     be2:	06 c0       	rjmp	.+12     	; 0xbf0 <_Z12setTuningsM2v+0x118>
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	9f ef       	ldi	r25, 0xFF	; 255
     be8:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <mb+0xd>
     bec:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <mb+0xc>
     bf0:	60 91 0d 03 	lds	r22, 0x030D	; 0x80030d <mb+0xc>
     bf4:	70 91 0e 03 	lds	r23, 0x030E	; 0x80030e <mb+0xd>
     bf8:	8b ea       	ldi	r24, 0xAB	; 171
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	79 d4       	rcall	.+2290   	; 0x14f0 <_ZN5Motor11SetOcrValueEi>
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	9f 90       	pop	r9
     c14:	8f 90       	pop	r8
     c16:	08 95       	ret

00000c18 <_Z12setTuningsM3v>:
     c18:	8f 92       	push	r8
     c1a:	9f 92       	push	r9
     c1c:	af 92       	push	r10
     c1e:	bf 92       	push	r11
     c20:	cf 92       	push	r12
     c22:	df 92       	push	r13
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	00 91 b7 02 	lds	r16, 0x02B7	; 0x8002b7 <e3+0x2>
     c34:	10 91 b8 02 	lds	r17, 0x02B8	; 0x8002b8 <e3+0x3>
     c38:	c3 ef       	ldi	r28, 0xF3	; 243
     c3a:	d2 e0       	ldi	r29, 0x02	; 2
     c3c:	19 83       	std	Y+1, r17	; 0x01
     c3e:	08 83       	st	Y, r16
     c40:	60 91 e1 03 	lds	r22, 0x03E1	; 0x8003e1 <SETPOINT3>
     c44:	70 91 e2 03 	lds	r23, 0x03E2	; 0x8003e2 <SETPOINT3+0x1>
     c48:	60 1b       	sub	r22, r16
     c4a:	71 0b       	sbc	r23, r17
     c4c:	7d 83       	std	Y+5, r23	; 0x05
     c4e:	6c 83       	std	Y+4, r22	; 0x04
     c50:	07 2e       	mov	r0, r23
     c52:	00 0c       	add	r0, r0
     c54:	88 0b       	sbc	r24, r24
     c56:	99 0b       	sbc	r25, r25
     c58:	c1 d7       	rcall	.+3970   	; 0x1bdc <__floatsisf>
     c5a:	4b 01       	movw	r8, r22
     c5c:	5c 01       	movw	r10, r24
     c5e:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <ki>
     c62:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <ki+0x1>
     c66:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <ki+0x2>
     c6a:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <ki+0x3>
     c6e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     c72:	2e 81       	ldd	r18, Y+6	; 0x06
     c74:	3f 81       	ldd	r19, Y+7	; 0x07
     c76:	48 85       	ldd	r20, Y+8	; 0x08
     c78:	59 85       	ldd	r21, Y+9	; 0x09
     c7a:	b1 d6       	rcall	.+3426   	; 0x19de <__addsf3>
     c7c:	6b 01       	movw	r12, r22
     c7e:	7c 01       	movw	r14, r24
     c80:	6e 83       	std	Y+6, r22	; 0x06
     c82:	7f 83       	std	Y+7, r23	; 0x07
     c84:	88 87       	std	Y+8, r24	; 0x08
     c86:	99 87       	std	Y+9, r25	; 0x09
     c88:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <kp>
     c8c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <kp+0x1>
     c90:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <kp+0x2>
     c94:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <kp+0x3>
     c98:	c5 01       	movw	r24, r10
     c9a:	b4 01       	movw	r22, r8
     c9c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     ca0:	a7 01       	movw	r20, r14
     ca2:	96 01       	movw	r18, r12
     ca4:	9c d6       	rcall	.+3384   	; 0x19de <__addsf3>
     ca6:	6b 01       	movw	r12, r22
     ca8:	7c 01       	movw	r14, r24
     caa:	8a 85       	ldd	r24, Y+10	; 0x0a
     cac:	9b 85       	ldd	r25, Y+11	; 0x0b
     cae:	b8 01       	movw	r22, r16
     cb0:	68 1b       	sub	r22, r24
     cb2:	79 0b       	sbc	r23, r25
     cb4:	07 2e       	mov	r0, r23
     cb6:	00 0c       	add	r0, r0
     cb8:	88 0b       	sbc	r24, r24
     cba:	99 0b       	sbc	r25, r25
     cbc:	8f d7       	rcall	.+3870   	; 0x1bdc <__floatsisf>
     cbe:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     cc2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     cc6:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__data_start+0x2>
     cca:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__data_start+0x3>
     cce:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__mulsf3>
     cd2:	9b 01       	movw	r18, r22
     cd4:	ac 01       	movw	r20, r24
     cd6:	c7 01       	movw	r24, r14
     cd8:	b6 01       	movw	r22, r12
     cda:	80 d6       	rcall	.+3328   	; 0x19dc <__subsf3>
     cdc:	4c d7       	rcall	.+3736   	; 0x1b76 <__fixsfsi>
     cde:	7b 83       	std	Y+3, r23	; 0x03
     ce0:	6a 83       	std	Y+2, r22	; 0x02
     ce2:	1b 87       	std	Y+11, r17	; 0x0b
     ce4:	0a 87       	std	Y+10, r16	; 0x0a
     ce6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ce8:	3d 85       	ldd	r19, Y+13	; 0x0d
     cea:	62 0f       	add	r22, r18
     cec:	73 1f       	adc	r23, r19
     cee:	cb 01       	movw	r24, r22
     cf0:	77 23       	and	r23, r23
     cf2:	24 f4       	brge	.+8      	; 0xcfc <_Z12setTuningsM3v+0xe4>
     cf4:	88 27       	eor	r24, r24
     cf6:	99 27       	eor	r25, r25
     cf8:	86 1b       	sub	r24, r22
     cfa:	97 0b       	sbc	r25, r23
     cfc:	8a 3f       	cpi	r24, 0xFA	; 250
     cfe:	91 05       	cpc	r25, r1
     d00:	2c f4       	brge	.+10     	; 0xd0c <_Z12setTuningsM3v+0xf4>
     d02:	70 93 00 03 	sts	0x0300, r23	; 0x800300 <mc+0xd>
     d06:	60 93 ff 02 	sts	0x02FF, r22	; 0x8002ff <mc+0xc>
     d0a:	10 c0       	rjmp	.+32     	; 0xd2c <_Z12setTuningsM3v+0x114>
     d0c:	16 16       	cp	r1, r22
     d0e:	17 06       	cpc	r1, r23
     d10:	3c f4       	brge	.+14     	; 0xd20 <_Z12setTuningsM3v+0x108>
     d12:	89 ef       	ldi	r24, 0xF9	; 249
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <mc+0xd>
     d1a:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <mc+0xc>
     d1e:	06 c0       	rjmp	.+12     	; 0xd2c <_Z12setTuningsM3v+0x114>
     d20:	87 e0       	ldi	r24, 0x07	; 7
     d22:	9f ef       	ldi	r25, 0xFF	; 255
     d24:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <mc+0xd>
     d28:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <mc+0xc>
     d2c:	60 91 ff 02 	lds	r22, 0x02FF	; 0x8002ff <mc+0xc>
     d30:	70 91 00 03 	lds	r23, 0x0300	; 0x800300 <mc+0xd>
     d34:	8a ea       	ldi	r24, 0xAA	; 170
     d36:	92 e0       	ldi	r25, 0x02	; 2
     d38:	db d3       	rcall	.+1974   	; 0x14f0 <_ZN5Motor11SetOcrValueEi>
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	bf 90       	pop	r11
     d4c:	af 90       	pop	r10
     d4e:	9f 90       	pop	r9
     d50:	8f 90       	pop	r8
     d52:	08 95       	ret

00000d54 <_Z12setTuningsM4v>:
     d54:	8f 92       	push	r8
     d56:	9f 92       	push	r9
     d58:	af 92       	push	r10
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	00 91 af 02 	lds	r16, 0x02AF	; 0x8002af <e4+0x2>
     d70:	10 91 b0 02 	lds	r17, 0x02B0	; 0x8002b0 <e4+0x3>
     d74:	c5 ee       	ldi	r28, 0xE5	; 229
     d76:	d2 e0       	ldi	r29, 0x02	; 2
     d78:	19 83       	std	Y+1, r17	; 0x01
     d7a:	08 83       	st	Y, r16
     d7c:	60 91 df 03 	lds	r22, 0x03DF	; 0x8003df <SETPOINT4>
     d80:	70 91 e0 03 	lds	r23, 0x03E0	; 0x8003e0 <SETPOINT4+0x1>
     d84:	60 1b       	sub	r22, r16
     d86:	71 0b       	sbc	r23, r17
     d88:	7d 83       	std	Y+5, r23	; 0x05
     d8a:	6c 83       	std	Y+4, r22	; 0x04
     d8c:	07 2e       	mov	r0, r23
     d8e:	00 0c       	add	r0, r0
     d90:	88 0b       	sbc	r24, r24
     d92:	99 0b       	sbc	r25, r25
     d94:	23 d7       	rcall	.+3654   	; 0x1bdc <__floatsisf>
     d96:	4b 01       	movw	r8, r22
     d98:	5c 01       	movw	r10, r24
     d9a:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <ki>
     d9e:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <ki+0x1>
     da2:	40 91 20 03 	lds	r20, 0x0320	; 0x800320 <ki+0x2>
     da6:	50 91 21 03 	lds	r21, 0x0321	; 0x800321 <ki+0x3>
     daa:	cc d7       	rcall	.+3992   	; 0x1d44 <__mulsf3>
     dac:	2e 81       	ldd	r18, Y+6	; 0x06
     dae:	3f 81       	ldd	r19, Y+7	; 0x07
     db0:	48 85       	ldd	r20, Y+8	; 0x08
     db2:	59 85       	ldd	r21, Y+9	; 0x09
     db4:	14 d6       	rcall	.+3112   	; 0x19de <__addsf3>
     db6:	6b 01       	movw	r12, r22
     db8:	7c 01       	movw	r14, r24
     dba:	6e 83       	std	Y+6, r22	; 0x06
     dbc:	7f 83       	std	Y+7, r23	; 0x07
     dbe:	88 87       	std	Y+8, r24	; 0x08
     dc0:	99 87       	std	Y+9, r25	; 0x09
     dc2:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <kp>
     dc6:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <kp+0x1>
     dca:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <kp+0x2>
     dce:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <kp+0x3>
     dd2:	c5 01       	movw	r24, r10
     dd4:	b4 01       	movw	r22, r8
     dd6:	b6 d7       	rcall	.+3948   	; 0x1d44 <__mulsf3>
     dd8:	a7 01       	movw	r20, r14
     dda:	96 01       	movw	r18, r12
     ddc:	00 d6       	rcall	.+3072   	; 0x19de <__addsf3>
     dde:	6b 01       	movw	r12, r22
     de0:	7c 01       	movw	r14, r24
     de2:	8a 85       	ldd	r24, Y+10	; 0x0a
     de4:	9b 85       	ldd	r25, Y+11	; 0x0b
     de6:	b8 01       	movw	r22, r16
     de8:	68 1b       	sub	r22, r24
     dea:	79 0b       	sbc	r23, r25
     dec:	07 2e       	mov	r0, r23
     dee:	00 0c       	add	r0, r0
     df0:	88 0b       	sbc	r24, r24
     df2:	99 0b       	sbc	r25, r25
     df4:	f3 d6       	rcall	.+3558   	; 0x1bdc <__floatsisf>
     df6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
     dfa:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
     dfe:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__data_start+0x2>
     e02:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__data_start+0x3>
     e06:	9e d7       	rcall	.+3900   	; 0x1d44 <__mulsf3>
     e08:	9b 01       	movw	r18, r22
     e0a:	ac 01       	movw	r20, r24
     e0c:	c7 01       	movw	r24, r14
     e0e:	b6 01       	movw	r22, r12
     e10:	e5 d5       	rcall	.+3018   	; 0x19dc <__subsf3>
     e12:	b1 d6       	rcall	.+3426   	; 0x1b76 <__fixsfsi>
     e14:	7b 83       	std	Y+3, r23	; 0x03
     e16:	6a 83       	std	Y+2, r22	; 0x02
     e18:	1b 87       	std	Y+11, r17	; 0x0b
     e1a:	0a 87       	std	Y+10, r16	; 0x0a
     e1c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e1e:	3d 85       	ldd	r19, Y+13	; 0x0d
     e20:	62 0f       	add	r22, r18
     e22:	73 1f       	adc	r23, r19
     e24:	cb 01       	movw	r24, r22
     e26:	77 23       	and	r23, r23
     e28:	24 f4       	brge	.+8      	; 0xe32 <_Z12setTuningsM4v+0xde>
     e2a:	88 27       	eor	r24, r24
     e2c:	99 27       	eor	r25, r25
     e2e:	86 1b       	sub	r24, r22
     e30:	97 0b       	sbc	r25, r23
     e32:	8a 3f       	cpi	r24, 0xFA	; 250
     e34:	91 05       	cpc	r25, r1
     e36:	2c f4       	brge	.+10     	; 0xe42 <_Z12setTuningsM4v+0xee>
     e38:	70 93 f2 02 	sts	0x02F2, r23	; 0x8002f2 <md+0xd>
     e3c:	60 93 f1 02 	sts	0x02F1, r22	; 0x8002f1 <md+0xc>
     e40:	10 c0       	rjmp	.+32     	; 0xe62 <_Z12setTuningsM4v+0x10e>
     e42:	16 16       	cp	r1, r22
     e44:	17 06       	cpc	r1, r23
     e46:	3c f4       	brge	.+14     	; 0xe56 <_Z12setTuningsM4v+0x102>
     e48:	89 ef       	ldi	r24, 0xF9	; 249
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <md+0xd>
     e50:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <md+0xc>
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <_Z12setTuningsM4v+0x10e>
     e56:	87 e0       	ldi	r24, 0x07	; 7
     e58:	9f ef       	ldi	r25, 0xFF	; 255
     e5a:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <md+0xd>
     e5e:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <md+0xc>
     e62:	60 91 f1 02 	lds	r22, 0x02F1	; 0x8002f1 <md+0xc>
     e66:	70 91 f2 02 	lds	r23, 0x02F2	; 0x8002f2 <md+0xd>
     e6a:	89 ea       	ldi	r24, 0xA9	; 169
     e6c:	92 e0       	ldi	r25, 0x02	; 2
     e6e:	40 d3       	rcall	.+1664   	; 0x14f0 <_ZN5Motor11SetOcrValueEi>
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	cf 90       	pop	r12
     e80:	bf 90       	pop	r11
     e82:	af 90       	pop	r10
     e84:	9f 90       	pop	r9
     e86:	8f 90       	pop	r8
     e88:	08 95       	ret

00000e8a <_Z10computePidv>:
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <MotorPidFlag>
     e92:	88 23       	and	r24, r24
     e94:	59 f0       	breq	.+22     	; 0xeac <_Z10computePidv+0x22>
     e96:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <PidUpdateFlagMotor>
     e9a:	88 23       	and	r24, r24
     e9c:	49 f1       	breq	.+82     	; 0xef0 <_Z10computePidv+0x66>
     e9e:	7b dd       	rcall	.-1290   	; 0x996 <_Z12setTuningsM1v>
     ea0:	1b de       	rcall	.-970    	; 0xad8 <_Z12setTuningsM2v>
     ea2:	ba de       	rcall	.-652    	; 0xc18 <_Z12setTuningsM3v>
     ea4:	57 df       	rcall	.-338    	; 0xd54 <_Z12setTuningsM4v>
     ea6:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <PidUpdateFlagMotor>
     eaa:	22 c0       	rjmp	.+68     	; 0xef0 <_Z10computePidv+0x66>
     eac:	cf ec       	ldi	r28, 0xCF	; 207
     eae:	d3 e0       	ldi	r29, 0x03	; 3
     eb0:	68 81       	ld	r22, Y
     eb2:	79 81       	ldd	r23, Y+1	; 0x01
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	9b 81       	ldd	r25, Y+3	; 0x03
     eb8:	5e d6       	rcall	.+3260   	; 0x1b76 <__fixsfsi>
     eba:	8c ea       	ldi	r24, 0xAC	; 172
     ebc:	92 e0       	ldi	r25, 0x02	; 2
     ebe:	18 d3       	rcall	.+1584   	; 0x14f0 <_ZN5Motor11SetOcrValueEi>
     ec0:	6c 81       	ldd	r22, Y+4	; 0x04
     ec2:	7d 81       	ldd	r23, Y+5	; 0x05
     ec4:	8e 81       	ldd	r24, Y+6	; 0x06
     ec6:	9f 81       	ldd	r25, Y+7	; 0x07
     ec8:	56 d6       	rcall	.+3244   	; 0x1b76 <__fixsfsi>
     eca:	8b ea       	ldi	r24, 0xAB	; 171
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	10 d3       	rcall	.+1568   	; 0x14f0 <_ZN5Motor11SetOcrValueEi>
     ed0:	68 85       	ldd	r22, Y+8	; 0x08
     ed2:	79 85       	ldd	r23, Y+9	; 0x09
     ed4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ed6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ed8:	4e d6       	rcall	.+3228   	; 0x1b76 <__fixsfsi>
     eda:	8a ea       	ldi	r24, 0xAA	; 170
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	08 d3       	rcall	.+1552   	; 0x14f0 <_ZN5Motor11SetOcrValueEi>
     ee0:	6c 85       	ldd	r22, Y+12	; 0x0c
     ee2:	7d 85       	ldd	r23, Y+13	; 0x0d
     ee4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ee6:	9f 85       	ldd	r25, Y+15	; 0x0f
     ee8:	46 d6       	rcall	.+3212   	; 0x1b76 <__fixsfsi>
     eea:	89 ea       	ldi	r24, 0xA9	; 169
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	00 d3       	rcall	.+1536   	; 0x14f0 <_ZN5Motor11SetOcrValueEi>
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <__vector_9>:
}



ISR(PCINT0_vect)	//junction X
{
     ef6:	1f 92       	push	r1
     ef8:	0f 92       	push	r0
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	0f 92       	push	r0
     efe:	11 24       	eor	r1, r1
     f00:	8f 93       	push	r24
	if(!task1)
     f02:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <task1>
     f06:	81 11       	cpse	r24, r1
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <__vector_9+0x1c>
		task1 = true;		//reached to corner of loading zone
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <task1>
     f10:	07 c0       	rjmp	.+14     	; 0xf20 <__vector_9+0x2a>
	else if(!task5)
     f12:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <task5>
     f16:	81 11       	cpse	r24, r1
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <__vector_9+0x2a>
		task5 = true;		//reached loading zone 2 from loading zone 1
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <task5>
}
     f20:	8f 91       	pop	r24
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <__vector_11>:
ISR(PCINT2_vect)
{
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	8f 93       	push	r24
	if(!task2)
     f38:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <task2>
     f3c:	81 11       	cpse	r24, r1
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <__vector_11+0x1c>
		task2 = true;		//reached to loading zone 1
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <task2>
     f46:	27 c0       	rjmp	.+78     	; 0xf96 <__vector_11+0x6a>
	else if(!task3)
     f48:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <task3>
     f4c:	81 11       	cpse	r24, r1
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <__vector_11+0x2c>
		task3 = true;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <task3>
     f56:	1f c0       	rjmp	.+62     	; 0xf96 <__vector_11+0x6a>
	else if(!task4)
     f58:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <task4>
     f5c:	81 11       	cpse	r24, r1
     f5e:	04 c0       	rjmp	.+8      	; 0xf68 <__vector_11+0x3c>
		task4 = true;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <task4>
     f66:	17 c0       	rjmp	.+46     	; 0xf96 <__vector_11+0x6a>
	else if(!task6)
     f68:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <task6>
     f6c:	81 11       	cpse	r24, r1
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <__vector_11+0x4c>
		task6 = true;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <task6>
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <__vector_11+0x6a>
	else if(!task7)
     f78:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <task7>
     f7c:	81 11       	cpse	r24, r1
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <__vector_11+0x5c>
		task7 = true;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <task7>
     f86:	07 c0       	rjmp	.+14     	; 0xf96 <__vector_11+0x6a>
	else if(!task8)
     f88:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <task8>
     f8c:	81 11       	cpse	r24, r1
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <__vector_11+0x6a>
		task8 = true;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <task8>
}
     f96:	8f 91       	pop	r24
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti

00000fa2 <main>:

volatile int svalue =0;

int main(void)
{
	sei();
     fa2:	78 94       	sei
		ki = i;
		kd = d;
	}
	void Set_Max_Min_Output (int Max_dum, int Min_dum)
	{
		Max_output = Max_dum;
     fa4:	e4 e6       	ldi	r30, 0x64	; 100
     fa6:	f3 e0       	ldi	r31, 0x03	; 3
     fa8:	86 e9       	ldi	r24, 0x96	; 150
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	92 8b       	std	Z+18, r25	; 0x12
     fae:	81 8b       	std	Z+17, r24	; 0x11
		Min_output = Min_dum;
     fb0:	14 8a       	std	Z+20, r1	; 0x14
     fb2:	13 8a       	std	Z+19, r1	; 0x13
	compass.Set_Max_Min_Output(150,0);
	uart0_init(UART_BAUD_SELECT(UART0BAUD,F_CPU));
     fb4:	87 e6       	ldi	r24, 0x67	; 103
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	34 d3       	rcall	.+1640   	; 0x1622 <_Z10uart0_initj>
	uart2_init(UART_BAUD_SELECT(UART2BAUD,F_CPU));
     fba:	87 e6       	ldi	r24, 0x67	; 103
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	f2 d3       	rcall	.+2020   	; 0x17a4 <_Z10uart2_initj>
	uart3_init(UART_BAUD_SELECT(UART3BAUD,F_CPU));
     fc0:	87 e6       	ldi	r24, 0x67	; 103
     fc2:	90 e0       	ldi	r25, 0x00	; 0
	//ltSensorX.initialise();
	//ltSensorY.initialise();
	initializeData();
     fc4:	8c d4       	rcall	.+2328   	; 0x18de <_Z10uart3_initj>
     fc6:	58 dc       	rcall	.-1872   	; 0x878 <_Z14initializeDatav>
		{
			Compass_angle = 2*uart2_getc();
		}
		
		calculateCompassPID();
		velocity_robot[0] = 0;
     fc8:	09 ec       	ldi	r16, 0xC9	; 201
				svalue--;
				break;
			}
			
			uart3_puts("KP : ");
			uart3_putint(compass.kp*10);
     fca:	13 e0       	ldi	r17, 0x03	; 3
	//ltSensorX.initialise();
	//ltSensorY.initialise();
	initializeData();
	while (1)
	{
		if(uart2_available())
     fcc:	c4 e6       	ldi	r28, 0x64	; 100
     fce:	d3 e0       	ldi	r29, 0x03	; 3
     fd0:	1d d4       	rcall	.+2106   	; 0x180c <_Z15uart2_availablev>
     fd2:	89 2b       	or	r24, r25
		{
			Compass_angle = 2*uart2_getc();
     fd4:	39 f0       	breq	.+14     	; 0xfe4 <main+0x42>
     fd6:	ff d3       	rcall	.+2046   	; 0x17d6 <_Z10uart2_getcv>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <Compass_angle+0x1>
     fe0:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <Compass_angle>
		}
		
		calculateCompassPID();
		velocity_robot[0] = 0;
     fe4:	19 da       	rcall	.-3022   	; 0x418 <_Z19calculateCompassPIDv>
     fe6:	f8 01       	movw	r30, r16
		velocity_robot[1] = 0;
     fe8:	11 82       	std	Z+1, r1	; 0x01
     fea:	10 82       	st	Z, r1
		calculatevel();
     fec:	13 82       	std	Z+3, r1	; 0x03
     fee:	12 82       	std	Z+2, r1	; 0x02
		computePid();
     ff0:	56 db       	rcall	.-2388   	; 0x69e <_Z12calculatevelv>
     ff2:	4b df       	rcall	.-362    	; 0xe8a <_Z10computePidv>
		
		rcvdata = uart3_getc();
     ff4:	8d d4       	rcall	.+2330   	; 0x1910 <_Z10uart3_getcv>
     ff6:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <rcvdata>
     ffa:	88 23       	and	r24, r24
		
		if (rcvdata != '\0')
     ffc:	09 f4       	brne	.+2      	; 0x1000 <main+0x5e>
     ffe:	cf c0       	rjmp	.+414    	; 0x119e <main+0x1fc>
    1000:	90 e0       	ldi	r25, 0x00	; 0
		{
			
			switch(rcvdata)
    1002:	fc 01       	movw	r30, r24
    1004:	e3 56       	subi	r30, 0x63	; 99
    1006:	f1 09       	sbc	r31, r1
    1008:	e4 31       	cpi	r30, 0x14	; 20
    100a:	f1 05       	cpc	r31, r1
    100c:	08 f0       	brcs	.+2      	; 0x1010 <main+0x6e>
    100e:	82 c0       	rjmp	.+260    	; 0x1114 <main+0x172>
    1010:	88 27       	eor	r24, r24
    1012:	ee 58       	subi	r30, 0x8E	; 142
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	8f 4f       	sbci	r24, 0xFF	; 255
    1018:	0b c7       	rjmp	.+3606   	; 0x1e30 <__tablejump2__>
	}
	inline void incrkp(){kp += 0.1;}
    101a:	2d ec       	ldi	r18, 0xCD	; 205
    101c:	3c ec       	ldi	r19, 0xCC	; 204
    101e:	4c ec       	ldi	r20, 0xCC	; 204
    1020:	5d e3       	ldi	r21, 0x3D	; 61
    1022:	6d 89       	ldd	r22, Y+21	; 0x15
    1024:	7e 89       	ldd	r23, Y+22	; 0x16
    1026:	8f 89       	ldd	r24, Y+23	; 0x17
    1028:	98 8d       	ldd	r25, Y+24	; 0x18
    102a:	d9 d4       	rcall	.+2482   	; 0x19de <__addsf3>
    102c:	6d 8b       	std	Y+21, r22	; 0x15
    102e:	7e 8b       	std	Y+22, r23	; 0x16
    1030:	8f 8b       	std	Y+23, r24	; 0x17
    1032:	98 8f       	std	Y+24, r25	; 0x18
    1034:	6f c0       	rjmp	.+222    	; 0x1114 <main+0x172>
	inline void dcrkp(){kp -= 0.1;}
    1036:	2d ec       	ldi	r18, 0xCD	; 205
    1038:	3c ec       	ldi	r19, 0xCC	; 204
    103a:	4c ec       	ldi	r20, 0xCC	; 204
    103c:	5d e3       	ldi	r21, 0x3D	; 61
    103e:	6d 89       	ldd	r22, Y+21	; 0x15
    1040:	7e 89       	ldd	r23, Y+22	; 0x16
    1042:	8f 89       	ldd	r24, Y+23	; 0x17
    1044:	98 8d       	ldd	r25, Y+24	; 0x18
    1046:	ca d4       	rcall	.+2452   	; 0x19dc <__subsf3>
    1048:	6d 8b       	std	Y+21, r22	; 0x15
    104a:	7e 8b       	std	Y+22, r23	; 0x16
    104c:	8f 8b       	std	Y+23, r24	; 0x17
    104e:	98 8f       	std	Y+24, r25	; 0x18
    1050:	61 c0       	rjmp	.+194    	; 0x1114 <main+0x172>
	inline void incrki(){ki += 0.01;}
    1052:	2a e0       	ldi	r18, 0x0A	; 10
    1054:	37 ed       	ldi	r19, 0xD7	; 215
    1056:	43 e2       	ldi	r20, 0x23	; 35
    1058:	5c e3       	ldi	r21, 0x3C	; 60
    105a:	69 8d       	ldd	r22, Y+25	; 0x19
    105c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1062:	bd d4       	rcall	.+2426   	; 0x19de <__addsf3>
    1064:	69 8f       	std	Y+25, r22	; 0x19
    1066:	7a 8f       	std	Y+26, r23	; 0x1a
    1068:	8b 8f       	std	Y+27, r24	; 0x1b
    106a:	9c 8f       	std	Y+28, r25	; 0x1c
    106c:	53 c0       	rjmp	.+166    	; 0x1114 <main+0x172>
	inline void dcrki(){ki -= 0.01;}
    106e:	2a e0       	ldi	r18, 0x0A	; 10
    1070:	37 ed       	ldi	r19, 0xD7	; 215
    1072:	43 e2       	ldi	r20, 0x23	; 35
    1074:	5c e3       	ldi	r21, 0x3C	; 60
    1076:	69 8d       	ldd	r22, Y+25	; 0x19
    1078:	7a 8d       	ldd	r23, Y+26	; 0x1a
    107a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    107c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    107e:	ae d4       	rcall	.+2396   	; 0x19dc <__subsf3>
    1080:	69 8f       	std	Y+25, r22	; 0x19
    1082:	7a 8f       	std	Y+26, r23	; 0x1a
    1084:	8b 8f       	std	Y+27, r24	; 0x1b
    1086:	9c 8f       	std	Y+28, r25	; 0x1c
    1088:	45 c0       	rjmp	.+138    	; 0x1114 <main+0x172>
	inline void incrkd(){kd += 0.5;}
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	5f e3       	ldi	r21, 0x3F	; 63
    1092:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1094:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1096:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1098:	98 a1       	ldd	r25, Y+32	; 0x20
    109a:	a1 d4       	rcall	.+2370   	; 0x19de <__addsf3>
    109c:	6d 8f       	std	Y+29, r22	; 0x1d
    109e:	7e 8f       	std	Y+30, r23	; 0x1e
    10a0:	8f 8f       	std	Y+31, r24	; 0x1f
    10a2:	98 a3       	std	Y+32, r25	; 0x20
    10a4:	37 c0       	rjmp	.+110    	; 0x1114 <main+0x172>
	inline void dcrkd(){kd -= 0.5;}
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	6d 8d       	ldd	r22, Y+29	; 0x1d
    10b0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    10b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10b4:	98 a1       	ldd	r25, Y+32	; 0x20
    10b6:	92 d4       	rcall	.+2340   	; 0x19dc <__subsf3>
    10b8:	6d 8f       	std	Y+29, r22	; 0x1d
    10ba:	7e 8f       	std	Y+30, r23	; 0x1e
    10bc:	8f 8f       	std	Y+31, r24	; 0x1f
    10be:	98 a3       	std	Y+32, r25	; 0x20
    10c0:	29 c0       	rjmp	.+82     	; 0x1114 <main+0x172>
    10c2:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
	inline void incrSetpoint(){SETPOINT += svalue;}
    10c6:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <__data_end+0x1>
    10ca:	2e 85       	ldd	r18, Y+14	; 0x0e
    10cc:	3f 85       	ldd	r19, Y+15	; 0x0f
    10ce:	82 0f       	add	r24, r18
    10d0:	93 1f       	adc	r25, r19
    10d2:	9f 87       	std	Y+15, r25	; 0x0f
    10d4:	8e 87       	std	Y+14, r24	; 0x0e
    10d6:	1e c0       	rjmp	.+60     	; 0x1114 <main+0x172>
    10d8:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <__data_end>
	inline void dcrSetpoint(){SETPOINT -= svalue;}
    10dc:	30 91 99 02 	lds	r19, 0x0299	; 0x800299 <__data_end+0x1>
    10e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    10e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    10e4:	82 1b       	sub	r24, r18
    10e6:	93 0b       	sbc	r25, r19
    10e8:	9f 87       	std	Y+15, r25	; 0x0f
    10ea:	8e 87       	std	Y+14, r24	; 0x0e
    10ec:	13 c0       	rjmp	.+38     	; 0x1114 <main+0x172>
    10ee:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
				break;
				case 'g':
				compass.dcrSetpoint();
				break;
				case 'v':
				svalue++;
    10f2:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <__data_end+0x1>
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <__data_end+0x1>
    10fc:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
				break;
    1100:	09 c0       	rjmp	.+18     	; 0x1114 <main+0x172>
				case 'c':
				svalue--;
    1102:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
    1106:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <__data_end+0x1>
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <__data_end+0x1>
				break;
			}
			
			uart3_puts("KP : ");
    1110:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
			uart3_putint(compass.kp*10);
    1114:	80 e6       	ldi	r24, 0x60	; 96
    1116:	92 e0       	ldi	r25, 0x02	; 2
    1118:	53 d4       	rcall	.+2214   	; 0x19c0 <_Z10uart3_putsPKc>
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e2       	ldi	r20, 0x20	; 32
    1120:	51 e4       	ldi	r21, 0x41	; 65
    1122:	6d 89       	ldd	r22, Y+21	; 0x15
    1124:	7e 89       	ldd	r23, Y+22	; 0x16
    1126:	8f 89       	ldd	r24, Y+23	; 0x17
    1128:	98 8d       	ldd	r25, Y+24	; 0x18
			uart3_puts("\t KD : ");
    112a:	0c d6       	rcall	.+3096   	; 0x1d44 <__mulsf3>
    112c:	24 d5       	rcall	.+2632   	; 0x1b76 <__fixsfsi>
    112e:	cb 01       	movw	r24, r22
    1130:	1f d4       	rcall	.+2110   	; 0x1970 <_Z12uart3_putinti>
			uart3_putint(compass.kd*10);
    1132:	86 e6       	ldi	r24, 0x66	; 102
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	44 d4       	rcall	.+2184   	; 0x19c0 <_Z10uart3_putsPKc>
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1142:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1144:	8f 8d       	ldd	r24, Y+31	; 0x1f
			uart3_puts("\t KI : ");
    1146:	98 a1       	ldd	r25, Y+32	; 0x20
    1148:	fd d5       	rcall	.+3066   	; 0x1d44 <__mulsf3>
    114a:	15 d5       	rcall	.+2602   	; 0x1b76 <__fixsfsi>
			uart3_putint(compass.ki*100);
    114c:	cb 01       	movw	r24, r22
    114e:	10 d4       	rcall	.+2080   	; 0x1970 <_Z12uart3_putinti>
    1150:	8e e6       	ldi	r24, 0x6E	; 110
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	35 d4       	rcall	.+2154   	; 0x19c0 <_Z10uart3_putsPKc>
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	48 ec       	ldi	r20, 0xC8	; 200
    115c:	52 e4       	ldi	r21, 0x42	; 66
    115e:	69 8d       	ldd	r22, Y+25	; 0x19
    1160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1162:	8b 8d       	ldd	r24, Y+27	; 0x1b
			uart3_puts("\t SP : ");
    1164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1166:	ee d5       	rcall	.+3036   	; 0x1d44 <__mulsf3>
    1168:	06 d5       	rcall	.+2572   	; 0x1b76 <__fixsfsi>
			uart3_putint(compass.SETPOINT);
    116a:	cb 01       	movw	r24, r22
    116c:	01 d4       	rcall	.+2050   	; 0x1970 <_Z12uart3_putinti>
    116e:	86 e7       	ldi	r24, 0x76	; 118
			uart3_puts("\t Angle : ");
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	26 d4       	rcall	.+2124   	; 0x19c0 <_Z10uart3_putsPKc>
    1174:	8e 85       	ldd	r24, Y+14	; 0x0e
			uart3_putint(Compass_angle);
    1176:	9f 85       	ldd	r25, Y+15	; 0x0f
    1178:	fb d3       	rcall	.+2038   	; 0x1970 <_Z12uart3_putinti>
    117a:	8e e7       	ldi	r24, 0x7E	; 126
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	20 d4       	rcall	.+2112   	; 0x19c0 <_Z10uart3_putsPKc>
    1180:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <Compass_angle>
			uart3_puts("\t Out : ");
    1184:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <Compass_angle+0x1>
    1188:	f3 d3       	rcall	.+2022   	; 0x1970 <_Z12uart3_putinti>
			uart3_putint(velocity_robot[2]);
    118a:	89 e8       	ldi	r24, 0x89	; 137
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	18 d4       	rcall	.+2096   	; 0x19c0 <_Z10uart3_putsPKc>
    1190:	f8 01       	movw	r30, r16
    1192:	84 81       	ldd	r24, Z+4	; 0x04
			uart3_puts("\r\n");
    1194:	95 81       	ldd	r25, Z+5	; 0x05
    1196:	ec d3       	rcall	.+2008   	; 0x1970 <_Z12uart3_putinti>
    1198:	82 e9       	ldi	r24, 0x92	; 146
    119a:	92 e0       	ldi	r25, 0x02	; 2
		}
		
		uart0_putint(compass.SETPOINT);
    119c:	11 d4       	rcall	.+2082   	; 0x19c0 <_Z10uart3_putsPKc>
    119e:	8e 85       	ldd	r24, Y+14	; 0x0e
    11a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    11a2:	6d d2       	rcall	.+1242   	; 0x167e <_Z12uart0_putinti>
		uart0_puts("\t");
    11a4:	85 e9       	ldi	r24, 0x95	; 149
    11a6:	92 e0       	ldi	r25, 0x02	; 2
    11a8:	92 d2       	rcall	.+1316   	; 0x16ce <_Z10uart0_putsPKc>
    11aa:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <Compass_angle>
		uart0_putint(Compass_angle);
    11ae:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <Compass_angle+0x1>
    11b2:	65 d2       	rcall	.+1226   	; 0x167e <_Z12uart0_putinti>
    11b4:	82 e9       	ldi	r24, 0x92	; 146
    11b6:	92 e0       	ldi	r25, 0x02	; 2
		uart0_puts("\r\n");
    11b8:	8a d2       	rcall	.+1300   	; 0x16ce <_Z10uart0_putsPKc>
    11ba:	0a cf       	rjmp	.-492    	; 0xfd0 <main+0x2e>

000011bc <_GLOBAL__sub_I_MotorPidFlag>:
    11bc:	e6 ea       	ldi	r30, 0xA6	; 166
    11be:	f3 e0       	ldi	r31, 0x03	; 3
	uart2_init(UART_BAUD_SELECT(UART2BAUD,F_CPU));
	uart3_init(UART_BAUD_SELECT(UART3BAUD,F_CPU));
	//ltSensorX.initialise();
	//ltSensorY.initialise();
	initializeData();
	while (1)
    11c0:	10 86       	std	Z+8, r1	; 0x08
};
////////////////////////////////////////////////////////////////////////////////


struct bodyPid{ 
	bodyPid():FirstData(true){};
    11c2:	11 86       	std	Z+9, r1	; 0x09
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 8b       	std	Z+16, r24	; 0x10
    11c8:	e5 e8       	ldi	r30, 0x85	; 133
    11ca:	f3 e0       	ldi	r31, 0x03	; 3
    11cc:	10 86       	std	Z+8, r1	; 0x08
    11ce:	11 86       	std	Z+9, r1	; 0x09
    11d0:	80 8b       	std	Z+16, r24	; 0x10
    11d2:	e4 e6       	ldi	r30, 0x64	; 100
    11d4:	f3 e0       	ldi	r31, 0x03	; 3
    11d6:	10 86       	std	Z+8, r1	; 0x08
    11d8:	11 86       	std	Z+9, r1	; 0x09
    11da:	80 8b       	std	Z+16, r24	; 0x10
    11dc:	e3 e4       	ldi	r30, 0x43	; 67
    11de:	f3 e0       	ldi	r31, 0x03	; 3
    11e0:	10 86       	std	Z+8, r1	; 0x08
    11e2:	11 86       	std	Z+9, r1	; 0x09
    11e4:	80 8b       	std	Z+16, r24	; 0x10
    11e6:	e2 e2       	ldi	r30, 0x22	; 34
    11e8:	f3 e0       	ldi	r31, 0x03	; 3
    11ea:	10 86       	std	Z+8, r1	; 0x08
    11ec:	11 86       	std	Z+9, r1	; 0x09
    11ee:	80 8b       	std	Z+16, r24	; 0x10
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    11f0:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <encoderX+0x1>
    11f4:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <encoderX>
			Init_encoder_interrupt();
    11f8:	85 ed       	ldi	r24, 0xD5	; 213
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    1200:	85 ed       	ldi	r24, 0xD5	; 213
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    1208:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <encoderY+0x1>
    120c:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <encoderY>
			Init_encoder_interrupt();
    1210:	8d ec       	ldi	r24, 0xCD	; 205
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    1218:	8d ec       	ldi	r24, 0xCD	; 205
    121a:	92 e0       	ldi	r25, 0x02	; 2
    121c:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    1220:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <e1+0x1>
    1224:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <e1>
			Init_encoder_interrupt();
    1228:	85 ec       	ldi	r24, 0xC5	; 197
    122a:	92 e0       	ldi	r25, 0x02	; 2
    122c:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    1230:	85 ec       	ldi	r24, 0xC5	; 197
    1232:	92 e0       	ldi	r25, 0x02	; 2
    1234:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    1238:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <e2+0x1>
    123c:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <e2>
			Init_encoder_interrupt();
    1240:	8d eb       	ldi	r24, 0xBD	; 189
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    1248:	8d eb       	ldi	r24, 0xBD	; 189
    124a:	92 e0       	ldi	r25, 0x02	; 2
    124c:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    1250:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <e3+0x1>
    1254:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <e3>
			Init_encoder_interrupt();
    1258:	85 eb       	ldi	r24, 0xB5	; 181
    125a:	92 e0       	ldi	r25, 0x02	; 2
    125c:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    1260:	85 eb       	ldi	r24, 0xB5	; 181
    1262:	92 e0       	ldi	r25, 0x02	; 2
    1264:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    1268:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <e4+0x1>
    126c:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <e4>
			Init_encoder_interrupt();
    1270:	8d ea       	ldi	r24, 0xAD	; 173
    1272:	92 e0       	ldi	r25, 0x02	; 2
    1274:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    1278:	8d ea       	ldi	r24, 0xAD	; 173
    127a:	92 e0       	ldi	r25, 0x02	; 2
    127c:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN7encoder10Init_timerEv>
#define UART2BAUD	9600
#define UART3BAUD	9600

/////////////	Objects //////////////////
encoder encoderX,encoderY,e1,e2,e3,e4;
Motor m1(1) , m2(2) , m3(3) , m4(4);
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	8c ea       	ldi	r24, 0xAC	; 172
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	b8 d8       	rcall	.-3728   	; 0x3f8 <_ZN5MotorC1Eh>
    1288:	62 e0       	ldi	r22, 0x02	; 2
    128a:	8b ea       	ldi	r24, 0xAB	; 171
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	b4 d8       	rcall	.-3736   	; 0x3f8 <_ZN5MotorC1Eh>
    1290:	63 e0       	ldi	r22, 0x03	; 3
    1292:	8a ea       	ldi	r24, 0xAA	; 170
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	b0 d8       	rcall	.-3744   	; 0x3f8 <_ZN5MotorC1Eh>
    1298:	64 e0       	ldi	r22, 0x04	; 4
    129a:	89 ea       	ldi	r24, 0xA9	; 169
    129c:	92 e0       	ldi	r25, 0x02	; 2
    129e:	ac d8       	rcall	.-3752   	; 0x3f8 <_ZN5MotorC1Eh>
Linetracker ltSensorX(1),ltSensorY(0);
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	82 ea       	ldi	r24, 0xA2	; 162
    12a6:	92 e0       	ldi	r25, 0x02	; 2
    12a8:	a1 d8       	rcall	.-3774   	; 0x3ec <_ZN11LinetrackerC1Ei>
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	8b e9       	ldi	r24, 0x9B	; 155
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	9c c8       	rjmp	.-3784   	; 0x3ec <_ZN11LinetrackerC1Ei>
    12b4:	08 95       	ret

000012b6 <_ZN5Motor7InitPWMEv>:
#include "uart.h"


void Motor::InitPWM()
{
	if (num==1)
    12b6:	fc 01       	movw	r30, r24
    12b8:	80 81       	ld	r24, Z
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	f1 f4       	brne	.+60     	; 0x12fa <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
    12be:	e7 e0       	ldi	r30, 0x07	; 7
    12c0:	f1 e0       	ldi	r31, 0x01	; 1
    12c2:	80 81       	ld	r24, Z
    12c4:	80 64       	ori	r24, 0x40	; 64
    12c6:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
    12c8:	80 81       	ld	r24, Z
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
    12ce:	ea e0       	ldi	r30, 0x0A	; 10
    12d0:	f1 e0       	ldi	r31, 0x01	; 1
    12d2:	80 81       	ld	r24, Z
    12d4:	80 62       	ori	r24, 0x20	; 32
    12d6:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
    12d8:	e0 e2       	ldi	r30, 0x20	; 32
    12da:	f1 e0       	ldi	r31, 0x01	; 1
    12dc:	80 81       	ld	r24, Z
    12de:	8a 60       	ori	r24, 0x0A	; 10
    12e0:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
    12e2:	e1 e2       	ldi	r30, 0x21	; 33
    12e4:	f1 e0       	ldi	r31, 0x01	; 1
    12e6:	80 81       	ld	r24, Z
    12e8:	8a 61       	ori	r24, 0x1A	; 26
    12ea:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
    12ec:	89 ef       	ldi	r24, 0xF9	; 249
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    12f4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    12f8:	08 95       	ret
	}
	else if(num==2)
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	f1 f4       	brne	.+60     	; 0x133a <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
    12fe:	e7 e0       	ldi	r30, 0x07	; 7
    1300:	f1 e0       	ldi	r31, 0x01	; 1
    1302:	80 81       	ld	r24, Z
    1304:	84 60       	ori	r24, 0x04	; 4
    1306:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
    1308:	80 81       	ld	r24, Z
    130a:	88 60       	ori	r24, 0x08	; 8
    130c:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
    130e:	ea e0       	ldi	r30, 0x0A	; 10
    1310:	f1 e0       	ldi	r31, 0x01	; 1
    1312:	80 81       	ld	r24, Z
    1314:	88 60       	ori	r24, 0x08	; 8
    1316:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
    1318:	e0 e2       	ldi	r30, 0x20	; 32
    131a:	f1 e0       	ldi	r31, 0x01	; 1
    131c:	80 81       	ld	r24, Z
    131e:	82 68       	ori	r24, 0x82	; 130
    1320:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
    1322:	e1 e2       	ldi	r30, 0x21	; 33
    1324:	f1 e0       	ldi	r31, 0x01	; 1
    1326:	80 81       	ld	r24, Z
    1328:	8a 61       	ori	r24, 0x1A	; 26
    132a:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
    132c:	89 ef       	ldi	r24, 0xF9	; 249
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    1334:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    1338:	08 95       	ret
	}
	else if(num==3)
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	f1 f4       	brne	.+60     	; 0x137a <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
    133e:	e7 e0       	ldi	r30, 0x07	; 7
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	80 81       	ld	r24, Z
    1344:	80 61       	ori	r24, 0x10	; 16
    1346:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
    1348:	80 81       	ld	r24, Z
    134a:	80 62       	ori	r24, 0x20	; 32
    134c:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
    134e:	ea e0       	ldi	r30, 0x0A	; 10
    1350:	f1 e0       	ldi	r31, 0x01	; 1
    1352:	80 81       	ld	r24, Z
    1354:	80 61       	ori	r24, 0x10	; 16
    1356:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
    1358:	e0 e2       	ldi	r30, 0x20	; 32
    135a:	f1 e0       	ldi	r31, 0x01	; 1
    135c:	80 81       	ld	r24, Z
    135e:	82 62       	ori	r24, 0x22	; 34
    1360:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
    1362:	e1 e2       	ldi	r30, 0x21	; 33
    1364:	f1 e0       	ldi	r31, 0x01	; 1
    1366:	80 81       	ld	r24, Z
    1368:	8a 61       	ori	r24, 0x1A	; 26
    136a:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
    136c:	89 ef       	ldi	r24, 0xF9	; 249
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    1374:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    1378:	08 95       	ret
	} 
	else if(num==4)
    137a:	84 30       	cpi	r24, 0x04	; 4
    137c:	d9 f4       	brne	.+54     	; 0x13b4 <_ZN5Motor7InitPWMEv+0xfe>
	{
		OUTPUT(DD_F4);
    137e:	87 9a       	sbi	0x10, 7	; 16
		OUTPUT(DD_B4);
    1380:	e7 e0       	ldi	r30, 0x07	; 7
    1382:	f1 e0       	ldi	r31, 0x01	; 1
    1384:	80 81       	ld	r24, Z
    1386:	82 60       	ori	r24, 0x02	; 2
    1388:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
    138a:	e1 e0       	ldi	r30, 0x01	; 1
    138c:	f1 e0       	ldi	r31, 0x01	; 1
    138e:	80 81       	ld	r24, Z
    1390:	88 60       	ori	r24, 0x08	; 8
    1392:	80 83       	st	Z, r24

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
    1394:	e0 ea       	ldi	r30, 0xA0	; 160
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	82 68       	ori	r24, 0x82	; 130
    139c:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
    139e:	e1 ea       	ldi	r30, 0xA1	; 161
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	8a 61       	ori	r24, 0x1A	; 26
    13a6:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
    13a8:	89 ef       	ldi	r24, 0xF9	; 249
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
    13b0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
    13b4:	08 95       	ret

000013b6 <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
    13b6:	fc 01       	movw	r30, r24
    13b8:	80 81       	ld	r24, Z
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	91 f0       	breq	.+36     	; 0x13e2 <_ZN5Motor19SetForwardDirectionEv+0x2c>
    13be:	18 f4       	brcc	.+6      	; 0x13c6 <_ZN5Motor19SetForwardDirectionEv+0x10>
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	31 f0       	breq	.+12     	; 0x13d0 <_ZN5Motor19SetForwardDirectionEv+0x1a>
    13c4:	08 95       	ret
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	a9 f0       	breq	.+42     	; 0x13f4 <_ZN5Motor19SetForwardDirectionEv+0x3e>
    13ca:	84 30       	cpi	r24, 0x04	; 4
    13cc:	e1 f0       	breq	.+56     	; 0x1406 <_ZN5Motor19SetForwardDirectionEv+0x50>
    13ce:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
    13d0:	e8 e0       	ldi	r30, 0x08	; 8
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	80 81       	ld	r24, Z
    13d6:	80 64       	ori	r24, 0x40	; 64
    13d8:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
    13da:	80 81       	ld	r24, Z
    13dc:	8f 77       	andi	r24, 0x7F	; 127
    13de:	80 83       	st	Z, r24
			break;
    13e0:	08 95       	ret
		case 2:
			SET		(DD_F2);
    13e2:	e8 e0       	ldi	r30, 0x08	; 8
    13e4:	f1 e0       	ldi	r31, 0x01	; 1
    13e6:	80 81       	ld	r24, Z
    13e8:	84 60       	ori	r24, 0x04	; 4
    13ea:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
    13ec:	80 81       	ld	r24, Z
    13ee:	87 7f       	andi	r24, 0xF7	; 247
    13f0:	80 83       	st	Z, r24
			break;
    13f2:	08 95       	ret
		case 3:
			SET		(DD_F3);
    13f4:	e8 e0       	ldi	r30, 0x08	; 8
    13f6:	f1 e0       	ldi	r31, 0x01	; 1
    13f8:	80 81       	ld	r24, Z
    13fa:	80 61       	ori	r24, 0x10	; 16
    13fc:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
    13fe:	80 81       	ld	r24, Z
    1400:	8f 7d       	andi	r24, 0xDF	; 223
    1402:	80 83       	st	Z, r24
			break;
    1404:	08 95       	ret
		case 4:
			SET		(DD_F4);
    1406:	8f 9a       	sbi	0x11, 7	; 17
			CLEAR	(DD_B4);
    1408:	e8 e0       	ldi	r30, 0x08	; 8
    140a:	f1 e0       	ldi	r31, 0x01	; 1
    140c:	80 81       	ld	r24, Z
    140e:	8d 7f       	andi	r24, 0xFD	; 253
    1410:	80 83       	st	Z, r24
    1412:	08 95       	ret

00001414 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
    1414:	fc 01       	movw	r30, r24
    1416:	80 81       	ld	r24, Z
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	91 f0       	breq	.+36     	; 0x1440 <_ZN5Motor19SetReverseDirectionEv+0x2c>
    141c:	18 f4       	brcc	.+6      	; 0x1424 <_ZN5Motor19SetReverseDirectionEv+0x10>
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	31 f0       	breq	.+12     	; 0x142e <_ZN5Motor19SetReverseDirectionEv+0x1a>
    1422:	08 95       	ret
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	a9 f0       	breq	.+42     	; 0x1452 <_ZN5Motor19SetReverseDirectionEv+0x3e>
    1428:	84 30       	cpi	r24, 0x04	; 4
    142a:	e1 f0       	breq	.+56     	; 0x1464 <_ZN5Motor19SetReverseDirectionEv+0x50>
    142c:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
    142e:	e8 e0       	ldi	r30, 0x08	; 8
    1430:	f1 e0       	ldi	r31, 0x01	; 1
    1432:	80 81       	ld	r24, Z
    1434:	8f 7b       	andi	r24, 0xBF	; 191
    1436:	80 83       	st	Z, r24
			SET		(DD_B1);
    1438:	80 81       	ld	r24, Z
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	80 83       	st	Z, r24
			break;
    143e:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
    1440:	e8 e0       	ldi	r30, 0x08	; 8
    1442:	f1 e0       	ldi	r31, 0x01	; 1
    1444:	80 81       	ld	r24, Z
    1446:	8b 7f       	andi	r24, 0xFB	; 251
    1448:	80 83       	st	Z, r24
			SET		(DD_B2);
    144a:	80 81       	ld	r24, Z
    144c:	88 60       	ori	r24, 0x08	; 8
    144e:	80 83       	st	Z, r24
			break;
    1450:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
    1452:	e8 e0       	ldi	r30, 0x08	; 8
    1454:	f1 e0       	ldi	r31, 0x01	; 1
    1456:	80 81       	ld	r24, Z
    1458:	8f 7e       	andi	r24, 0xEF	; 239
    145a:	80 83       	st	Z, r24
			SET		(DD_B3);
    145c:	80 81       	ld	r24, Z
    145e:	80 62       	ori	r24, 0x20	; 32
    1460:	80 83       	st	Z, r24
			break;
    1462:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
    1464:	8f 98       	cbi	0x11, 7	; 17
			SET		(DD_B4);
    1466:	e8 e0       	ldi	r30, 0x08	; 8
    1468:	f1 e0       	ldi	r31, 0x01	; 1
    146a:	80 81       	ld	r24, Z
    146c:	82 60       	ori	r24, 0x02	; 2
    146e:	80 83       	st	Z, r24
    1470:	08 95       	ret

00001472 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
    1472:	fc 01       	movw	r30, r24
    1474:	80 81       	ld	r24, Z
    1476:	82 30       	cpi	r24, 0x02	; 2
    1478:	b1 f0       	breq	.+44     	; 0x14a6 <_ZN5Motor9StopMotorEv+0x34>
    147a:	18 f4       	brcc	.+6      	; 0x1482 <_ZN5Motor9StopMotorEv+0x10>
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	31 f0       	breq	.+12     	; 0x148c <_ZN5Motor9StopMotorEv+0x1a>
    1480:	08 95       	ret
    1482:	83 30       	cpi	r24, 0x03	; 3
    1484:	e9 f0       	breq	.+58     	; 0x14c0 <_ZN5Motor9StopMotorEv+0x4e>
    1486:	84 30       	cpi	r24, 0x04	; 4
    1488:	41 f1       	breq	.+80     	; 0x14da <_ZN5Motor9StopMotorEv+0x68>
    148a:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
    148c:	e8 e0       	ldi	r30, 0x08	; 8
    148e:	f1 e0       	ldi	r31, 0x01	; 1
    1490:	80 81       	ld	r24, Z
    1492:	8f 7b       	andi	r24, 0xBF	; 191
    1494:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
    1496:	80 81       	ld	r24, Z
    1498:	8f 77       	andi	r24, 0x7F	; 127
    149a:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
    149c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    14a0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
    14a4:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
    14a6:	e8 e0       	ldi	r30, 0x08	; 8
    14a8:	f1 e0       	ldi	r31, 0x01	; 1
    14aa:	80 81       	ld	r24, Z
    14ac:	8b 7f       	andi	r24, 0xFB	; 251
    14ae:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
    14b0:	80 81       	ld	r24, Z
    14b2:	87 7f       	andi	r24, 0xF7	; 247
    14b4:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
    14b6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    14ba:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
    14be:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
    14c0:	e8 e0       	ldi	r30, 0x08	; 8
    14c2:	f1 e0       	ldi	r31, 0x01	; 1
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 7e       	andi	r24, 0xEF	; 239
    14c8:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
    14ca:	80 81       	ld	r24, Z
    14cc:	8f 7d       	andi	r24, 0xDF	; 223
    14ce:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
    14d0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    14d4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
    14d8:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
    14da:	8f 98       	cbi	0x11, 7	; 17
			CLEAR	(DD_B4);
    14dc:	e8 e0       	ldi	r30, 0x08	; 8
    14de:	f1 e0       	ldi	r31, 0x01	; 1
    14e0:	80 81       	ld	r24, Z
    14e2:	8d 7f       	andi	r24, 0xFD	; 253
    14e4:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
    14e6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    14ea:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
    14ee:	08 95       	ret

000014f0 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	8c 01       	movw	r16, r24
    14fa:	eb 01       	movw	r28, r22
    if (Ocr > 0)
    14fc:	1c 16       	cp	r1, r28
    14fe:	1d 06       	cpc	r1, r29
    1500:	0c f4       	brge	.+2      	; 0x1504 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
    1502:	59 df       	rcall	.-334    	; 0x13b6 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
    1504:	c9 3f       	cpi	r28, 0xF9	; 249
    1506:	d1 05       	cpc	r29, r1
    1508:	44 f4       	brge	.+16     	; 0x151a <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
	if( Ocr < 0)
    150a:	dd 23       	and	r29, r29
    150c:	44 f4       	brge	.+16     	; 0x151e <_ZN5Motor11SetOcrValueEi+0x2e>
	{
        Ocr = -Ocr;
    150e:	d1 95       	neg	r29
    1510:	c1 95       	neg	r28
    1512:	d1 09       	sbc	r29, r1
        SetReverseDirection();
    1514:	c8 01       	movw	r24, r16
    1516:	7e df       	rcall	.-260    	; 0x1414 <_ZN5Motor19SetReverseDirectionEv>
    1518:	02 c0       	rjmp	.+4      	; 0x151e <_ZN5Motor11SetOcrValueEi+0x2e>
void Motor::SetOcrValue(int Ocr)
{
    if (Ocr > 0)
        SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
    151a:	c9 ef       	ldi	r28, 0xF9	; 249
    151c:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0)
	{
        Ocr = -Ocr;
        SetReverseDirection();
	}
	switch(num)
    151e:	f8 01       	movw	r30, r16
    1520:	80 81       	ld	r24, Z
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	71 f0       	breq	.+28     	; 0x1542 <_ZN5Motor11SetOcrValueEi+0x52>
    1526:	18 f4       	brcc	.+6      	; 0x152e <_ZN5Motor11SetOcrValueEi+0x3e>
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	31 f0       	breq	.+12     	; 0x1538 <_ZN5Motor11SetOcrValueEi+0x48>
    152c:	18 c0       	rjmp	.+48     	; 0x155e <_ZN5Motor11SetOcrValueEi+0x6e>
    152e:	83 30       	cpi	r24, 0x03	; 3
    1530:	69 f0       	breq	.+26     	; 0x154c <_ZN5Motor11SetOcrValueEi+0x5c>
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	81 f0       	breq	.+32     	; 0x1556 <_ZN5Motor11SetOcrValueEi+0x66>
    1536:	13 c0       	rjmp	.+38     	; 0x155e <_ZN5Motor11SetOcrValueEi+0x6e>
	{
		case 1:
			PWM_OCR1	= Ocr;
    1538:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
    153c:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
    1540:	0e c0       	rjmp	.+28     	; 0x155e <_ZN5Motor11SetOcrValueEi+0x6e>
		case 2:
			PWM_OCR2	= Ocr;
    1542:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    1546:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
    154a:	09 c0       	rjmp	.+18     	; 0x155e <_ZN5Motor11SetOcrValueEi+0x6e>
		case 3:
			PWM_OCR3	= Ocr;
    154c:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    1550:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
    1554:	04 c0       	rjmp	.+8      	; 0x155e <_ZN5Motor11SetOcrValueEi+0x6e>
		case 4:
			PWM_OCR4	= Ocr;
    1556:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
    155a:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
	}
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    1568:	1f 92       	push	r1
    156a:	0f 92       	push	r0
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	0f 92       	push	r0
    1570:	11 24       	eor	r1, r1
    1572:	0b b6       	in	r0, 0x3b	; 59
    1574:	0f 92       	push	r0
    1576:	2f 93       	push	r18
    1578:	8f 93       	push	r24
    157a:	9f 93       	push	r25
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
    1580:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    1584:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1588:	88 71       	andi	r24, 0x18	; 24
    158a:	e0 91 73 04 	lds	r30, 0x0473	; 0x800473 <_ZL12UART0_RxHead>
    158e:	ef 5f       	subi	r30, 0xFF	; 255
    1590:	ef 71       	andi	r30, 0x1F	; 31
    1592:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <_ZL12UART0_RxTail>
    1596:	e9 17       	cp	r30, r25
    1598:	39 f0       	breq	.+14     	; 0x15a8 <__vector_25+0x40>
    159a:	e0 93 73 04 	sts	0x0473, r30	; 0x800473 <_ZL12UART0_RxHead>
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	ea 58       	subi	r30, 0x8A	; 138
    15a2:	fb 4f       	sbci	r31, 0xFB	; 251
    15a4:	20 83       	st	Z, r18
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <__vector_25+0x42>
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <_ZL17UART0_LastRxError>
    15ae:	ff 91       	pop	r31
    15b0:	ef 91       	pop	r30
    15b2:	9f 91       	pop	r25
    15b4:	8f 91       	pop	r24
    15b6:	2f 91       	pop	r18
    15b8:	0f 90       	pop	r0
    15ba:	0b be       	out	0x3b, r0	; 59
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <__vector_26>:
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	0b b6       	in	r0, 0x3b	; 59
    15d2:	0f 92       	push	r0
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
    15dc:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <_ZL12UART0_TxHead>
    15e0:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <_ZL12UART0_TxTail>
    15e4:	98 17       	cp	r25, r24
    15e6:	69 f0       	breq	.+26     	; 0x1602 <__vector_26+0x3c>
    15e8:	e0 91 74 04 	lds	r30, 0x0474	; 0x800474 <_ZL12UART0_TxTail>
    15ec:	ef 5f       	subi	r30, 0xFF	; 255
    15ee:	ef 71       	andi	r30, 0x1F	; 31
    15f0:	e0 93 74 04 	sts	0x0474, r30	; 0x800474 <_ZL12UART0_TxTail>
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	ea 56       	subi	r30, 0x6A	; 106
    15f8:	fb 4f       	sbci	r31, 0xFB	; 251
    15fa:	80 81       	ld	r24, Z
    15fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1600:	05 c0       	rjmp	.+10     	; 0x160c <__vector_26+0x46>
    1602:	e1 ec       	ldi	r30, 0xC1	; 193
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	8f 7d       	andi	r24, 0xDF	; 223
    160a:	80 83       	st	Z, r24
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	9f 91       	pop	r25
    1612:	8f 91       	pop	r24
    1614:	0f 90       	pop	r0
    1616:	0b be       	out	0x3b, r0	; 59
    1618:	0f 90       	pop	r0
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	0f 90       	pop	r0
    161e:	1f 90       	pop	r1
    1620:	18 95       	reti

00001622 <_Z10uart0_initj>:
    1622:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <_ZL12UART0_TxHead>
    1626:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <_ZL12UART0_TxTail>
    162a:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <_ZL12UART0_RxHead>
    162e:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <_ZL12UART0_RxTail>
    1632:	99 23       	and	r25, r25
    1634:	24 f4       	brge	.+8      	; 0x163e <_Z10uart0_initj+0x1c>
    1636:	22 e0       	ldi	r18, 0x02	; 2
    1638:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    163c:	9f 77       	andi	r25, 0x7F	; 127
    163e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1642:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1646:	88 e9       	ldi	r24, 0x98	; 152
    1648:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    164c:	86 e0       	ldi	r24, 0x06	; 6
    164e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1652:	08 95       	ret

00001654 <_Z10uart0_putch>:
    1654:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <_ZL12UART0_TxHead>
    1658:	2f 5f       	subi	r18, 0xFF	; 255
    165a:	2f 71       	andi	r18, 0x1F	; 31
    165c:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <_ZL12UART0_TxTail>
    1660:	29 17       	cp	r18, r25
    1662:	e1 f3       	breq	.-8      	; 0x165c <_Z10uart0_putch+0x8>
    1664:	e2 2f       	mov	r30, r18
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	ea 56       	subi	r30, 0x6A	; 106
    166a:	fb 4f       	sbci	r31, 0xFB	; 251
    166c:	80 83       	st	Z, r24
    166e:	20 93 75 04 	sts	0x0475, r18	; 0x800475 <_ZL12UART0_TxHead>
    1672:	e1 ec       	ldi	r30, 0xC1	; 193
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 62       	ori	r24, 0x20	; 32
    167a:	80 83       	st	Z, r24
    167c:	08 95       	ret

0000167e <_Z12uart0_putinti>:
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	2f 97       	sbiw	r28, 0x0f	; 15
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	4a e0       	ldi	r20, 0x0A	; 10
    1698:	be 01       	movw	r22, r28
    169a:	6f 5f       	subi	r22, 0xFF	; 255
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	e4 d3       	rcall	.+1992   	; 0x1e68 <__itoa_ncheck>
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	88 23       	and	r24, r24
    16a4:	49 f0       	breq	.+18     	; 0x16b8 <_Z12uart0_putinti+0x3a>
    16a6:	8e 01       	movw	r16, r28
    16a8:	0e 5f       	subi	r16, 0xFE	; 254
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	d3 df       	rcall	.-90     	; 0x1654 <_Z10uart0_putch>
    16ae:	f8 01       	movw	r30, r16
    16b0:	81 91       	ld	r24, Z+
    16b2:	8f 01       	movw	r16, r30
    16b4:	81 11       	cpse	r24, r1
    16b6:	fa cf       	rjmp	.-12     	; 0x16ac <_Z12uart0_putinti+0x2e>
    16b8:	2f 96       	adiw	r28, 0x0f	; 15
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	08 95       	ret

000016ce <_Z10uart0_putsPKc>:
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	ec 01       	movw	r28, r24
    16d4:	88 81       	ld	r24, Y
    16d6:	88 23       	and	r24, r24
    16d8:	29 f0       	breq	.+10     	; 0x16e4 <_Z10uart0_putsPKc+0x16>
    16da:	21 96       	adiw	r28, 0x01	; 1
    16dc:	bb df       	rcall	.-138    	; 0x1654 <_Z10uart0_putch>
    16de:	89 91       	ld	r24, Y+
    16e0:	81 11       	cpse	r24, r1
    16e2:	fc cf       	rjmp	.-8      	; 0x16dc <_Z10uart0_putsPKc+0xe>
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <__vector_51>:
    16ea:	1f 92       	push	r1
    16ec:	0f 92       	push	r0
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	0f 92       	push	r0
    16f2:	11 24       	eor	r1, r1
    16f4:	0b b6       	in	r0, 0x3b	; 59
    16f6:	0f 92       	push	r0
    16f8:	2f 93       	push	r18
    16fa:	8f 93       	push	r24
    16fc:	9f 93       	push	r25
    16fe:	ef 93       	push	r30
    1700:	ff 93       	push	r31
    1702:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    1706:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    170a:	88 71       	andi	r24, 0x18	; 24
    170c:	e0 91 2e 04 	lds	r30, 0x042E	; 0x80042e <_ZL12UART2_RxHead>
    1710:	ef 5f       	subi	r30, 0xFF	; 255
    1712:	ef 71       	andi	r30, 0x1F	; 31
    1714:	90 91 2d 04 	lds	r25, 0x042D	; 0x80042d <_ZL12UART2_RxTail>
    1718:	e9 17       	cp	r30, r25
    171a:	39 f0       	breq	.+14     	; 0x172a <__vector_51+0x40>
    171c:	e0 93 2e 04 	sts	0x042E, r30	; 0x80042e <_ZL12UART2_RxHead>
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	ef 5c       	subi	r30, 0xCF	; 207
    1724:	fb 4f       	sbci	r31, 0xFB	; 251
    1726:	20 83       	st	Z, r18
    1728:	01 c0       	rjmp	.+2      	; 0x172c <__vector_51+0x42>
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <_ZL17UART2_LastRxError>
    1730:	ff 91       	pop	r31
    1732:	ef 91       	pop	r30
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0b be       	out	0x3b, r0	; 59
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <__vector_52>:
    1748:	1f 92       	push	r1
    174a:	0f 92       	push	r0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	0f 92       	push	r0
    1750:	11 24       	eor	r1, r1
    1752:	0b b6       	in	r0, 0x3b	; 59
    1754:	0f 92       	push	r0
    1756:	8f 93       	push	r24
    1758:	9f 93       	push	r25
    175a:	ef 93       	push	r30
    175c:	ff 93       	push	r31
    175e:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <_ZL12UART2_TxHead>
    1762:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZL12UART2_TxTail>
    1766:	98 17       	cp	r25, r24
    1768:	69 f0       	breq	.+26     	; 0x1784 <__vector_52+0x3c>
    176a:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <_ZL12UART2_TxTail>
    176e:	ef 5f       	subi	r30, 0xFF	; 255
    1770:	ef 71       	andi	r30, 0x1F	; 31
    1772:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <_ZL12UART2_TxTail>
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	ef 5a       	subi	r30, 0xAF	; 175
    177a:	fb 4f       	sbci	r31, 0xFB	; 251
    177c:	80 81       	ld	r24, Z
    177e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1782:	05 c0       	rjmp	.+10     	; 0x178e <__vector_52+0x46>
    1784:	e1 ed       	ldi	r30, 0xD1	; 209
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	8f 7d       	andi	r24, 0xDF	; 223
    178c:	80 83       	st	Z, r24
    178e:	ff 91       	pop	r31
    1790:	ef 91       	pop	r30
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	0f 90       	pop	r0
    1798:	0b be       	out	0x3b, r0	; 59
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	0f 90       	pop	r0
    17a0:	1f 90       	pop	r1
    17a2:	18 95       	reti

000017a4 <_Z10uart2_initj>:
    17a4:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <_ZL12UART2_TxHead>
    17a8:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZL12UART2_TxTail>
    17ac:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <_ZL12UART2_RxHead>
    17b0:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <_ZL12UART2_RxTail>
    17b4:	99 23       	and	r25, r25
    17b6:	24 f4       	brge	.+8      	; 0x17c0 <_Z10uart2_initj+0x1c>
    17b8:	22 e0       	ldi	r18, 0x02	; 2
    17ba:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    17be:	9f 77       	andi	r25, 0x7F	; 127
    17c0:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    17c4:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    17c8:	88 e9       	ldi	r24, 0x98	; 152
    17ca:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    17ce:	86 e0       	ldi	r24, 0x06	; 6
    17d0:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    17d4:	08 95       	ret

000017d6 <_Z10uart2_getcv>:
    17d6:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <_ZL12UART2_RxHead>
    17da:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZL12UART2_RxTail>
    17de:	98 17       	cp	r25, r24
    17e0:	91 f0       	breq	.+36     	; 0x1806 <_Z10uart2_getcv+0x30>
    17e2:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <_ZL12UART2_RxTail>
    17e6:	ef 5f       	subi	r30, 0xFF	; 255
    17e8:	ef 71       	andi	r30, 0x1F	; 31
    17ea:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <_ZL12UART2_RxTail>
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	ef 5c       	subi	r30, 0xCF	; 207
    17f2:	fb 4f       	sbci	r31, 0xFB	; 251
    17f4:	20 81       	ld	r18, Z
    17f6:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <_ZL17UART2_LastRxError>
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	98 2f       	mov	r25, r24
    17fe:	88 27       	eor	r24, r24
    1800:	82 0f       	add	r24, r18
    1802:	91 1d       	adc	r25, r1
    1804:	08 95       	ret
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	08 95       	ret

0000180c <_Z15uart2_availablev>:
    180c:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <_ZL12UART2_RxHead>
    1810:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <_ZL12UART2_RxTail>
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	4f 96       	adiw	r24, 0x1f	; 31
    1818:	82 1b       	sub	r24, r18
    181a:	91 09       	sbc	r25, r1
    181c:	6f e1       	ldi	r22, 0x1F	; 31
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	f4 c2       	rjmp	.+1512   	; 0x1e0a <__divmodhi4>
    1822:	08 95       	ret

00001824 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    1824:	1f 92       	push	r1
    1826:	0f 92       	push	r0
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	0f 92       	push	r0
    182c:	11 24       	eor	r1, r1
    182e:	0b b6       	in	r0, 0x3b	; 59
    1830:	0f 92       	push	r0
    1832:	2f 93       	push	r18
    1834:	8f 93       	push	r24
    1836:	9f 93       	push	r25
    1838:	ef 93       	push	r30
    183a:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    183c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
    1840:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    1844:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    1846:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <_ZL12UART3_RxHead>
    184a:	ef 5f       	subi	r30, 0xFF	; 255
    184c:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    184e:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <_ZL12UART3_RxTail>
    1852:	e9 17       	cp	r30, r25
    1854:	39 f0       	breq	.+14     	; 0x1864 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    1856:	e0 93 e9 03 	sts	0x03E9, r30	; 0x8003e9 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	e4 51       	subi	r30, 0x14	; 20
    185e:	fc 4f       	sbci	r31, 0xFC	; 252
    1860:	20 83       	st	Z, r18
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1864:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    1866:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <_ZL17UART3_LastRxError>
}
    186a:	ff 91       	pop	r31
    186c:	ef 91       	pop	r30
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	0b be       	out	0x3b, r0	; 59
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	0b b6       	in	r0, 0x3b	; 59
    188e:	0f 92       	push	r0
    1890:	8f 93       	push	r24
    1892:	9f 93       	push	r25
    1894:	ef 93       	push	r30
    1896:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    1898:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <_ZL12UART3_TxHead>
    189c:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <_ZL12UART3_TxTail>
    18a0:	98 17       	cp	r25, r24
    18a2:	69 f0       	breq	.+26     	; 0x18be <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    18a4:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <_ZL12UART3_TxTail>
    18a8:	ef 5f       	subi	r30, 0xFF	; 255
    18aa:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    18ac:	e0 93 ea 03 	sts	0x03EA, r30	; 0x8003ea <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	e4 5f       	subi	r30, 0xF4	; 244
    18b4:	fb 4f       	sbci	r31, 0xFB	; 251
    18b6:	80 81       	ld	r24, Z
    18b8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    18be:	e1 e3       	ldi	r30, 0x31	; 49
    18c0:	f1 e0       	ldi	r31, 0x01	; 1
    18c2:	80 81       	ld	r24, Z
    18c4:	8f 7d       	andi	r24, 0xDF	; 223
    18c6:	80 83       	st	Z, r24
	}
}
    18c8:	ff 91       	pop	r31
    18ca:	ef 91       	pop	r30
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	0f 90       	pop	r0
    18d2:	0b be       	out	0x3b, r0	; 59
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f 90       	pop	r0
    18da:	1f 90       	pop	r1
    18dc:	18 95       	reti

000018de <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    18de:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <_ZL12UART3_TxHead>
	UART3_TxTail = 0;
    18e2:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <_ZL12UART3_TxTail>
	UART3_RxHead = 0;
    18e6:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <_ZL12UART3_RxHead>
	UART3_RxTail = 0;
    18ea:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <_ZL12UART3_RxTail>


	/* Set baud rate */
	if (baudrate & 0x8000)
    18ee:	99 23       	and	r25, r25
    18f0:	24 f4       	brge	.+8      	; 0x18fa <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    18f2:	26 e0       	ldi	r18, 0x06	; 6
    18f4:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
		baudrate &= ~0x8000;
    18f8:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    18fa:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	UBRR3L = (unsigned char)baudrate;
    18fe:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    1902:	88 e9       	ldi	r24, 0x98	; 152
    1904:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    1908:	86 e0       	ldi	r24, 0x06	; 6
    190a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    190e:	08 95       	ret

00001910 <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    1910:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <_ZL12UART3_RxHead>
    1914:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <_ZL12UART3_RxTail>
    1918:	98 17       	cp	r25, r24
    191a:	91 f0       	breq	.+36     	; 0x1940 <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    191c:	e0 91 e8 03 	lds	r30, 0x03E8	; 0x8003e8 <_ZL12UART3_RxTail>
    1920:	ef 5f       	subi	r30, 0xFF	; 255
    1922:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    1924:	e0 93 e8 03 	sts	0x03E8, r30	; 0x8003e8 <_ZL12UART3_RxTail>

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	e4 51       	subi	r30, 0x14	; 20
    192c:	fc 4f       	sbci	r31, 0xFC	; 252
    192e:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    1930:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <_ZL17UART3_LastRxError>
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	98 2f       	mov	r25, r24
    1938:	88 27       	eor	r24, r24
    193a:	82 0f       	add	r24, r18
    193c:	91 1d       	adc	r25, r1
    193e:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    1944:	08 95       	ret

00001946 <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    1946:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <_ZL12UART3_TxHead>
    194a:	2f 5f       	subi	r18, 0xFF	; 255
    194c:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    194e:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <_ZL12UART3_TxTail>
    1952:	29 17       	cp	r18, r25
    1954:	e1 f3       	breq	.-8      	; 0x194e <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    1956:	e2 2f       	mov	r30, r18
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	e4 5f       	subi	r30, 0xF4	; 244
    195c:	fb 4f       	sbci	r31, 0xFB	; 251
    195e:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    1960:	20 93 eb 03 	sts	0x03EB, r18	; 0x8003eb <_ZL12UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    1964:	e1 e3       	ldi	r30, 0x31	; 49
    1966:	f1 e0       	ldi	r31, 0x01	; 1
    1968:	80 81       	ld	r24, Z
    196a:	80 62       	ori	r24, 0x20	; 32
    196c:	80 83       	st	Z, r24
    196e:	08 95       	ret

00001970 <_Z12uart3_putinti>:
 Purpose:  transmit integer to UART3
 Input:    integer to be transmitted
 Returns:  none
 **************************************************************************/
void uart3_putint(int input)
{
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	2f 97       	sbiw	r28, 0x0f	; 15
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1988:	4a e0       	ldi	r20, 0x0A	; 10
    198a:	be 01       	movw	r22, r28
    198c:	6f 5f       	subi	r22, 0xFF	; 255
    198e:	7f 4f       	sbci	r23, 0xFF	; 255
    1990:	6b d2       	rcall	.+1238   	; 0x1e68 <__itoa_ncheck>
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	88 23       	and	r24, r24
    1996:	49 f0       	breq	.+18     	; 0x19aa <_Z12uart3_putinti+0x3a>
    1998:	8e 01       	movw	r16, r28
    199a:	0e 5f       	subi	r16, 0xFE	; 254
	uart3_putc(*s++);
    199c:	1f 4f       	sbci	r17, 0xFF	; 255
    199e:	d3 df       	rcall	.-90     	; 0x1946 <_Z10uart3_putch>
void uart3_putint(int input)
{
	char buffer[15];
	itoa(input,buffer,10);
	char * s = buffer;
	while (*s)
    19a0:	f8 01       	movw	r30, r16
    19a2:	81 91       	ld	r24, Z+
    19a4:	8f 01       	movw	r16, r30
    19a6:	81 11       	cpse	r24, r1
    19a8:	fa cf       	rjmp	.-12     	; 0x199e <_Z12uart3_putinti+0x2e>
	uart3_putc(*s++);

	}/* uart3_putint */
    19aa:	2f 96       	adiw	r28, 0x0f	; 15
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	08 95       	ret

000019c0 <_Z10uart3_putsPKc>:
 Purpose:  transmit string to UART3
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart3_puts(const char *s)
{
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	ec 01       	movw	r28, r24
	while (*s)
    19c6:	88 81       	ld	r24, Y
    19c8:	88 23       	and	r24, r24
    19ca:	29 f0       	breq	.+10     	; 0x19d6 <_Z10uart3_putsPKc+0x16>
    19cc:	21 96       	adiw	r28, 0x01	; 1
		uart3_putc(*s++);
    19ce:	bb df       	rcall	.-138    	; 0x1946 <_Z10uart3_putch>
 Input:    string to be transmitted
 Returns:  none
 **************************************************************************/
void uart3_puts(const char *s)
{
	while (*s)
    19d0:	89 91       	ld	r24, Y+
    19d2:	81 11       	cpse	r24, r1
    19d4:	fc cf       	rjmp	.-8      	; 0x19ce <_Z10uart3_putsPKc+0xe>
		uart3_putc(*s++);

}/* uart3_puts */
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <__subsf3>:
    19dc:	50 58       	subi	r21, 0x80	; 128

000019de <__addsf3>:
    19de:	bb 27       	eor	r27, r27
    19e0:	aa 27       	eor	r26, r26
    19e2:	0e d0       	rcall	.+28     	; 0x1a00 <__addsf3x>
    19e4:	71 c1       	rjmp	.+738    	; 0x1cc8 <__fp_round>
    19e6:	62 d1       	rcall	.+708    	; 0x1cac <__fp_pscA>
    19e8:	30 f0       	brcs	.+12     	; 0x19f6 <__addsf3+0x18>
    19ea:	67 d1       	rcall	.+718    	; 0x1cba <__fp_pscB>
    19ec:	20 f0       	brcs	.+8      	; 0x19f6 <__addsf3+0x18>
    19ee:	31 f4       	brne	.+12     	; 0x19fc <__addsf3+0x1e>
    19f0:	9f 3f       	cpi	r25, 0xFF	; 255
    19f2:	11 f4       	brne	.+4      	; 0x19f8 <__addsf3+0x1a>
    19f4:	1e f4       	brtc	.+6      	; 0x19fc <__addsf3+0x1e>
    19f6:	57 c1       	rjmp	.+686    	; 0x1ca6 <__fp_nan>
    19f8:	0e f4       	brtc	.+2      	; 0x19fc <__addsf3+0x1e>
    19fa:	e0 95       	com	r30
    19fc:	e7 fb       	bst	r30, 7
    19fe:	4d c1       	rjmp	.+666    	; 0x1c9a <__fp_inf>

00001a00 <__addsf3x>:
    1a00:	e9 2f       	mov	r30, r25
    1a02:	73 d1       	rcall	.+742    	; 0x1cea <__fp_split3>
    1a04:	80 f3       	brcs	.-32     	; 0x19e6 <__addsf3+0x8>
    1a06:	ba 17       	cp	r27, r26
    1a08:	62 07       	cpc	r22, r18
    1a0a:	73 07       	cpc	r23, r19
    1a0c:	84 07       	cpc	r24, r20
    1a0e:	95 07       	cpc	r25, r21
    1a10:	18 f0       	brcs	.+6      	; 0x1a18 <__addsf3x+0x18>
    1a12:	71 f4       	brne	.+28     	; 0x1a30 <__addsf3x+0x30>
    1a14:	9e f5       	brtc	.+102    	; 0x1a7c <__addsf3x+0x7c>
    1a16:	8b c1       	rjmp	.+790    	; 0x1d2e <__fp_zero>
    1a18:	0e f4       	brtc	.+2      	; 0x1a1c <__addsf3x+0x1c>
    1a1a:	e0 95       	com	r30
    1a1c:	0b 2e       	mov	r0, r27
    1a1e:	ba 2f       	mov	r27, r26
    1a20:	a0 2d       	mov	r26, r0
    1a22:	0b 01       	movw	r0, r22
    1a24:	b9 01       	movw	r22, r18
    1a26:	90 01       	movw	r18, r0
    1a28:	0c 01       	movw	r0, r24
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	a0 01       	movw	r20, r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	ff 27       	eor	r31, r31
    1a32:	59 1b       	sub	r21, r25
    1a34:	99 f0       	breq	.+38     	; 0x1a5c <__addsf3x+0x5c>
    1a36:	59 3f       	cpi	r21, 0xF9	; 249
    1a38:	50 f4       	brcc	.+20     	; 0x1a4e <__addsf3x+0x4e>
    1a3a:	50 3e       	cpi	r21, 0xE0	; 224
    1a3c:	68 f1       	brcs	.+90     	; 0x1a98 <__addsf3x+0x98>
    1a3e:	1a 16       	cp	r1, r26
    1a40:	f0 40       	sbci	r31, 0x00	; 0
    1a42:	a2 2f       	mov	r26, r18
    1a44:	23 2f       	mov	r18, r19
    1a46:	34 2f       	mov	r19, r20
    1a48:	44 27       	eor	r20, r20
    1a4a:	58 5f       	subi	r21, 0xF8	; 248
    1a4c:	f3 cf       	rjmp	.-26     	; 0x1a34 <__addsf3x+0x34>
    1a4e:	46 95       	lsr	r20
    1a50:	37 95       	ror	r19
    1a52:	27 95       	ror	r18
    1a54:	a7 95       	ror	r26
    1a56:	f0 40       	sbci	r31, 0x00	; 0
    1a58:	53 95       	inc	r21
    1a5a:	c9 f7       	brne	.-14     	; 0x1a4e <__addsf3x+0x4e>
    1a5c:	7e f4       	brtc	.+30     	; 0x1a7c <__addsf3x+0x7c>
    1a5e:	1f 16       	cp	r1, r31
    1a60:	ba 0b       	sbc	r27, r26
    1a62:	62 0b       	sbc	r22, r18
    1a64:	73 0b       	sbc	r23, r19
    1a66:	84 0b       	sbc	r24, r20
    1a68:	ba f0       	brmi	.+46     	; 0x1a98 <__addsf3x+0x98>
    1a6a:	91 50       	subi	r25, 0x01	; 1
    1a6c:	a1 f0       	breq	.+40     	; 0x1a96 <__addsf3x+0x96>
    1a6e:	ff 0f       	add	r31, r31
    1a70:	bb 1f       	adc	r27, r27
    1a72:	66 1f       	adc	r22, r22
    1a74:	77 1f       	adc	r23, r23
    1a76:	88 1f       	adc	r24, r24
    1a78:	c2 f7       	brpl	.-16     	; 0x1a6a <__addsf3x+0x6a>
    1a7a:	0e c0       	rjmp	.+28     	; 0x1a98 <__addsf3x+0x98>
    1a7c:	ba 0f       	add	r27, r26
    1a7e:	62 1f       	adc	r22, r18
    1a80:	73 1f       	adc	r23, r19
    1a82:	84 1f       	adc	r24, r20
    1a84:	48 f4       	brcc	.+18     	; 0x1a98 <__addsf3x+0x98>
    1a86:	87 95       	ror	r24
    1a88:	77 95       	ror	r23
    1a8a:	67 95       	ror	r22
    1a8c:	b7 95       	ror	r27
    1a8e:	f7 95       	ror	r31
    1a90:	9e 3f       	cpi	r25, 0xFE	; 254
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <__addsf3x+0x96>
    1a94:	b3 cf       	rjmp	.-154    	; 0x19fc <__addsf3+0x1e>
    1a96:	93 95       	inc	r25
    1a98:	88 0f       	add	r24, r24
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <__addsf3x+0x9e>
    1a9c:	99 27       	eor	r25, r25
    1a9e:	ee 0f       	add	r30, r30
    1aa0:	97 95       	ror	r25
    1aa2:	87 95       	ror	r24
    1aa4:	08 95       	ret

00001aa6 <__divsf3>:
    1aa6:	0c d0       	rcall	.+24     	; 0x1ac0 <__divsf3x>
    1aa8:	0f c1       	rjmp	.+542    	; 0x1cc8 <__fp_round>
    1aaa:	07 d1       	rcall	.+526    	; 0x1cba <__fp_pscB>
    1aac:	40 f0       	brcs	.+16     	; 0x1abe <__divsf3+0x18>
    1aae:	fe d0       	rcall	.+508    	; 0x1cac <__fp_pscA>
    1ab0:	30 f0       	brcs	.+12     	; 0x1abe <__divsf3+0x18>
    1ab2:	21 f4       	brne	.+8      	; 0x1abc <__divsf3+0x16>
    1ab4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab6:	19 f0       	breq	.+6      	; 0x1abe <__divsf3+0x18>
    1ab8:	f0 c0       	rjmp	.+480    	; 0x1c9a <__fp_inf>
    1aba:	51 11       	cpse	r21, r1
    1abc:	39 c1       	rjmp	.+626    	; 0x1d30 <__fp_szero>
    1abe:	f3 c0       	rjmp	.+486    	; 0x1ca6 <__fp_nan>

00001ac0 <__divsf3x>:
    1ac0:	14 d1       	rcall	.+552    	; 0x1cea <__fp_split3>
    1ac2:	98 f3       	brcs	.-26     	; 0x1aaa <__divsf3+0x4>

00001ac4 <__divsf3_pse>:
    1ac4:	99 23       	and	r25, r25
    1ac6:	c9 f3       	breq	.-14     	; 0x1aba <__divsf3+0x14>
    1ac8:	55 23       	and	r21, r21
    1aca:	b1 f3       	breq	.-20     	; 0x1ab8 <__divsf3+0x12>
    1acc:	95 1b       	sub	r25, r21
    1ace:	55 0b       	sbc	r21, r21
    1ad0:	bb 27       	eor	r27, r27
    1ad2:	aa 27       	eor	r26, r26
    1ad4:	62 17       	cp	r22, r18
    1ad6:	73 07       	cpc	r23, r19
    1ad8:	84 07       	cpc	r24, r20
    1ada:	38 f0       	brcs	.+14     	; 0x1aea <__divsf3_pse+0x26>
    1adc:	9f 5f       	subi	r25, 0xFF	; 255
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	22 0f       	add	r18, r18
    1ae2:	33 1f       	adc	r19, r19
    1ae4:	44 1f       	adc	r20, r20
    1ae6:	aa 1f       	adc	r26, r26
    1ae8:	a9 f3       	breq	.-22     	; 0x1ad4 <__divsf3_pse+0x10>
    1aea:	33 d0       	rcall	.+102    	; 0x1b52 <__divsf3_pse+0x8e>
    1aec:	0e 2e       	mov	r0, r30
    1aee:	3a f0       	brmi	.+14     	; 0x1afe <__divsf3_pse+0x3a>
    1af0:	e0 e8       	ldi	r30, 0x80	; 128
    1af2:	30 d0       	rcall	.+96     	; 0x1b54 <__divsf3_pse+0x90>
    1af4:	91 50       	subi	r25, 0x01	; 1
    1af6:	50 40       	sbci	r21, 0x00	; 0
    1af8:	e6 95       	lsr	r30
    1afa:	00 1c       	adc	r0, r0
    1afc:	ca f7       	brpl	.-14     	; 0x1af0 <__divsf3_pse+0x2c>
    1afe:	29 d0       	rcall	.+82     	; 0x1b52 <__divsf3_pse+0x8e>
    1b00:	fe 2f       	mov	r31, r30
    1b02:	27 d0       	rcall	.+78     	; 0x1b52 <__divsf3_pse+0x8e>
    1b04:	66 0f       	add	r22, r22
    1b06:	77 1f       	adc	r23, r23
    1b08:	88 1f       	adc	r24, r24
    1b0a:	bb 1f       	adc	r27, r27
    1b0c:	26 17       	cp	r18, r22
    1b0e:	37 07       	cpc	r19, r23
    1b10:	48 07       	cpc	r20, r24
    1b12:	ab 07       	cpc	r26, r27
    1b14:	b0 e8       	ldi	r27, 0x80	; 128
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <__divsf3_pse+0x56>
    1b18:	bb 0b       	sbc	r27, r27
    1b1a:	80 2d       	mov	r24, r0
    1b1c:	bf 01       	movw	r22, r30
    1b1e:	ff 27       	eor	r31, r31
    1b20:	93 58       	subi	r25, 0x83	; 131
    1b22:	5f 4f       	sbci	r21, 0xFF	; 255
    1b24:	2a f0       	brmi	.+10     	; 0x1b30 <__divsf3_pse+0x6c>
    1b26:	9e 3f       	cpi	r25, 0xFE	; 254
    1b28:	51 05       	cpc	r21, r1
    1b2a:	68 f0       	brcs	.+26     	; 0x1b46 <__divsf3_pse+0x82>
    1b2c:	b6 c0       	rjmp	.+364    	; 0x1c9a <__fp_inf>
    1b2e:	00 c1       	rjmp	.+512    	; 0x1d30 <__fp_szero>
    1b30:	5f 3f       	cpi	r21, 0xFF	; 255
    1b32:	ec f3       	brlt	.-6      	; 0x1b2e <__divsf3_pse+0x6a>
    1b34:	98 3e       	cpi	r25, 0xE8	; 232
    1b36:	dc f3       	brlt	.-10     	; 0x1b2e <__divsf3_pse+0x6a>
    1b38:	86 95       	lsr	r24
    1b3a:	77 95       	ror	r23
    1b3c:	67 95       	ror	r22
    1b3e:	b7 95       	ror	r27
    1b40:	f7 95       	ror	r31
    1b42:	9f 5f       	subi	r25, 0xFF	; 255
    1b44:	c9 f7       	brne	.-14     	; 0x1b38 <__divsf3_pse+0x74>
    1b46:	88 0f       	add	r24, r24
    1b48:	91 1d       	adc	r25, r1
    1b4a:	96 95       	lsr	r25
    1b4c:	87 95       	ror	r24
    1b4e:	97 f9       	bld	r25, 7
    1b50:	08 95       	ret
    1b52:	e1 e0       	ldi	r30, 0x01	; 1
    1b54:	66 0f       	add	r22, r22
    1b56:	77 1f       	adc	r23, r23
    1b58:	88 1f       	adc	r24, r24
    1b5a:	bb 1f       	adc	r27, r27
    1b5c:	62 17       	cp	r22, r18
    1b5e:	73 07       	cpc	r23, r19
    1b60:	84 07       	cpc	r24, r20
    1b62:	ba 07       	cpc	r27, r26
    1b64:	20 f0       	brcs	.+8      	; 0x1b6e <__divsf3_pse+0xaa>
    1b66:	62 1b       	sub	r22, r18
    1b68:	73 0b       	sbc	r23, r19
    1b6a:	84 0b       	sbc	r24, r20
    1b6c:	ba 0b       	sbc	r27, r26
    1b6e:	ee 1f       	adc	r30, r30
    1b70:	88 f7       	brcc	.-30     	; 0x1b54 <__divsf3_pse+0x90>
    1b72:	e0 95       	com	r30
    1b74:	08 95       	ret

00001b76 <__fixsfsi>:
    1b76:	04 d0       	rcall	.+8      	; 0x1b80 <__fixunssfsi>
    1b78:	68 94       	set
    1b7a:	b1 11       	cpse	r27, r1
    1b7c:	d9 c0       	rjmp	.+434    	; 0x1d30 <__fp_szero>
    1b7e:	08 95       	ret

00001b80 <__fixunssfsi>:
    1b80:	bc d0       	rcall	.+376    	; 0x1cfa <__fp_splitA>
    1b82:	88 f0       	brcs	.+34     	; 0x1ba6 <__fixunssfsi+0x26>
    1b84:	9f 57       	subi	r25, 0x7F	; 127
    1b86:	90 f0       	brcs	.+36     	; 0x1bac <__fixunssfsi+0x2c>
    1b88:	b9 2f       	mov	r27, r25
    1b8a:	99 27       	eor	r25, r25
    1b8c:	b7 51       	subi	r27, 0x17	; 23
    1b8e:	a0 f0       	brcs	.+40     	; 0x1bb8 <__fixunssfsi+0x38>
    1b90:	d1 f0       	breq	.+52     	; 0x1bc6 <__fixunssfsi+0x46>
    1b92:	66 0f       	add	r22, r22
    1b94:	77 1f       	adc	r23, r23
    1b96:	88 1f       	adc	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	1a f0       	brmi	.+6      	; 0x1ba2 <__fixunssfsi+0x22>
    1b9c:	ba 95       	dec	r27
    1b9e:	c9 f7       	brne	.-14     	; 0x1b92 <__fixunssfsi+0x12>
    1ba0:	12 c0       	rjmp	.+36     	; 0x1bc6 <__fixunssfsi+0x46>
    1ba2:	b1 30       	cpi	r27, 0x01	; 1
    1ba4:	81 f0       	breq	.+32     	; 0x1bc6 <__fixunssfsi+0x46>
    1ba6:	c3 d0       	rcall	.+390    	; 0x1d2e <__fp_zero>
    1ba8:	b1 e0       	ldi	r27, 0x01	; 1
    1baa:	08 95       	ret
    1bac:	c0 c0       	rjmp	.+384    	; 0x1d2e <__fp_zero>
    1bae:	67 2f       	mov	r22, r23
    1bb0:	78 2f       	mov	r23, r24
    1bb2:	88 27       	eor	r24, r24
    1bb4:	b8 5f       	subi	r27, 0xF8	; 248
    1bb6:	39 f0       	breq	.+14     	; 0x1bc6 <__fixunssfsi+0x46>
    1bb8:	b9 3f       	cpi	r27, 0xF9	; 249
    1bba:	cc f3       	brlt	.-14     	; 0x1bae <__fixunssfsi+0x2e>
    1bbc:	86 95       	lsr	r24
    1bbe:	77 95       	ror	r23
    1bc0:	67 95       	ror	r22
    1bc2:	b3 95       	inc	r27
    1bc4:	d9 f7       	brne	.-10     	; 0x1bbc <__fixunssfsi+0x3c>
    1bc6:	3e f4       	brtc	.+14     	; 0x1bd6 <__fixunssfsi+0x56>
    1bc8:	90 95       	com	r25
    1bca:	80 95       	com	r24
    1bcc:	70 95       	com	r23
    1bce:	61 95       	neg	r22
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd6:	08 95       	ret

00001bd8 <__floatunsisf>:
    1bd8:	e8 94       	clt
    1bda:	09 c0       	rjmp	.+18     	; 0x1bee <__floatsisf+0x12>

00001bdc <__floatsisf>:
    1bdc:	97 fb       	bst	r25, 7
    1bde:	3e f4       	brtc	.+14     	; 0x1bee <__floatsisf+0x12>
    1be0:	90 95       	com	r25
    1be2:	80 95       	com	r24
    1be4:	70 95       	com	r23
    1be6:	61 95       	neg	r22
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	8f 4f       	sbci	r24, 0xFF	; 255
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	99 23       	and	r25, r25
    1bf0:	a9 f0       	breq	.+42     	; 0x1c1c <__floatsisf+0x40>
    1bf2:	f9 2f       	mov	r31, r25
    1bf4:	96 e9       	ldi	r25, 0x96	; 150
    1bf6:	bb 27       	eor	r27, r27
    1bf8:	93 95       	inc	r25
    1bfa:	f6 95       	lsr	r31
    1bfc:	87 95       	ror	r24
    1bfe:	77 95       	ror	r23
    1c00:	67 95       	ror	r22
    1c02:	b7 95       	ror	r27
    1c04:	f1 11       	cpse	r31, r1
    1c06:	f8 cf       	rjmp	.-16     	; 0x1bf8 <__floatsisf+0x1c>
    1c08:	fa f4       	brpl	.+62     	; 0x1c48 <__floatsisf+0x6c>
    1c0a:	bb 0f       	add	r27, r27
    1c0c:	11 f4       	brne	.+4      	; 0x1c12 <__floatsisf+0x36>
    1c0e:	60 ff       	sbrs	r22, 0
    1c10:	1b c0       	rjmp	.+54     	; 0x1c48 <__floatsisf+0x6c>
    1c12:	6f 5f       	subi	r22, 0xFF	; 255
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	8f 4f       	sbci	r24, 0xFF	; 255
    1c18:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1a:	16 c0       	rjmp	.+44     	; 0x1c48 <__floatsisf+0x6c>
    1c1c:	88 23       	and	r24, r24
    1c1e:	11 f0       	breq	.+4      	; 0x1c24 <__floatsisf+0x48>
    1c20:	96 e9       	ldi	r25, 0x96	; 150
    1c22:	11 c0       	rjmp	.+34     	; 0x1c46 <__floatsisf+0x6a>
    1c24:	77 23       	and	r23, r23
    1c26:	21 f0       	breq	.+8      	; 0x1c30 <__floatsisf+0x54>
    1c28:	9e e8       	ldi	r25, 0x8E	; 142
    1c2a:	87 2f       	mov	r24, r23
    1c2c:	76 2f       	mov	r23, r22
    1c2e:	05 c0       	rjmp	.+10     	; 0x1c3a <__floatsisf+0x5e>
    1c30:	66 23       	and	r22, r22
    1c32:	71 f0       	breq	.+28     	; 0x1c50 <__floatsisf+0x74>
    1c34:	96 e8       	ldi	r25, 0x86	; 134
    1c36:	86 2f       	mov	r24, r22
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	2a f0       	brmi	.+10     	; 0x1c48 <__floatsisf+0x6c>
    1c3e:	9a 95       	dec	r25
    1c40:	66 0f       	add	r22, r22
    1c42:	77 1f       	adc	r23, r23
    1c44:	88 1f       	adc	r24, r24
    1c46:	da f7       	brpl	.-10     	; 0x1c3e <__floatsisf+0x62>
    1c48:	88 0f       	add	r24, r24
    1c4a:	96 95       	lsr	r25
    1c4c:	87 95       	ror	r24
    1c4e:	97 f9       	bld	r25, 7
    1c50:	08 95       	ret

00001c52 <__fp_cmp>:
    1c52:	99 0f       	add	r25, r25
    1c54:	00 08       	sbc	r0, r0
    1c56:	55 0f       	add	r21, r21
    1c58:	aa 0b       	sbc	r26, r26
    1c5a:	e0 e8       	ldi	r30, 0x80	; 128
    1c5c:	fe ef       	ldi	r31, 0xFE	; 254
    1c5e:	16 16       	cp	r1, r22
    1c60:	17 06       	cpc	r1, r23
    1c62:	e8 07       	cpc	r30, r24
    1c64:	f9 07       	cpc	r31, r25
    1c66:	c0 f0       	brcs	.+48     	; 0x1c98 <__fp_cmp+0x46>
    1c68:	12 16       	cp	r1, r18
    1c6a:	13 06       	cpc	r1, r19
    1c6c:	e4 07       	cpc	r30, r20
    1c6e:	f5 07       	cpc	r31, r21
    1c70:	98 f0       	brcs	.+38     	; 0x1c98 <__fp_cmp+0x46>
    1c72:	62 1b       	sub	r22, r18
    1c74:	73 0b       	sbc	r23, r19
    1c76:	84 0b       	sbc	r24, r20
    1c78:	95 0b       	sbc	r25, r21
    1c7a:	39 f4       	brne	.+14     	; 0x1c8a <__fp_cmp+0x38>
    1c7c:	0a 26       	eor	r0, r26
    1c7e:	61 f0       	breq	.+24     	; 0x1c98 <__fp_cmp+0x46>
    1c80:	23 2b       	or	r18, r19
    1c82:	24 2b       	or	r18, r20
    1c84:	25 2b       	or	r18, r21
    1c86:	21 f4       	brne	.+8      	; 0x1c90 <__fp_cmp+0x3e>
    1c88:	08 95       	ret
    1c8a:	0a 26       	eor	r0, r26
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <__fp_cmp+0x3e>
    1c8e:	a1 40       	sbci	r26, 0x01	; 1
    1c90:	a6 95       	lsr	r26
    1c92:	8f ef       	ldi	r24, 0xFF	; 255
    1c94:	81 1d       	adc	r24, r1
    1c96:	81 1d       	adc	r24, r1
    1c98:	08 95       	ret

00001c9a <__fp_inf>:
    1c9a:	97 f9       	bld	r25, 7
    1c9c:	9f 67       	ori	r25, 0x7F	; 127
    1c9e:	80 e8       	ldi	r24, 0x80	; 128
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	08 95       	ret

00001ca6 <__fp_nan>:
    1ca6:	9f ef       	ldi	r25, 0xFF	; 255
    1ca8:	80 ec       	ldi	r24, 0xC0	; 192
    1caa:	08 95       	ret

00001cac <__fp_pscA>:
    1cac:	00 24       	eor	r0, r0
    1cae:	0a 94       	dec	r0
    1cb0:	16 16       	cp	r1, r22
    1cb2:	17 06       	cpc	r1, r23
    1cb4:	18 06       	cpc	r1, r24
    1cb6:	09 06       	cpc	r0, r25
    1cb8:	08 95       	ret

00001cba <__fp_pscB>:
    1cba:	00 24       	eor	r0, r0
    1cbc:	0a 94       	dec	r0
    1cbe:	12 16       	cp	r1, r18
    1cc0:	13 06       	cpc	r1, r19
    1cc2:	14 06       	cpc	r1, r20
    1cc4:	05 06       	cpc	r0, r21
    1cc6:	08 95       	ret

00001cc8 <__fp_round>:
    1cc8:	09 2e       	mov	r0, r25
    1cca:	03 94       	inc	r0
    1ccc:	00 0c       	add	r0, r0
    1cce:	11 f4       	brne	.+4      	; 0x1cd4 <__fp_round+0xc>
    1cd0:	88 23       	and	r24, r24
    1cd2:	52 f0       	brmi	.+20     	; 0x1ce8 <__fp_round+0x20>
    1cd4:	bb 0f       	add	r27, r27
    1cd6:	40 f4       	brcc	.+16     	; 0x1ce8 <__fp_round+0x20>
    1cd8:	bf 2b       	or	r27, r31
    1cda:	11 f4       	brne	.+4      	; 0x1ce0 <__fp_round+0x18>
    1cdc:	60 ff       	sbrs	r22, 0
    1cde:	04 c0       	rjmp	.+8      	; 0x1ce8 <__fp_round+0x20>
    1ce0:	6f 5f       	subi	r22, 0xFF	; 255
    1ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce8:	08 95       	ret

00001cea <__fp_split3>:
    1cea:	57 fd       	sbrc	r21, 7
    1cec:	90 58       	subi	r25, 0x80	; 128
    1cee:	44 0f       	add	r20, r20
    1cf0:	55 1f       	adc	r21, r21
    1cf2:	59 f0       	breq	.+22     	; 0x1d0a <__fp_splitA+0x10>
    1cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf6:	71 f0       	breq	.+28     	; 0x1d14 <__fp_splitA+0x1a>
    1cf8:	47 95       	ror	r20

00001cfa <__fp_splitA>:
    1cfa:	88 0f       	add	r24, r24
    1cfc:	97 fb       	bst	r25, 7
    1cfe:	99 1f       	adc	r25, r25
    1d00:	61 f0       	breq	.+24     	; 0x1d1a <__fp_splitA+0x20>
    1d02:	9f 3f       	cpi	r25, 0xFF	; 255
    1d04:	79 f0       	breq	.+30     	; 0x1d24 <__fp_splitA+0x2a>
    1d06:	87 95       	ror	r24
    1d08:	08 95       	ret
    1d0a:	12 16       	cp	r1, r18
    1d0c:	13 06       	cpc	r1, r19
    1d0e:	14 06       	cpc	r1, r20
    1d10:	55 1f       	adc	r21, r21
    1d12:	f2 cf       	rjmp	.-28     	; 0x1cf8 <__fp_split3+0xe>
    1d14:	46 95       	lsr	r20
    1d16:	f1 df       	rcall	.-30     	; 0x1cfa <__fp_splitA>
    1d18:	08 c0       	rjmp	.+16     	; 0x1d2a <__fp_splitA+0x30>
    1d1a:	16 16       	cp	r1, r22
    1d1c:	17 06       	cpc	r1, r23
    1d1e:	18 06       	cpc	r1, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	f1 cf       	rjmp	.-30     	; 0x1d06 <__fp_splitA+0xc>
    1d24:	86 95       	lsr	r24
    1d26:	71 05       	cpc	r23, r1
    1d28:	61 05       	cpc	r22, r1
    1d2a:	08 94       	sec
    1d2c:	08 95       	ret

00001d2e <__fp_zero>:
    1d2e:	e8 94       	clt

00001d30 <__fp_szero>:
    1d30:	bb 27       	eor	r27, r27
    1d32:	66 27       	eor	r22, r22
    1d34:	77 27       	eor	r23, r23
    1d36:	cb 01       	movw	r24, r22
    1d38:	97 f9       	bld	r25, 7
    1d3a:	08 95       	ret

00001d3c <__gesf2>:
    1d3c:	8a df       	rcall	.-236    	; 0x1c52 <__fp_cmp>
    1d3e:	08 f4       	brcc	.+2      	; 0x1d42 <__gesf2+0x6>
    1d40:	8f ef       	ldi	r24, 0xFF	; 255
    1d42:	08 95       	ret

00001d44 <__mulsf3>:
    1d44:	0b d0       	rcall	.+22     	; 0x1d5c <__mulsf3x>
    1d46:	c0 cf       	rjmp	.-128    	; 0x1cc8 <__fp_round>
    1d48:	b1 df       	rcall	.-158    	; 0x1cac <__fp_pscA>
    1d4a:	28 f0       	brcs	.+10     	; 0x1d56 <__mulsf3+0x12>
    1d4c:	b6 df       	rcall	.-148    	; 0x1cba <__fp_pscB>
    1d4e:	18 f0       	brcs	.+6      	; 0x1d56 <__mulsf3+0x12>
    1d50:	95 23       	and	r25, r21
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <__mulsf3+0x12>
    1d54:	a2 cf       	rjmp	.-188    	; 0x1c9a <__fp_inf>
    1d56:	a7 cf       	rjmp	.-178    	; 0x1ca6 <__fp_nan>
    1d58:	11 24       	eor	r1, r1
    1d5a:	ea cf       	rjmp	.-44     	; 0x1d30 <__fp_szero>

00001d5c <__mulsf3x>:
    1d5c:	c6 df       	rcall	.-116    	; 0x1cea <__fp_split3>
    1d5e:	a0 f3       	brcs	.-24     	; 0x1d48 <__mulsf3+0x4>

00001d60 <__mulsf3_pse>:
    1d60:	95 9f       	mul	r25, r21
    1d62:	d1 f3       	breq	.-12     	; 0x1d58 <__mulsf3+0x14>
    1d64:	95 0f       	add	r25, r21
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	55 1f       	adc	r21, r21
    1d6a:	62 9f       	mul	r22, r18
    1d6c:	f0 01       	movw	r30, r0
    1d6e:	72 9f       	mul	r23, r18
    1d70:	bb 27       	eor	r27, r27
    1d72:	f0 0d       	add	r31, r0
    1d74:	b1 1d       	adc	r27, r1
    1d76:	63 9f       	mul	r22, r19
    1d78:	aa 27       	eor	r26, r26
    1d7a:	f0 0d       	add	r31, r0
    1d7c:	b1 1d       	adc	r27, r1
    1d7e:	aa 1f       	adc	r26, r26
    1d80:	64 9f       	mul	r22, r20
    1d82:	66 27       	eor	r22, r22
    1d84:	b0 0d       	add	r27, r0
    1d86:	a1 1d       	adc	r26, r1
    1d88:	66 1f       	adc	r22, r22
    1d8a:	82 9f       	mul	r24, r18
    1d8c:	22 27       	eor	r18, r18
    1d8e:	b0 0d       	add	r27, r0
    1d90:	a1 1d       	adc	r26, r1
    1d92:	62 1f       	adc	r22, r18
    1d94:	73 9f       	mul	r23, r19
    1d96:	b0 0d       	add	r27, r0
    1d98:	a1 1d       	adc	r26, r1
    1d9a:	62 1f       	adc	r22, r18
    1d9c:	83 9f       	mul	r24, r19
    1d9e:	a0 0d       	add	r26, r0
    1da0:	61 1d       	adc	r22, r1
    1da2:	22 1f       	adc	r18, r18
    1da4:	74 9f       	mul	r23, r20
    1da6:	33 27       	eor	r19, r19
    1da8:	a0 0d       	add	r26, r0
    1daa:	61 1d       	adc	r22, r1
    1dac:	23 1f       	adc	r18, r19
    1dae:	84 9f       	mul	r24, r20
    1db0:	60 0d       	add	r22, r0
    1db2:	21 1d       	adc	r18, r1
    1db4:	82 2f       	mov	r24, r18
    1db6:	76 2f       	mov	r23, r22
    1db8:	6a 2f       	mov	r22, r26
    1dba:	11 24       	eor	r1, r1
    1dbc:	9f 57       	subi	r25, 0x7F	; 127
    1dbe:	50 40       	sbci	r21, 0x00	; 0
    1dc0:	8a f0       	brmi	.+34     	; 0x1de4 <__mulsf3_pse+0x84>
    1dc2:	e1 f0       	breq	.+56     	; 0x1dfc <__mulsf3_pse+0x9c>
    1dc4:	88 23       	and	r24, r24
    1dc6:	4a f0       	brmi	.+18     	; 0x1dda <__mulsf3_pse+0x7a>
    1dc8:	ee 0f       	add	r30, r30
    1dca:	ff 1f       	adc	r31, r31
    1dcc:	bb 1f       	adc	r27, r27
    1dce:	66 1f       	adc	r22, r22
    1dd0:	77 1f       	adc	r23, r23
    1dd2:	88 1f       	adc	r24, r24
    1dd4:	91 50       	subi	r25, 0x01	; 1
    1dd6:	50 40       	sbci	r21, 0x00	; 0
    1dd8:	a9 f7       	brne	.-22     	; 0x1dc4 <__mulsf3_pse+0x64>
    1dda:	9e 3f       	cpi	r25, 0xFE	; 254
    1ddc:	51 05       	cpc	r21, r1
    1dde:	70 f0       	brcs	.+28     	; 0x1dfc <__mulsf3_pse+0x9c>
    1de0:	5c cf       	rjmp	.-328    	; 0x1c9a <__fp_inf>
    1de2:	a6 cf       	rjmp	.-180    	; 0x1d30 <__fp_szero>
    1de4:	5f 3f       	cpi	r21, 0xFF	; 255
    1de6:	ec f3       	brlt	.-6      	; 0x1de2 <__mulsf3_pse+0x82>
    1de8:	98 3e       	cpi	r25, 0xE8	; 232
    1dea:	dc f3       	brlt	.-10     	; 0x1de2 <__mulsf3_pse+0x82>
    1dec:	86 95       	lsr	r24
    1dee:	77 95       	ror	r23
    1df0:	67 95       	ror	r22
    1df2:	b7 95       	ror	r27
    1df4:	f7 95       	ror	r31
    1df6:	e7 95       	ror	r30
    1df8:	9f 5f       	subi	r25, 0xFF	; 255
    1dfa:	c1 f7       	brne	.-16     	; 0x1dec <__mulsf3_pse+0x8c>
    1dfc:	fe 2b       	or	r31, r30
    1dfe:	88 0f       	add	r24, r24
    1e00:	91 1d       	adc	r25, r1
    1e02:	96 95       	lsr	r25
    1e04:	87 95       	ror	r24
    1e06:	97 f9       	bld	r25, 7
    1e08:	08 95       	ret

00001e0a <__divmodhi4>:
    1e0a:	97 fb       	bst	r25, 7
    1e0c:	07 2e       	mov	r0, r23
    1e0e:	16 f4       	brtc	.+4      	; 0x1e14 <__divmodhi4+0xa>
    1e10:	00 94       	com	r0
    1e12:	06 d0       	rcall	.+12     	; 0x1e20 <__divmodhi4_neg1>
    1e14:	77 fd       	sbrc	r23, 7
    1e16:	08 d0       	rcall	.+16     	; 0x1e28 <__divmodhi4_neg2>
    1e18:	13 d0       	rcall	.+38     	; 0x1e40 <__udivmodhi4>
    1e1a:	07 fc       	sbrc	r0, 7
    1e1c:	05 d0       	rcall	.+10     	; 0x1e28 <__divmodhi4_neg2>
    1e1e:	3e f4       	brtc	.+14     	; 0x1e2e <__divmodhi4_exit>

00001e20 <__divmodhi4_neg1>:
    1e20:	90 95       	com	r25
    1e22:	81 95       	neg	r24
    1e24:	9f 4f       	sbci	r25, 0xFF	; 255
    1e26:	08 95       	ret

00001e28 <__divmodhi4_neg2>:
    1e28:	70 95       	com	r23
    1e2a:	61 95       	neg	r22
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255

00001e2e <__divmodhi4_exit>:
    1e2e:	08 95       	ret

00001e30 <__tablejump2__>:
    1e30:	ee 0f       	add	r30, r30
    1e32:	ff 1f       	adc	r31, r31
    1e34:	88 1f       	adc	r24, r24
    1e36:	8b bf       	out	0x3b, r24	; 59
    1e38:	07 90       	elpm	r0, Z+
    1e3a:	f6 91       	elpm	r31, Z
    1e3c:	e0 2d       	mov	r30, r0
    1e3e:	19 94       	eijmp

00001e40 <__udivmodhi4>:
    1e40:	aa 1b       	sub	r26, r26
    1e42:	bb 1b       	sub	r27, r27
    1e44:	51 e1       	ldi	r21, 0x11	; 17
    1e46:	07 c0       	rjmp	.+14     	; 0x1e56 <__udivmodhi4_ep>

00001e48 <__udivmodhi4_loop>:
    1e48:	aa 1f       	adc	r26, r26
    1e4a:	bb 1f       	adc	r27, r27
    1e4c:	a6 17       	cp	r26, r22
    1e4e:	b7 07       	cpc	r27, r23
    1e50:	10 f0       	brcs	.+4      	; 0x1e56 <__udivmodhi4_ep>
    1e52:	a6 1b       	sub	r26, r22
    1e54:	b7 0b       	sbc	r27, r23

00001e56 <__udivmodhi4_ep>:
    1e56:	88 1f       	adc	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	5a 95       	dec	r21
    1e5c:	a9 f7       	brne	.-22     	; 0x1e48 <__udivmodhi4_loop>
    1e5e:	80 95       	com	r24
    1e60:	90 95       	com	r25
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	08 95       	ret

00001e68 <__itoa_ncheck>:
    1e68:	bb 27       	eor	r27, r27
    1e6a:	4a 30       	cpi	r20, 0x0A	; 10
    1e6c:	31 f4       	brne	.+12     	; 0x1e7a <__itoa_ncheck+0x12>
    1e6e:	99 23       	and	r25, r25
    1e70:	22 f4       	brpl	.+8      	; 0x1e7a <__itoa_ncheck+0x12>
    1e72:	bd e2       	ldi	r27, 0x2D	; 45
    1e74:	90 95       	com	r25
    1e76:	81 95       	neg	r24
    1e78:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <__utoa_common>

00001e7c <__utoa_ncheck>:
    1e7c:	bb 27       	eor	r27, r27

00001e7e <__utoa_common>:
    1e7e:	fb 01       	movw	r30, r22
    1e80:	55 27       	eor	r21, r21
    1e82:	aa 27       	eor	r26, r26
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	aa 1f       	adc	r26, r26
    1e8a:	a4 17       	cp	r26, r20
    1e8c:	10 f0       	brcs	.+4      	; 0x1e92 <__utoa_common+0x14>
    1e8e:	a4 1b       	sub	r26, r20
    1e90:	83 95       	inc	r24
    1e92:	50 51       	subi	r21, 0x10	; 16
    1e94:	b9 f7       	brne	.-18     	; 0x1e84 <__utoa_common+0x6>
    1e96:	a0 5d       	subi	r26, 0xD0	; 208
    1e98:	aa 33       	cpi	r26, 0x3A	; 58
    1e9a:	08 f0       	brcs	.+2      	; 0x1e9e <__utoa_common+0x20>
    1e9c:	a9 5d       	subi	r26, 0xD9	; 217
    1e9e:	a1 93       	st	Z+, r26
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	79 f7       	brne	.-34     	; 0x1e82 <__utoa_common+0x4>
    1ea4:	b1 11       	cpse	r27, r1
    1ea6:	b1 93       	st	Z+, r27
    1ea8:	11 92       	st	Z+, r1
    1eaa:	cb 01       	movw	r24, r22
    1eac:	00 c0       	rjmp	.+0      	; 0x1eae <strrev>

00001eae <strrev>:
    1eae:	dc 01       	movw	r26, r24
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	67 2f       	mov	r22, r23
    1eb4:	71 91       	ld	r23, Z+
    1eb6:	77 23       	and	r23, r23
    1eb8:	e1 f7       	brne	.-8      	; 0x1eb2 <strrev+0x4>
    1eba:	32 97       	sbiw	r30, 0x02	; 2
    1ebc:	04 c0       	rjmp	.+8      	; 0x1ec6 <strrev+0x18>
    1ebe:	7c 91       	ld	r23, X
    1ec0:	6d 93       	st	X+, r22
    1ec2:	70 83       	st	Z, r23
    1ec4:	62 91       	ld	r22, -Z
    1ec6:	ae 17       	cp	r26, r30
    1ec8:	bf 07       	cpc	r27, r31
    1eca:	c8 f3       	brcs	.-14     	; 0x1ebe <strrev+0x10>
    1ecc:	08 95       	ret

00001ece <_exit>:
    1ece:	f8 94       	cli

00001ed0 <__stop_program>:
    1ed0:	ff cf       	rjmp	.-2      	; 0x1ed0 <__stop_program>
