
Auomatic Robot (Slave).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000123a  000012ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000123a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  00800202  00800202  000012d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d6c  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001371  00000000  00000000  00004314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001473  00000000  00000000  00005685  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f4  00000000  00000000  00006af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010cd  00000000  00000000  000072ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001596  00000000  00000000  000083b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000994f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	fe c0       	rjmp	.+508    	; 0x20a <__vector_3>
       e:	00 00       	nop
      10:	23 c1       	rjmp	.+582    	; 0x258 <__vector_4>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__vector_5>
      16:	00 00       	nop
      18:	d1 c0       	rjmp	.+418    	; 0x1bc <__vector_6>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	ee c4       	rjmp	.+2524   	; 0xa02 <__vector_9>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ab c6       	rjmp	.+3414   	; 0xd94 <__vector_15>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	24 c1       	rjmp	.+584    	; 0x2a6 <__vector_23>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c6       	rjmp	.+3522   	; 0xe28 <__vector_25>
      66:	00 00       	nop
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e5 c6       	rjmp	.+3530   	; 0xe5c <__vector_36>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d7 c6       	rjmp	.+3502   	; 0xe7c <__vector_51>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	05 c7       	rjmp	.+3594   	; 0xee4 <__vector_54>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	28 05       	cpc	r18, r8

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	ea e3       	ldi	r30, 0x3A	; 58
      fe:	f2 e1       	ldi	r31, 0x12	; 18
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	a2 30       	cpi	r26, 0x02	; 2
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	a2 e0       	ldi	r26, 0x02	; 2
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ac 39       	cpi	r26, 0x9C	; 156
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 13 09 	call	0x1226	; 0x1226 <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	04 d4       	rcall	.+2056   	; 0x94a <main>
     142:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_ZN7encoder22Init_encoder_interruptEv>:
}
float encoder::getdistance()
	{
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
	return distance;
}
     148:	78 94       	sei
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
     150:	8f e0       	ldi	r24, 0x0F	; 15
     152:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
     156:	8d b3       	in	r24, 0x1d	; 29
     158:	8c 63       	ori	r24, 0x3C	; 60
     15a:	8d bb       	out	0x1d, r24	; 29
     15c:	08 95       	ret

0000015e <_ZN7encoder10Init_timerEv>:
     15e:	78 94       	sei
     160:	85 b5       	in	r24, 0x25	; 37
     162:	85 60       	ori	r24, 0x05	; 5
     164:	85 bd       	out	0x25, r24	; 37
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     16c:	08 95       	ret

0000016e <__vector_5>:

ISR(INT4_vect)	//for motor1
{
     16e:	1f 92       	push	r1
     170:	0f 92       	push	r0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	0f 92       	push	r0
     176:	11 24       	eor	r1, r1
     178:	0b b6       	in	r0, 0x3b	; 59
     17a:	0f 92       	push	r0
     17c:	8f 93       	push	r24
     17e:	9f 93       	push	r25
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
	if((bit_is_set(PINA,PA4)))
     184:	04 9b       	sbis	0x00, 4	; 0
     186:	08 c0       	rjmp	.+16     	; 0x198 <__vector_5+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     188:	eb e1       	ldi	r30, 0x1B	; 27
     18a:	f2 e0       	ldi	r31, 0x02	; 2
     18c:	80 81       	ld	r24, Z
     18e:	91 81       	ldd	r25, Z+1	; 0x01
     190:	01 96       	adiw	r24, 0x01	; 1
     192:	91 83       	std	Z+1, r25	; 0x01
     194:	80 83       	st	Z, r24
     196:	07 c0       	rjmp	.+14     	; 0x1a6 <__vector_5+0x38>
		inline void dcr_count(){count_encoder--;};
     198:	eb e1       	ldi	r30, 0x1B	; 27
     19a:	f2 e0       	ldi	r31, 0x02	; 2
     19c:	80 81       	ld	r24, Z
     19e:	91 81       	ldd	r25, Z+1	; 0x01
     1a0:	01 97       	sbiw	r24, 0x01	; 1
     1a2:	91 83       	std	Z+1, r25	; 0x01
     1a4:	80 83       	st	Z, r24
		e1.inc_count();
	}
	else
	e1.dcr_count();

}
     1a6:	ff 91       	pop	r31
     1a8:	ef 91       	pop	r30
     1aa:	9f 91       	pop	r25
     1ac:	8f 91       	pop	r24
     1ae:	0f 90       	pop	r0
     1b0:	0b be       	out	0x3b, r0	; 59
     1b2:	0f 90       	pop	r0
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	0f 90       	pop	r0
     1b8:	1f 90       	pop	r1
     1ba:	18 95       	reti

000001bc <__vector_6>:
ISR(INT5_vect)	//for motor2
{
     1bc:	1f 92       	push	r1
     1be:	0f 92       	push	r0
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	0f 92       	push	r0
     1c4:	11 24       	eor	r1, r1
     1c6:	0b b6       	in	r0, 0x3b	; 59
     1c8:	0f 92       	push	r0
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	ef 93       	push	r30
     1d0:	ff 93       	push	r31
	if((bit_is_set(PINA,PA1)))
     1d2:	01 9b       	sbis	0x00, 1	; 0
     1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     1d6:	e3 e1       	ldi	r30, 0x13	; 19
     1d8:	f2 e0       	ldi	r31, 0x02	; 2
     1da:	80 81       	ld	r24, Z
     1dc:	91 81       	ldd	r25, Z+1	; 0x01
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	91 83       	std	Z+1, r25	; 0x01
     1e2:	80 83       	st	Z, r24
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     1e6:	e3 e1       	ldi	r30, 0x13	; 19
     1e8:	f2 e0       	ldi	r31, 0x02	; 2
     1ea:	80 81       	ld	r24, Z
     1ec:	91 81       	ldd	r25, Z+1	; 0x01
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	91 83       	std	Z+1, r25	; 0x01
     1f2:	80 83       	st	Z, r24
	{
		e2.inc_count();
	}
	else
	e2.dcr_count();
}
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	9f 91       	pop	r25
     1fa:	8f 91       	pop	r24
     1fc:	0f 90       	pop	r0
     1fe:	0b be       	out	0x3b, r0	; 59
     200:	0f 90       	pop	r0
     202:	0f be       	out	0x3f, r0	; 63
     204:	0f 90       	pop	r0
     206:	1f 90       	pop	r1
     208:	18 95       	reti

0000020a <__vector_3>:
ISR(INT2_vect)	//for motor3
{
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	0b b6       	in	r0, 0x3b	; 59
     216:	0f 92       	push	r0
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
	if((bit_is_set(PINA,PA2)))
     220:	02 9b       	sbis	0x00, 2	; 0
     222:	08 c0       	rjmp	.+16     	; 0x234 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     224:	eb e0       	ldi	r30, 0x0B	; 11
     226:	f2 e0       	ldi	r31, 0x02	; 2
     228:	80 81       	ld	r24, Z
     22a:	91 81       	ldd	r25, Z+1	; 0x01
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	91 83       	std	Z+1, r25	; 0x01
     230:	80 83       	st	Z, r24
     232:	07 c0       	rjmp	.+14     	; 0x242 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     234:	eb e0       	ldi	r30, 0x0B	; 11
     236:	f2 e0       	ldi	r31, 0x02	; 2
     238:	80 81       	ld	r24, Z
     23a:	91 81       	ldd	r25, Z+1	; 0x01
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	91 83       	std	Z+1, r25	; 0x01
     240:	80 83       	st	Z, r24
	{
		e3.inc_count();
	}
	else
		e3.dcr_count();
}
     242:	ff 91       	pop	r31
     244:	ef 91       	pop	r30
     246:	9f 91       	pop	r25
     248:	8f 91       	pop	r24
     24a:	0f 90       	pop	r0
     24c:	0b be       	out	0x3b, r0	; 59
     24e:	0f 90       	pop	r0
     250:	0f be       	out	0x3f, r0	; 63
     252:	0f 90       	pop	r0
     254:	1f 90       	pop	r1
     256:	18 95       	reti

00000258 <__vector_4>:
ISR(INT3_vect)	//for motor4
{
     258:	1f 92       	push	r1
     25a:	0f 92       	push	r0
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	0f 92       	push	r0
     260:	11 24       	eor	r1, r1
     262:	0b b6       	in	r0, 0x3b	; 59
     264:	0f 92       	push	r0
     266:	8f 93       	push	r24
     268:	9f 93       	push	r25
     26a:	ef 93       	push	r30
     26c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA3)))
     26e:	03 9b       	sbis	0x00, 3	; 0
     270:	08 c0       	rjmp	.+16     	; 0x282 <__vector_4+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     272:	e3 e0       	ldi	r30, 0x03	; 3
     274:	f2 e0       	ldi	r31, 0x02	; 2
     276:	80 81       	ld	r24, Z
     278:	91 81       	ldd	r25, Z+1	; 0x01
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	91 83       	std	Z+1, r25	; 0x01
     27e:	80 83       	st	Z, r24
     280:	07 c0       	rjmp	.+14     	; 0x290 <__vector_4+0x38>
		inline void dcr_count(){count_encoder--;};
     282:	e3 e0       	ldi	r30, 0x03	; 3
     284:	f2 e0       	ldi	r31, 0x02	; 2
     286:	80 81       	ld	r24, Z
     288:	91 81       	ldd	r25, Z+1	; 0x01
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	91 83       	std	Z+1, r25	; 0x01
     28e:	80 83       	st	Z, r24
	{
		e4.inc_count();
	}
	else
	e4.dcr_count();
}
     290:	ff 91       	pop	r31
     292:	ef 91       	pop	r30
     294:	9f 91       	pop	r25
     296:	8f 91       	pop	r24
     298:	0f 90       	pop	r0
     29a:	0b be       	out	0x3b, r0	; 59
     29c:	0f 90       	pop	r0
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	0f 90       	pop	r0
     2a2:	1f 90       	pop	r1
     2a4:	18 95       	reti

000002a6 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     2a6:	1f 92       	push	r1
     2a8:	0f 92       	push	r0
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	0f 92       	push	r0
     2ae:	11 24       	eor	r1, r1
     2b0:	0b b6       	in	r0, 0x3b	; 59
     2b2:	0f 92       	push	r0
     2b4:	8f 93       	push	r24
     2b6:	9f 93       	push	r25
     2b8:	ef 93       	push	r30
     2ba:	ff 93       	push	r31
	datacount++;
     2bc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
     2c0:	8f 5f       	subi	r24, 0xFF	; 255
     2c2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	
		PidUpdateFlagMotor = true;
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <PidUpdateFlagMotor>
		
 	if(datacount == 2){
     2cc:	82 30       	cpi	r24, 0x02	; 2
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <__vector_23+0x2e>
 		//getdata = true;
 		datacount = 0;
     2d0:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     2d4:	eb e1       	ldi	r30, 0x1B	; 27
     2d6:	f2 e0       	ldi	r31, 0x02	; 2
     2d8:	80 81       	ld	r24, Z
     2da:	91 81       	ldd	r25, Z+1	; 0x01
     2dc:	93 83       	std	Z+3, r25	; 0x03
     2de:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     2e0:	11 82       	std	Z+1, r1	; 0x01
     2e2:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     2e4:	e3 e1       	ldi	r30, 0x13	; 19
     2e6:	f2 e0       	ldi	r31, 0x02	; 2
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	93 83       	std	Z+3, r25	; 0x03
     2ee:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     2f0:	11 82       	std	Z+1, r1	; 0x01
     2f2:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     2f4:	eb e0       	ldi	r30, 0x0B	; 11
     2f6:	f2 e0       	ldi	r31, 0x02	; 2
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	93 83       	std	Z+3, r25	; 0x03
     2fe:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     300:	11 82       	std	Z+1, r1	; 0x01
     302:	10 82       	st	Z, r1
		void Init_timer();
		inline void inc_count(){count_encoder++;};
		inline void dcr_count(){count_encoder--;};
		inline void resetCount(){count_encoder = 0;};
		inline void setspeed(){
			speed = count_encoder;
     304:	e3 e0       	ldi	r30, 0x03	; 3
     306:	f2 e0       	ldi	r31, 0x02	; 2
     308:	80 81       	ld	r24, Z
     30a:	91 81       	ldd	r25, Z+1	; 0x01
     30c:	93 83       	std	Z+3, r25	; 0x03
     30e:	82 83       	std	Z+2, r24	; 0x02
			count_encoder = 0;
     310:	11 82       	std	Z+1, r1	; 0x01
     312:	10 82       	st	Z, r1
	e1.setspeed();
	e2.setspeed();
	e3.setspeed();
	e4.setspeed();
	
     314:	ff 91       	pop	r31
     316:	ef 91       	pop	r30
     318:	9f 91       	pop	r25
     31a:	8f 91       	pop	r24
     31c:	0f 90       	pop	r0
     31e:	0b be       	out	0x3b, r0	; 59
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <_Z12setTuningsM1a>:
UART3TransmitData(md.ki * 100);
UART3TransmitString(" ");
UART3TransmitData(md.kd * 2);

UART3TransmitString("\r\n");
}
     32a:	4f 92       	push	r4
     32c:	5f 92       	push	r5
     32e:	6f 92       	push	r6
     330:	7f 92       	push	r7
     332:	8f 92       	push	r8
     334:	9f 92       	push	r9
     336:	af 92       	push	r10
     338:	bf 92       	push	r11
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <e1+0x2>
     34e:	30 91 1e 02 	lds	r19, 0x021E	; 0x80021e <e1+0x3>
     352:	c5 e7       	ldi	r28, 0x75	; 117
     354:	d2 e0       	ldi	r29, 0x02	; 2
     356:	3d 87       	std	Y+13, r19	; 0x0d
     358:	2c 87       	std	Y+12, r18	; 0x0c
     35a:	08 2f       	mov	r16, r24
     35c:	88 0f       	add	r24, r24
     35e:	11 0b       	sbc	r17, r17
     360:	02 1b       	sub	r16, r18
     362:	13 0b       	sbc	r17, r19
     364:	19 8b       	std	Y+17, r17	; 0x11
     366:	08 8b       	std	Y+16, r16	; 0x10
     368:	b8 01       	movw	r22, r16
     36a:	01 2e       	mov	r0, r17
     36c:	00 0c       	add	r0, r0
     36e:	88 0b       	sbc	r24, r24
     370:	99 0b       	sbc	r25, r25
     372:	6a d6       	rcall	.+3284   	; 0x1048 <__floatsisf>
     374:	4b 01       	movw	r8, r22
     376:	5c 01       	movw	r10, r24
     378:	2c 81       	ldd	r18, Y+4	; 0x04
     37a:	3d 81       	ldd	r19, Y+5	; 0x05
     37c:	4e 81       	ldd	r20, Y+6	; 0x06
     37e:	5f 81       	ldd	r21, Y+7	; 0x07
     380:	ef d6       	rcall	.+3550   	; 0x1160 <__mulsf3>
     382:	2a 89       	ldd	r18, Y+18	; 0x12
     384:	3b 89       	ldd	r19, Y+19	; 0x13
     386:	4c 89       	ldd	r20, Y+20	; 0x14
     388:	5d 89       	ldd	r21, Y+21	; 0x15
     38a:	c7 d5       	rcall	.+2958   	; 0xf1a <__addsf3>
     38c:	6b 01       	movw	r12, r22
     38e:	7c 01       	movw	r14, r24
     390:	6a 8b       	std	Y+18, r22	; 0x12
     392:	7b 8b       	std	Y+19, r23	; 0x13
     394:	8c 8b       	std	Y+20, r24	; 0x14
     396:	9d 8b       	std	Y+21, r25	; 0x15
     398:	8e 89       	ldd	r24, Y+22	; 0x16
     39a:	9f 89       	ldd	r25, Y+23	; 0x17
     39c:	b8 01       	movw	r22, r16
     39e:	68 1b       	sub	r22, r24
     3a0:	79 0b       	sbc	r23, r25
     3a2:	07 2e       	mov	r0, r23
     3a4:	00 0c       	add	r0, r0
     3a6:	88 0b       	sbc	r24, r24
     3a8:	99 0b       	sbc	r25, r25
     3aa:	4e d6       	rcall	.+3228   	; 0x1048 <__floatsisf>
     3ac:	28 85       	ldd	r18, Y+8	; 0x08
     3ae:	39 85       	ldd	r19, Y+9	; 0x09
     3b0:	4a 85       	ldd	r20, Y+10	; 0x0a
     3b2:	5b 85       	ldd	r21, Y+11	; 0x0b
     3b4:	d5 d6       	rcall	.+3498   	; 0x1160 <__mulsf3>
     3b6:	2b 01       	movw	r4, r22
     3b8:	3c 01       	movw	r6, r24
     3ba:	28 81       	ld	r18, Y
     3bc:	39 81       	ldd	r19, Y+1	; 0x01
     3be:	4a 81       	ldd	r20, Y+2	; 0x02
     3c0:	5b 81       	ldd	r21, Y+3	; 0x03
     3c2:	c5 01       	movw	r24, r10
     3c4:	b4 01       	movw	r22, r8
     3c6:	cc d6       	rcall	.+3480   	; 0x1160 <__mulsf3>
     3c8:	a7 01       	movw	r20, r14
     3ca:	96 01       	movw	r18, r12
     3cc:	a6 d5       	rcall	.+2892   	; 0xf1a <__addsf3>
     3ce:	9b 01       	movw	r18, r22
     3d0:	ac 01       	movw	r20, r24
     3d2:	c3 01       	movw	r24, r6
     3d4:	b2 01       	movw	r22, r4
     3d6:	a1 d5       	rcall	.+2882   	; 0xf1a <__addsf3>
     3d8:	04 d6       	rcall	.+3080   	; 0xfe2 <__fixsfsi>
     3da:	7f 87       	std	Y+15, r23	; 0x0f
     3dc:	6e 87       	std	Y+14, r22	; 0x0e
     3de:	1f 8b       	std	Y+23, r17	; 0x17
     3e0:	0e 8b       	std	Y+22, r16	; 0x16
     3e2:	28 8d       	ldd	r18, Y+24	; 0x18
     3e4:	39 8d       	ldd	r19, Y+25	; 0x19
     3e6:	62 0f       	add	r22, r18
     3e8:	73 1f       	adc	r23, r19
     3ea:	cb 01       	movw	r24, r22
     3ec:	77 23       	and	r23, r23
     3ee:	24 f4       	brge	.+8      	; 0x3f8 <_Z12setTuningsM1a+0xce>
     3f0:	88 27       	eor	r24, r24
     3f2:	99 27       	eor	r25, r25
     3f4:	86 1b       	sub	r24, r22
     3f6:	97 0b       	sbc	r25, r23
     3f8:	8a 3f       	cpi	r24, 0xFA	; 250
     3fa:	91 05       	cpc	r25, r1
     3fc:	2c f4       	brge	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fe:	70 93 8e 02 	sts	0x028E, r23	; 0x80028e <ma+0x19>
     402:	60 93 8d 02 	sts	0x028D, r22	; 0x80028d <ma+0x18>
     406:	10 c0       	rjmp	.+32     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     408:	16 16       	cp	r1, r22
     40a:	17 06       	cpc	r1, r23
     40c:	3c f4       	brge	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     40e:	89 ef       	ldi	r24, 0xF9	; 249
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <ma+0x19>
     416:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <ma+0x18>
     41a:	06 c0       	rjmp	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     41c:	87 e0       	ldi	r24, 0x07	; 7
     41e:	9f ef       	ldi	r25, 0xFF	; 255
     420:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <ma+0x19>
     424:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <ma+0x18>
     428:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <ma+0x18>
     42c:	70 91 8e 02 	lds	r23, 0x028E	; 0x80028e <ma+0x19>
     430:	86 e2       	ldi	r24, 0x26	; 38
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	73 d4       	rcall	.+2278   	; 0xd1c <_ZN5Motor11SetOcrValueEi>
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	af 90       	pop	r10
     44a:	9f 90       	pop	r9
     44c:	8f 90       	pop	r8
     44e:	7f 90       	pop	r7
     450:	6f 90       	pop	r6
     452:	5f 90       	pop	r5
     454:	4f 90       	pop	r4
     456:	08 95       	ret

00000458 <_Z12setTuningsM2a>:
     458:	4f 92       	push	r4
     45a:	5f 92       	push	r5
     45c:	6f 92       	push	r6
     45e:	7f 92       	push	r7
     460:	8f 92       	push	r8
     462:	9f 92       	push	r9
     464:	af 92       	push	r10
     466:	bf 92       	push	r11
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <e2+0x2>
     47c:	30 91 16 02 	lds	r19, 0x0216	; 0x800216 <e2+0x3>
     480:	cb e5       	ldi	r28, 0x5B	; 91
     482:	d2 e0       	ldi	r29, 0x02	; 2
     484:	3d 87       	std	Y+13, r19	; 0x0d
     486:	2c 87       	std	Y+12, r18	; 0x0c
     488:	08 2f       	mov	r16, r24
     48a:	88 0f       	add	r24, r24
     48c:	11 0b       	sbc	r17, r17
     48e:	02 1b       	sub	r16, r18
     490:	13 0b       	sbc	r17, r19
     492:	19 8b       	std	Y+17, r17	; 0x11
     494:	08 8b       	std	Y+16, r16	; 0x10
     496:	b8 01       	movw	r22, r16
     498:	01 2e       	mov	r0, r17
     49a:	00 0c       	add	r0, r0
     49c:	88 0b       	sbc	r24, r24
     49e:	99 0b       	sbc	r25, r25
     4a0:	d3 d5       	rcall	.+2982   	; 0x1048 <__floatsisf>
     4a2:	4b 01       	movw	r8, r22
     4a4:	5c 01       	movw	r10, r24
     4a6:	2c 81       	ldd	r18, Y+4	; 0x04
     4a8:	3d 81       	ldd	r19, Y+5	; 0x05
     4aa:	4e 81       	ldd	r20, Y+6	; 0x06
     4ac:	5f 81       	ldd	r21, Y+7	; 0x07
     4ae:	58 d6       	rcall	.+3248   	; 0x1160 <__mulsf3>
     4b0:	2a 89       	ldd	r18, Y+18	; 0x12
     4b2:	3b 89       	ldd	r19, Y+19	; 0x13
     4b4:	4c 89       	ldd	r20, Y+20	; 0x14
     4b6:	5d 89       	ldd	r21, Y+21	; 0x15
     4b8:	30 d5       	rcall	.+2656   	; 0xf1a <__addsf3>
     4ba:	6b 01       	movw	r12, r22
     4bc:	7c 01       	movw	r14, r24
     4be:	6a 8b       	std	Y+18, r22	; 0x12
     4c0:	7b 8b       	std	Y+19, r23	; 0x13
     4c2:	8c 8b       	std	Y+20, r24	; 0x14
     4c4:	9d 8b       	std	Y+21, r25	; 0x15
     4c6:	8e 89       	ldd	r24, Y+22	; 0x16
     4c8:	9f 89       	ldd	r25, Y+23	; 0x17
     4ca:	b8 01       	movw	r22, r16
     4cc:	68 1b       	sub	r22, r24
     4ce:	79 0b       	sbc	r23, r25
     4d0:	07 2e       	mov	r0, r23
     4d2:	00 0c       	add	r0, r0
     4d4:	88 0b       	sbc	r24, r24
     4d6:	99 0b       	sbc	r25, r25
     4d8:	b7 d5       	rcall	.+2926   	; 0x1048 <__floatsisf>
     4da:	28 85       	ldd	r18, Y+8	; 0x08
     4dc:	39 85       	ldd	r19, Y+9	; 0x09
     4de:	4a 85       	ldd	r20, Y+10	; 0x0a
     4e0:	5b 85       	ldd	r21, Y+11	; 0x0b
     4e2:	3e d6       	rcall	.+3196   	; 0x1160 <__mulsf3>
     4e4:	2b 01       	movw	r4, r22
     4e6:	3c 01       	movw	r6, r24
     4e8:	28 81       	ld	r18, Y
     4ea:	39 81       	ldd	r19, Y+1	; 0x01
     4ec:	4a 81       	ldd	r20, Y+2	; 0x02
     4ee:	5b 81       	ldd	r21, Y+3	; 0x03
     4f0:	c5 01       	movw	r24, r10
     4f2:	b4 01       	movw	r22, r8
     4f4:	35 d6       	rcall	.+3178   	; 0x1160 <__mulsf3>
     4f6:	a7 01       	movw	r20, r14
     4f8:	96 01       	movw	r18, r12
     4fa:	0f d5       	rcall	.+2590   	; 0xf1a <__addsf3>
     4fc:	9b 01       	movw	r18, r22
     4fe:	ac 01       	movw	r20, r24
     500:	c3 01       	movw	r24, r6
     502:	b2 01       	movw	r22, r4
     504:	0a d5       	rcall	.+2580   	; 0xf1a <__addsf3>
     506:	6d d5       	rcall	.+2778   	; 0xfe2 <__fixsfsi>
     508:	7f 87       	std	Y+15, r23	; 0x0f
     50a:	6e 87       	std	Y+14, r22	; 0x0e
     50c:	1f 8b       	std	Y+23, r17	; 0x17
     50e:	0e 8b       	std	Y+22, r16	; 0x16
     510:	28 8d       	ldd	r18, Y+24	; 0x18
     512:	39 8d       	ldd	r19, Y+25	; 0x19
     514:	62 0f       	add	r22, r18
     516:	73 1f       	adc	r23, r19
     518:	cb 01       	movw	r24, r22
     51a:	77 23       	and	r23, r23
     51c:	24 f4       	brge	.+8      	; 0x526 <_Z12setTuningsM2a+0xce>
     51e:	88 27       	eor	r24, r24
     520:	99 27       	eor	r25, r25
     522:	86 1b       	sub	r24, r22
     524:	97 0b       	sbc	r25, r23
     526:	8a 3f       	cpi	r24, 0xFA	; 250
     528:	91 05       	cpc	r25, r1
     52a:	2c f4       	brge	.+10     	; 0x536 <_Z12setTuningsM2a+0xde>
     52c:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <mb+0x19>
     530:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <mb+0x18>
     534:	10 c0       	rjmp	.+32     	; 0x556 <_Z12setTuningsM2a+0xfe>
     536:	16 16       	cp	r1, r22
     538:	17 06       	cpc	r1, r23
     53a:	3c f4       	brge	.+14     	; 0x54a <_Z12setTuningsM2a+0xf2>
     53c:	89 ef       	ldi	r24, 0xF9	; 249
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <mb+0x19>
     544:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <mb+0x18>
     548:	06 c0       	rjmp	.+12     	; 0x556 <_Z12setTuningsM2a+0xfe>
     54a:	87 e0       	ldi	r24, 0x07	; 7
     54c:	9f ef       	ldi	r25, 0xFF	; 255
     54e:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <mb+0x19>
     552:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <mb+0x18>
     556:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <mb+0x18>
     55a:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <mb+0x19>
     55e:	85 e2       	ldi	r24, 0x25	; 37
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	dc d3       	rcall	.+1976   	; 0xd1c <_ZN5Motor11SetOcrValueEi>
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	8f 90       	pop	r8
     57c:	7f 90       	pop	r7
     57e:	6f 90       	pop	r6
     580:	5f 90       	pop	r5
     582:	4f 90       	pop	r4
     584:	08 95       	ret

00000586 <_Z12setTuningsM3a>:
     586:	4f 92       	push	r4
     588:	5f 92       	push	r5
     58a:	6f 92       	push	r6
     58c:	7f 92       	push	r7
     58e:	8f 92       	push	r8
     590:	9f 92       	push	r9
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <e3+0x2>
     5aa:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <e3+0x3>
     5ae:	c1 e4       	ldi	r28, 0x41	; 65
     5b0:	d2 e0       	ldi	r29, 0x02	; 2
     5b2:	3d 87       	std	Y+13, r19	; 0x0d
     5b4:	2c 87       	std	Y+12, r18	; 0x0c
     5b6:	08 2f       	mov	r16, r24
     5b8:	88 0f       	add	r24, r24
     5ba:	11 0b       	sbc	r17, r17
     5bc:	02 1b       	sub	r16, r18
     5be:	13 0b       	sbc	r17, r19
     5c0:	19 8b       	std	Y+17, r17	; 0x11
     5c2:	08 8b       	std	Y+16, r16	; 0x10
     5c4:	b8 01       	movw	r22, r16
     5c6:	01 2e       	mov	r0, r17
     5c8:	00 0c       	add	r0, r0
     5ca:	88 0b       	sbc	r24, r24
     5cc:	99 0b       	sbc	r25, r25
     5ce:	3c d5       	rcall	.+2680   	; 0x1048 <__floatsisf>
     5d0:	4b 01       	movw	r8, r22
     5d2:	5c 01       	movw	r10, r24
     5d4:	2c 81       	ldd	r18, Y+4	; 0x04
     5d6:	3d 81       	ldd	r19, Y+5	; 0x05
     5d8:	4e 81       	ldd	r20, Y+6	; 0x06
     5da:	5f 81       	ldd	r21, Y+7	; 0x07
     5dc:	c1 d5       	rcall	.+2946   	; 0x1160 <__mulsf3>
     5de:	2a 89       	ldd	r18, Y+18	; 0x12
     5e0:	3b 89       	ldd	r19, Y+19	; 0x13
     5e2:	4c 89       	ldd	r20, Y+20	; 0x14
     5e4:	5d 89       	ldd	r21, Y+21	; 0x15
     5e6:	99 d4       	rcall	.+2354   	; 0xf1a <__addsf3>
     5e8:	6b 01       	movw	r12, r22
     5ea:	7c 01       	movw	r14, r24
     5ec:	6a 8b       	std	Y+18, r22	; 0x12
     5ee:	7b 8b       	std	Y+19, r23	; 0x13
     5f0:	8c 8b       	std	Y+20, r24	; 0x14
     5f2:	9d 8b       	std	Y+21, r25	; 0x15
     5f4:	8e 89       	ldd	r24, Y+22	; 0x16
     5f6:	9f 89       	ldd	r25, Y+23	; 0x17
     5f8:	b8 01       	movw	r22, r16
     5fa:	68 1b       	sub	r22, r24
     5fc:	79 0b       	sbc	r23, r25
     5fe:	07 2e       	mov	r0, r23
     600:	00 0c       	add	r0, r0
     602:	88 0b       	sbc	r24, r24
     604:	99 0b       	sbc	r25, r25
     606:	20 d5       	rcall	.+2624   	; 0x1048 <__floatsisf>
     608:	28 85       	ldd	r18, Y+8	; 0x08
     60a:	39 85       	ldd	r19, Y+9	; 0x09
     60c:	4a 85       	ldd	r20, Y+10	; 0x0a
     60e:	5b 85       	ldd	r21, Y+11	; 0x0b
     610:	a7 d5       	rcall	.+2894   	; 0x1160 <__mulsf3>
     612:	2b 01       	movw	r4, r22
     614:	3c 01       	movw	r6, r24
     616:	28 81       	ld	r18, Y
     618:	39 81       	ldd	r19, Y+1	; 0x01
     61a:	4a 81       	ldd	r20, Y+2	; 0x02
     61c:	5b 81       	ldd	r21, Y+3	; 0x03
     61e:	c5 01       	movw	r24, r10
     620:	b4 01       	movw	r22, r8
     622:	9e d5       	rcall	.+2876   	; 0x1160 <__mulsf3>
     624:	a7 01       	movw	r20, r14
     626:	96 01       	movw	r18, r12
     628:	78 d4       	rcall	.+2288   	; 0xf1a <__addsf3>
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	c3 01       	movw	r24, r6
     630:	b2 01       	movw	r22, r4
     632:	73 d4       	rcall	.+2278   	; 0xf1a <__addsf3>
     634:	d6 d4       	rcall	.+2476   	; 0xfe2 <__fixsfsi>
     636:	7f 87       	std	Y+15, r23	; 0x0f
     638:	6e 87       	std	Y+14, r22	; 0x0e
     63a:	1f 8b       	std	Y+23, r17	; 0x17
     63c:	0e 8b       	std	Y+22, r16	; 0x16
     63e:	28 8d       	ldd	r18, Y+24	; 0x18
     640:	39 8d       	ldd	r19, Y+25	; 0x19
     642:	62 0f       	add	r22, r18
     644:	73 1f       	adc	r23, r19
     646:	cb 01       	movw	r24, r22
     648:	77 23       	and	r23, r23
     64a:	24 f4       	brge	.+8      	; 0x654 <_Z12setTuningsM3a+0xce>
     64c:	88 27       	eor	r24, r24
     64e:	99 27       	eor	r25, r25
     650:	86 1b       	sub	r24, r22
     652:	97 0b       	sbc	r25, r23
     654:	8a 3f       	cpi	r24, 0xFA	; 250
     656:	91 05       	cpc	r25, r1
     658:	2c f4       	brge	.+10     	; 0x664 <_Z12setTuningsM3a+0xde>
     65a:	70 93 5a 02 	sts	0x025A, r23	; 0x80025a <mc+0x19>
     65e:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <mc+0x18>
     662:	10 c0       	rjmp	.+32     	; 0x684 <_Z12setTuningsM3a+0xfe>
     664:	16 16       	cp	r1, r22
     666:	17 06       	cpc	r1, r23
     668:	3c f4       	brge	.+14     	; 0x678 <_Z12setTuningsM3a+0xf2>
     66a:	89 ef       	ldi	r24, 0xF9	; 249
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <mc+0x19>
     672:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <mc+0x18>
     676:	06 c0       	rjmp	.+12     	; 0x684 <_Z12setTuningsM3a+0xfe>
     678:	87 e0       	ldi	r24, 0x07	; 7
     67a:	9f ef       	ldi	r25, 0xFF	; 255
     67c:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <mc+0x19>
     680:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <mc+0x18>
     684:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <mc+0x18>
     688:	70 91 5a 02 	lds	r23, 0x025A	; 0x80025a <mc+0x19>
     68c:	84 e2       	ldi	r24, 0x24	; 36
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	45 d3       	rcall	.+1674   	; 0xd1c <_ZN5Motor11SetOcrValueEi>
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	df 90       	pop	r13
     6a0:	cf 90       	pop	r12
     6a2:	bf 90       	pop	r11
     6a4:	af 90       	pop	r10
     6a6:	9f 90       	pop	r9
     6a8:	8f 90       	pop	r8
     6aa:	7f 90       	pop	r7
     6ac:	6f 90       	pop	r6
     6ae:	5f 90       	pop	r5
     6b0:	4f 90       	pop	r4
     6b2:	08 95       	ret

000006b4 <_Z12setTuningsM4a>:
     6b4:	4f 92       	push	r4
     6b6:	5f 92       	push	r5
     6b8:	6f 92       	push	r6
     6ba:	7f 92       	push	r7
     6bc:	8f 92       	push	r8
     6be:	9f 92       	push	r9
     6c0:	af 92       	push	r10
     6c2:	bf 92       	push	r11
     6c4:	cf 92       	push	r12
     6c6:	df 92       	push	r13
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	20 91 05 02 	lds	r18, 0x0205	; 0x800205 <e4+0x2>
     6d8:	30 91 06 02 	lds	r19, 0x0206	; 0x800206 <e4+0x3>
     6dc:	c7 e2       	ldi	r28, 0x27	; 39
     6de:	d2 e0       	ldi	r29, 0x02	; 2
     6e0:	3d 87       	std	Y+13, r19	; 0x0d
     6e2:	2c 87       	std	Y+12, r18	; 0x0c
     6e4:	08 2f       	mov	r16, r24
     6e6:	88 0f       	add	r24, r24
     6e8:	11 0b       	sbc	r17, r17
     6ea:	02 1b       	sub	r16, r18
     6ec:	13 0b       	sbc	r17, r19
     6ee:	19 8b       	std	Y+17, r17	; 0x11
     6f0:	08 8b       	std	Y+16, r16	; 0x10
     6f2:	b8 01       	movw	r22, r16
     6f4:	01 2e       	mov	r0, r17
     6f6:	00 0c       	add	r0, r0
     6f8:	88 0b       	sbc	r24, r24
     6fa:	99 0b       	sbc	r25, r25
     6fc:	a5 d4       	rcall	.+2378   	; 0x1048 <__floatsisf>
     6fe:	4b 01       	movw	r8, r22
     700:	5c 01       	movw	r10, r24
     702:	2c 81       	ldd	r18, Y+4	; 0x04
     704:	3d 81       	ldd	r19, Y+5	; 0x05
     706:	4e 81       	ldd	r20, Y+6	; 0x06
     708:	5f 81       	ldd	r21, Y+7	; 0x07
     70a:	2a d5       	rcall	.+2644   	; 0x1160 <__mulsf3>
     70c:	2a 89       	ldd	r18, Y+18	; 0x12
     70e:	3b 89       	ldd	r19, Y+19	; 0x13
     710:	4c 89       	ldd	r20, Y+20	; 0x14
     712:	5d 89       	ldd	r21, Y+21	; 0x15
     714:	02 d4       	rcall	.+2052   	; 0xf1a <__addsf3>
     716:	6b 01       	movw	r12, r22
     718:	7c 01       	movw	r14, r24
     71a:	6a 8b       	std	Y+18, r22	; 0x12
     71c:	7b 8b       	std	Y+19, r23	; 0x13
     71e:	8c 8b       	std	Y+20, r24	; 0x14
     720:	9d 8b       	std	Y+21, r25	; 0x15
     722:	8e 89       	ldd	r24, Y+22	; 0x16
     724:	9f 89       	ldd	r25, Y+23	; 0x17
     726:	b8 01       	movw	r22, r16
     728:	68 1b       	sub	r22, r24
     72a:	79 0b       	sbc	r23, r25
     72c:	07 2e       	mov	r0, r23
     72e:	00 0c       	add	r0, r0
     730:	88 0b       	sbc	r24, r24
     732:	99 0b       	sbc	r25, r25
     734:	89 d4       	rcall	.+2322   	; 0x1048 <__floatsisf>
     736:	28 85       	ldd	r18, Y+8	; 0x08
     738:	39 85       	ldd	r19, Y+9	; 0x09
     73a:	4a 85       	ldd	r20, Y+10	; 0x0a
     73c:	5b 85       	ldd	r21, Y+11	; 0x0b
     73e:	10 d5       	rcall	.+2592   	; 0x1160 <__mulsf3>
     740:	2b 01       	movw	r4, r22
     742:	3c 01       	movw	r6, r24
     744:	28 81       	ld	r18, Y
     746:	39 81       	ldd	r19, Y+1	; 0x01
     748:	4a 81       	ldd	r20, Y+2	; 0x02
     74a:	5b 81       	ldd	r21, Y+3	; 0x03
     74c:	c5 01       	movw	r24, r10
     74e:	b4 01       	movw	r22, r8
     750:	07 d5       	rcall	.+2574   	; 0x1160 <__mulsf3>
     752:	a7 01       	movw	r20, r14
     754:	96 01       	movw	r18, r12
     756:	e1 d3       	rcall	.+1986   	; 0xf1a <__addsf3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	c3 01       	movw	r24, r6
     75e:	b2 01       	movw	r22, r4
     760:	dc d3       	rcall	.+1976   	; 0xf1a <__addsf3>
     762:	3f d4       	rcall	.+2174   	; 0xfe2 <__fixsfsi>
     764:	7f 87       	std	Y+15, r23	; 0x0f
     766:	6e 87       	std	Y+14, r22	; 0x0e
     768:	1f 8b       	std	Y+23, r17	; 0x17
     76a:	0e 8b       	std	Y+22, r16	; 0x16
     76c:	28 8d       	ldd	r18, Y+24	; 0x18
     76e:	39 8d       	ldd	r19, Y+25	; 0x19
     770:	62 0f       	add	r22, r18
     772:	73 1f       	adc	r23, r19
     774:	cb 01       	movw	r24, r22
     776:	77 23       	and	r23, r23
     778:	24 f4       	brge	.+8      	; 0x782 <_Z12setTuningsM4a+0xce>
     77a:	88 27       	eor	r24, r24
     77c:	99 27       	eor	r25, r25
     77e:	86 1b       	sub	r24, r22
     780:	97 0b       	sbc	r25, r23
     782:	8a 3f       	cpi	r24, 0xFA	; 250
     784:	91 05       	cpc	r25, r1
     786:	2c f4       	brge	.+10     	; 0x792 <_Z12setTuningsM4a+0xde>
     788:	70 93 40 02 	sts	0x0240, r23	; 0x800240 <md+0x19>
     78c:	60 93 3f 02 	sts	0x023F, r22	; 0x80023f <md+0x18>
     790:	10 c0       	rjmp	.+32     	; 0x7b2 <_Z12setTuningsM4a+0xfe>
     792:	16 16       	cp	r1, r22
     794:	17 06       	cpc	r1, r23
     796:	3c f4       	brge	.+14     	; 0x7a6 <_Z12setTuningsM4a+0xf2>
     798:	89 ef       	ldi	r24, 0xF9	; 249
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <md+0x19>
     7a0:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <md+0x18>
     7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <_Z12setTuningsM4a+0xfe>
     7a6:	87 e0       	ldi	r24, 0x07	; 7
     7a8:	9f ef       	ldi	r25, 0xFF	; 255
     7aa:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <md+0x19>
     7ae:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <md+0x18>
     7b2:	60 91 3f 02 	lds	r22, 0x023F	; 0x80023f <md+0x18>
     7b6:	70 91 40 02 	lds	r23, 0x0240	; 0x800240 <md+0x19>
     7ba:	83 e2       	ldi	r24, 0x23	; 35
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	ae d2       	rcall	.+1372   	; 0xd1c <_ZN5Motor11SetOcrValueEi>
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	bf 90       	pop	r11
     7d2:	af 90       	pop	r10
     7d4:	9f 90       	pop	r9
     7d6:	8f 90       	pop	r8
     7d8:	7f 90       	pop	r7
     7da:	6f 90       	pop	r6
     7dc:	5f 90       	pop	r5
     7de:	4f 90       	pop	r4
     7e0:	08 95       	ret

000007e2 <_Z10computePidv>:
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <MotorPidFlag>
     7ea:	88 23       	and	r24, r24
     7ec:	91 f0       	breq	.+36     	; 0x812 <_Z10computePidv+0x30>
     7ee:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <PidUpdateFlagMotor>
     7f2:	88 23       	and	r24, r24
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <_Z10computePidv+0x16>
     7f6:	4f c0       	rjmp	.+158    	; 0x896 <_Z10computePidv+0xb4>
     7f8:	c4 e9       	ldi	r28, 0x94	; 148
     7fa:	d2 e0       	ldi	r29, 0x02	; 2
     7fc:	88 81       	ld	r24, Y
     7fe:	95 dd       	rcall	.-1238   	; 0x32a <_Z12setTuningsM1a>
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	2a de       	rcall	.-940    	; 0x458 <_Z12setTuningsM2a>
     804:	8a 81       	ldd	r24, Y+2	; 0x02
     806:	bf de       	rcall	.-642    	; 0x586 <_Z12setTuningsM3a>
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	54 df       	rcall	.-344    	; 0x6b4 <_Z12setTuningsM4a>
     80c:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <PidUpdateFlagMotor>
     810:	42 c0       	rjmp	.+132    	; 0x896 <_Z10computePidv+0xb4>
     812:	c4 e9       	ldi	r28, 0x94	; 148
     814:	d2 e0       	ldi	r29, 0x02	; 2
     816:	68 81       	ld	r22, Y
     818:	06 2e       	mov	r0, r22
     81a:	00 0c       	add	r0, r0
     81c:	77 0b       	sbc	r23, r23
     81e:	88 0b       	sbc	r24, r24
     820:	99 0b       	sbc	r25, r25
     822:	12 d4       	rcall	.+2084   	; 0x1048 <__floatsisf>
     824:	2d ec       	ldi	r18, 0xCD	; 205
     826:	3c ec       	ldi	r19, 0xCC	; 204
     828:	4c ea       	ldi	r20, 0xAC	; 172
     82a:	50 e4       	ldi	r21, 0x40	; 64
     82c:	99 d4       	rcall	.+2354   	; 0x1160 <__mulsf3>
     82e:	d9 d3       	rcall	.+1970   	; 0xfe2 <__fixsfsi>
     830:	86 e2       	ldi	r24, 0x26	; 38
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	73 d2       	rcall	.+1254   	; 0xd1c <_ZN5Motor11SetOcrValueEi>
     836:	69 81       	ldd	r22, Y+1	; 0x01
     838:	06 2e       	mov	r0, r22
     83a:	00 0c       	add	r0, r0
     83c:	77 0b       	sbc	r23, r23
     83e:	88 0b       	sbc	r24, r24
     840:	99 0b       	sbc	r25, r25
     842:	02 d4       	rcall	.+2052   	; 0x1048 <__floatsisf>
     844:	2d ec       	ldi	r18, 0xCD	; 205
     846:	3c ec       	ldi	r19, 0xCC	; 204
     848:	4c ea       	ldi	r20, 0xAC	; 172
     84a:	50 e4       	ldi	r21, 0x40	; 64
     84c:	89 d4       	rcall	.+2322   	; 0x1160 <__mulsf3>
     84e:	c9 d3       	rcall	.+1938   	; 0xfe2 <__fixsfsi>
     850:	85 e2       	ldi	r24, 0x25	; 37
     852:	92 e0       	ldi	r25, 0x02	; 2
     854:	63 d2       	rcall	.+1222   	; 0xd1c <_ZN5Motor11SetOcrValueEi>
     856:	6a 81       	ldd	r22, Y+2	; 0x02
     858:	06 2e       	mov	r0, r22
     85a:	00 0c       	add	r0, r0
     85c:	77 0b       	sbc	r23, r23
     85e:	88 0b       	sbc	r24, r24
     860:	99 0b       	sbc	r25, r25
     862:	f2 d3       	rcall	.+2020   	; 0x1048 <__floatsisf>
     864:	2d ec       	ldi	r18, 0xCD	; 205
     866:	3c ec       	ldi	r19, 0xCC	; 204
     868:	4c ea       	ldi	r20, 0xAC	; 172
     86a:	50 e4       	ldi	r21, 0x40	; 64
     86c:	79 d4       	rcall	.+2290   	; 0x1160 <__mulsf3>
     86e:	b9 d3       	rcall	.+1906   	; 0xfe2 <__fixsfsi>
     870:	84 e2       	ldi	r24, 0x24	; 36
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	53 d2       	rcall	.+1190   	; 0xd1c <_ZN5Motor11SetOcrValueEi>
     876:	6b 81       	ldd	r22, Y+3	; 0x03
     878:	06 2e       	mov	r0, r22
     87a:	00 0c       	add	r0, r0
     87c:	77 0b       	sbc	r23, r23
     87e:	88 0b       	sbc	r24, r24
     880:	99 0b       	sbc	r25, r25
     882:	e2 d3       	rcall	.+1988   	; 0x1048 <__floatsisf>
     884:	2d ec       	ldi	r18, 0xCD	; 205
     886:	3c ec       	ldi	r19, 0xCC	; 204
     888:	4c ea       	ldi	r20, 0xAC	; 172
     88a:	50 e4       	ldi	r21, 0x40	; 64
     88c:	69 d4       	rcall	.+2258   	; 0x1160 <__mulsf3>
     88e:	a9 d3       	rcall	.+1874   	; 0xfe2 <__fixsfsi>
     890:	83 e2       	ldi	r24, 0x23	; 35
     892:	92 e0       	ldi	r25, 0x02	; 2
     894:	43 d2       	rcall	.+1158   	; 0xd1c <_ZN5Motor11SetOcrValueEi>
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <_Z9stopDrivev>:
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	86 e2       	ldi	r24, 0x26	; 38
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	fa d1       	rcall	.+1012   	; 0xc9a <_ZN5Motor9StopMotorEv>
     8a6:	85 e2       	ldi	r24, 0x25	; 37
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	f7 d1       	rcall	.+1006   	; 0xc9a <_ZN5Motor9StopMotorEv>
     8ac:	84 e2       	ldi	r24, 0x24	; 36
     8ae:	92 e0       	ldi	r25, 0x02	; 2
     8b0:	f4 d1       	rcall	.+1000   	; 0xc9a <_ZN5Motor9StopMotorEv>
     8b2:	83 e2       	ldi	r24, 0x23	; 35
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	f1 d1       	rcall	.+994    	; 0xc9a <_ZN5Motor9StopMotorEv>
     8b8:	87 e2       	ldi	r24, 0x27	; 39
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	fc 01       	movw	r30, r24
     8be:	17 8a       	std	Z+23, r1	; 0x17
     8c0:	16 8a       	std	Z+22, r1	; 0x16
     8c2:	c1 e4       	ldi	r28, 0x41	; 65
     8c4:	d2 e0       	ldi	r29, 0x02	; 2
     8c6:	1f 8a       	std	Y+23, r1	; 0x17
     8c8:	1e 8a       	std	Y+22, r1	; 0x16
     8ca:	ab e5       	ldi	r26, 0x5B	; 91
     8cc:	b2 e0       	ldi	r27, 0x02	; 2
     8ce:	57 96       	adiw	r26, 0x17	; 23
     8d0:	1c 92       	st	X, r1
     8d2:	1e 92       	st	-X, r1
     8d4:	56 97       	sbiw	r26, 0x16	; 22
     8d6:	25 e7       	ldi	r18, 0x75	; 117
     8d8:	32 e0       	ldi	r19, 0x02	; 2
     8da:	f9 01       	movw	r30, r18
     8dc:	17 8a       	std	Z+23, r1	; 0x17
     8de:	16 8a       	std	Z+22, r1	; 0x16
     8e0:	fc 01       	movw	r30, r24
     8e2:	12 8a       	std	Z+18, r1	; 0x12
     8e4:	13 8a       	std	Z+19, r1	; 0x13
     8e6:	14 8a       	std	Z+20, r1	; 0x14
     8e8:	15 8a       	std	Z+21, r1	; 0x15
     8ea:	1a 8a       	std	Y+18, r1	; 0x12
     8ec:	1b 8a       	std	Y+19, r1	; 0x13
     8ee:	1c 8a       	std	Y+20, r1	; 0x14
     8f0:	1d 8a       	std	Y+21, r1	; 0x15
     8f2:	52 96       	adiw	r26, 0x12	; 18
     8f4:	1d 92       	st	X+, r1
     8f6:	1d 92       	st	X+, r1
     8f8:	1d 92       	st	X+, r1
     8fa:	1c 92       	st	X, r1
     8fc:	55 97       	sbiw	r26, 0x15	; 21
     8fe:	f9 01       	movw	r30, r18
     900:	12 8a       	std	Z+18, r1	; 0x12
     902:	13 8a       	std	Z+19, r1	; 0x13
     904:	14 8a       	std	Z+20, r1	; 0x14
     906:	15 8a       	std	Z+21, r1	; 0x15
     908:	fc 01       	movw	r30, r24
     90a:	17 86       	std	Z+15, r1	; 0x0f
     90c:	16 86       	std	Z+14, r1	; 0x0e
     90e:	1f 86       	std	Y+15, r1	; 0x0f
     910:	1e 86       	std	Y+14, r1	; 0x0e
     912:	1f 96       	adiw	r26, 0x0f	; 15
     914:	1c 92       	st	X, r1
     916:	1e 92       	st	-X, r1
     918:	1e 97       	sbiw	r26, 0x0e	; 14
     91a:	f9 01       	movw	r30, r18
     91c:	17 86       	std	Z+15, r1	; 0x0f
     91e:	16 86       	std	Z+14, r1	; 0x0e
     920:	fc 01       	movw	r30, r24
     922:	11 8e       	std	Z+25, r1	; 0x19
     924:	10 8e       	std	Z+24, r1	; 0x18
     926:	19 8e       	std	Y+25, r1	; 0x19
     928:	18 8e       	std	Y+24, r1	; 0x18
     92a:	59 96       	adiw	r26, 0x19	; 25
     92c:	1c 92       	st	X, r1
     92e:	1e 92       	st	-X, r1
     930:	58 97       	sbiw	r26, 0x18	; 24
     932:	f9 01       	movw	r30, r18
     934:	11 8e       	std	Z+25, r1	; 0x19
     936:	10 8e       	std	Z+24, r1	; 0x18
     938:	e4 e9       	ldi	r30, 0x94	; 148
     93a:	f2 e0       	ldi	r31, 0x02	; 2
     93c:	10 82       	st	Z, r1
     93e:	11 82       	std	Z+1, r1	; 0x01
     940:	12 82       	std	Z+2, r1	; 0x02
     942:	13 82       	std	Z+3, r1	; 0x03
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <main>:

int main(void)
{
 	PCICR |= (1<<PCIE0);
     94a:	e8 e6       	ldi	r30, 0x68	; 104
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	81 60       	ori	r24, 0x01	; 1
     952:	80 83       	st	Z, r24
 	PCMSK0 |= (1<<PCINT5);
     954:	eb e6       	ldi	r30, 0x6B	; 107
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	80 62       	ori	r24, 0x20	; 32
     95c:	80 83       	st	Z, r24
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     95e:	e5 e7       	ldi	r30, 0x75	; 117
     960:	f2 e0       	ldi	r31, 0x02	; 2
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	a0 e8       	ldi	r26, 0x80	; 128
     968:	bf e3       	ldi	r27, 0x3F	; 63
     96a:	80 83       	st	Z, r24
     96c:	91 83       	std	Z+1, r25	; 0x01
     96e:	a2 83       	std	Z+2, r26	; 0x02
     970:	b3 83       	std	Z+3, r27	; 0x03
		ki = KI;
     972:	14 82       	std	Z+4, r1	; 0x04
     974:	15 82       	std	Z+5, r1	; 0x05
     976:	16 82       	std	Z+6, r1	; 0x06
     978:	17 82       	std	Z+7, r1	; 0x07
		kd = KD;
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	60 ec       	ldi	r22, 0xC0	; 192
     980:	70 e4       	ldi	r23, 0x40	; 64
     982:	40 87       	std	Z+8, r20	; 0x08
     984:	51 87       	std	Z+9, r21	; 0x09
     986:	62 87       	std	Z+10, r22	; 0x0a
     988:	73 87       	std	Z+11, r23	; 0x0b
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     98a:	eb e5       	ldi	r30, 0x5B	; 91
     98c:	f2 e0       	ldi	r31, 0x02	; 2
     98e:	80 83       	st	Z, r24
     990:	91 83       	std	Z+1, r25	; 0x01
     992:	a2 83       	std	Z+2, r26	; 0x02
     994:	b3 83       	std	Z+3, r27	; 0x03
		ki = KI;
     996:	14 82       	std	Z+4, r1	; 0x04
     998:	15 82       	std	Z+5, r1	; 0x05
     99a:	16 82       	std	Z+6, r1	; 0x06
     99c:	17 82       	std	Z+7, r1	; 0x07
		kd = KD;
     99e:	40 87       	std	Z+8, r20	; 0x08
     9a0:	51 87       	std	Z+9, r21	; 0x09
     9a2:	62 87       	std	Z+10, r22	; 0x0a
     9a4:	73 87       	std	Z+11, r23	; 0x0b
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     9a6:	e1 e4       	ldi	r30, 0x41	; 65
     9a8:	f2 e0       	ldi	r31, 0x02	; 2
     9aa:	4a e9       	ldi	r20, 0x9A	; 154
     9ac:	59 e9       	ldi	r21, 0x99	; 153
     9ae:	69 eb       	ldi	r22, 0xB9	; 185
     9b0:	7f e3       	ldi	r23, 0x3F	; 63
     9b2:	40 83       	st	Z, r20
     9b4:	51 83       	std	Z+1, r21	; 0x01
     9b6:	62 83       	std	Z+2, r22	; 0x02
     9b8:	73 83       	std	Z+3, r23	; 0x03
		ki = KI;
     9ba:	14 82       	std	Z+4, r1	; 0x04
     9bc:	15 82       	std	Z+5, r1	; 0x05
     9be:	16 82       	std	Z+6, r1	; 0x06
     9c0:	17 82       	std	Z+7, r1	; 0x07
		kd = KD;
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e4       	ldi	r23, 0x40	; 64
     9ca:	40 87       	std	Z+8, r20	; 0x08
     9cc:	51 87       	std	Z+9, r21	; 0x09
     9ce:	62 87       	std	Z+10, r22	; 0x0a
     9d0:	73 87       	std	Z+11, r23	; 0x0b
	inline float getkp(void){return kp;}
	inline float getkd(void){return kd;}
	inline float getki(void){return ki;}
	void setpid(double KP, double KI, double KD)
	{
		kp = KP;
     9d2:	e7 e2       	ldi	r30, 0x27	; 39
     9d4:	f2 e0       	ldi	r31, 0x02	; 2
     9d6:	80 83       	st	Z, r24
     9d8:	91 83       	std	Z+1, r25	; 0x01
     9da:	a2 83       	std	Z+2, r26	; 0x02
     9dc:	b3 83       	std	Z+3, r27	; 0x03
		ki = KI;
     9de:	14 82       	std	Z+4, r1	; 0x04
     9e0:	15 82       	std	Z+5, r1	; 0x05
     9e2:	16 82       	std	Z+6, r1	; 0x06
     9e4:	17 82       	std	Z+7, r1	; 0x07
		kd = KD;
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	a0 e4       	ldi	r26, 0x40	; 64
     9ec:	b0 e4       	ldi	r27, 0x40	; 64
     9ee:	80 87       	std	Z+8, r24	; 0x08
     9f0:	91 87       	std	Z+9, r25	; 0x09
     9f2:	a2 87       	std	Z+10, r26	; 0x0a
     9f4:	b3 87       	std	Z+11, r27	; 0x0b
	ma.setpid(1,0,6);//(0,0,0);//(2.6,0,3);
	mb.setpid(1,0,6);//(0,0,0);//(2.2,0,4);
	mc.setpid(1.45,0,2);//(0,0,0);//(1.9,0,6);
	md.setpid(1,0,3);//(0,0,0);//(1.95,0,6);
	
	initUART0();
     9f6:	ec d1       	rcall	.+984    	; 0xdd0 <_Z9initUART0v>
	initUART2();
     9f8:	f7 d1       	rcall	.+1006   	; 0xde8 <_Z9initUART2v>
	initUART3();
     9fa:	0a d2       	rcall	.+1044   	; 0xe10 <_Z9initUART3v>

	sei();
     9fc:	78 94       	sei
		 		//UART0TransmitString("\r\n");
		//
		 		//////////////////////////////////////////////////////////////////
//
		//
		computePid();	
     9fe:	f1 de       	rcall	.-542    	; 0x7e2 <_Z10computePidv>
     a00:	fe cf       	rjmp	.-4      	; 0x9fe <main+0xb4>

00000a02 <__vector_9>:
     a02:	1f 92       	push	r1
	}
}
 ISR(PCINT0_vect)
 {
     a04:	0f 92       	push	r0
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	0f 92       	push	r0
     a0a:	11 24       	eor	r1, r1
     a0c:	0b b6       	in	r0, 0x3b	; 59
     a0e:	0f 92       	push	r0
     a10:	2f 93       	push	r18
     a12:	3f 93       	push	r19
     a14:	4f 93       	push	r20
     a16:	5f 93       	push	r21
     a18:	6f 93       	push	r22
     a1a:	7f 93       	push	r23
     a1c:	8f 93       	push	r24
     a1e:	9f 93       	push	r25
     a20:	af 93       	push	r26
     a22:	bf 93       	push	r27
     a24:	ef 93       	push	r30
     a26:	ff 93       	push	r31
	stopDrive();
     a28:	39 df       	rcall	.-398    	; 0x89c <_Z9stopDrivev>
}
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	bf 91       	pop	r27
     a30:	af 91       	pop	r26
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	7f 91       	pop	r23
     a38:	6f 91       	pop	r22
     a3a:	5f 91       	pop	r21
     a3c:	4f 91       	pop	r20
     a3e:	3f 91       	pop	r19
     a40:	2f 91       	pop	r18
     a42:	0f 90       	pop	r0
     a44:	0b be       	out	0x3b, r0	; 59
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0
     a4c:	1f 90       	pop	r1
     a4e:	18 95       	reti

00000a50 <_GLOBAL__sub_I_MotorPidFlag>:
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <m1>
			InitPWM();
     a56:	86 e2       	ldi	r24, 0x26	; 38
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	3b d0       	rcall	.+118    	; 0xad2 <_ZN5Motor7InitPWMEv>
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <m2>
			InitPWM();
     a62:	85 e2       	ldi	r24, 0x25	; 37
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	35 d0       	rcall	.+106    	; 0xad2 <_ZN5Motor7InitPWMEv>
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <m3>
			InitPWM();
     a6e:	84 e2       	ldi	r24, 0x24	; 36
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	2f d0       	rcall	.+94     	; 0xad2 <_ZN5Motor7InitPWMEv>
     private:
		uint8_t num;	
     public:
		
		Motor(uint8_t no){
			num = no;
     a74:	84 e0       	ldi	r24, 0x04	; 4
     a76:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <m4>
			InitPWM();
     a7a:	83 e2       	ldi	r24, 0x23	; 35
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	29 d0       	rcall	.+82     	; 0xad2 <_ZN5Motor7InitPWMEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     a80:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <e1+0x1>
     a84:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <e1>
			Init_encoder_interrupt();
     a88:	8b e1       	ldi	r24, 0x1B	; 27
     a8a:	92 e0       	ldi	r25, 0x02	; 2
			Init_timer();
     a8c:	5d db       	rcall	.-2374   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
     a8e:	8b e1       	ldi	r24, 0x1B	; 27
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	65 db       	rcall	.-2358   	; 0x15e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     a94:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <e2+0x1>
     a98:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <e2>
			Init_encoder_interrupt();
     a9c:	83 e1       	ldi	r24, 0x13	; 19
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	53 db       	rcall	.-2394   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     aa2:	83 e1       	ldi	r24, 0x13	; 19
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	5b db       	rcall	.-2378   	; 0x15e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     aa8:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <e3+0x1>
     aac:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <e3>
			Init_encoder_interrupt();
     ab0:	8b e0       	ldi	r24, 0x0B	; 11
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	49 db       	rcall	.-2414   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
     ab6:	8b e0       	ldi	r24, 0x0B	; 11
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	51 db       	rcall	.-2398   	; 0x15e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
     abc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <e4+0x1>
     ac0:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <e4>
			Init_encoder_interrupt();
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	3f db       	rcall	.-2434   	; 0x148 <_ZN7encoder22Init_encoder_interruptEv>
     aca:	83 e0       	ldi	r24, 0x03	; 3
			Init_timer();
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	47 cb       	rjmp	.-2418   	; 0x15e <_ZN7encoder10Init_timerEv>
     ad0:	08 95       	ret

00000ad2 <_ZN5Motor7InitPWMEv>:
     ad2:	fc 01       	movw	r30, r24
     ad4:	80 81       	ld	r24, Z



void Motor::InitPWM()
{
	if (num==1)
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	f1 f4       	brne	.+60     	; 0xb16 <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
     ada:	e7 e0       	ldi	r30, 0x07	; 7
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	80 81       	ld	r24, Z
     ae0:	80 64       	ori	r24, 0x40	; 64
     ae2:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     ae4:	80 81       	ld	r24, Z
     ae6:	80 68       	ori	r24, 0x80	; 128
     ae8:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	80 81       	ld	r24, Z
     af0:	80 62       	ori	r24, 0x20	; 32
     af2:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
     af4:	e0 e2       	ldi	r30, 0x20	; 32
     af6:	f1 e0       	ldi	r31, 0x01	; 1
     af8:	80 81       	ld	r24, Z
     afa:	8a 60       	ori	r24, 0x0A	; 10
     afc:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     afe:	e1 e2       	ldi	r30, 0x21	; 33
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	80 81       	ld	r24, Z
     b04:	8a 61       	ori	r24, 0x1A	; 26
     b06:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     b08:	89 ef       	ldi	r24, 0xF9	; 249
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     b10:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     b14:	08 95       	ret
	}
	else if(num==2)
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	f1 f4       	brne	.+60     	; 0xb56 <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
     b1a:	e7 e0       	ldi	r30, 0x07	; 7
     b1c:	f1 e0       	ldi	r31, 0x01	; 1
     b1e:	80 81       	ld	r24, Z
     b20:	88 60       	ori	r24, 0x08	; 8
     b22:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
     b24:	80 81       	ld	r24, Z
     b26:	84 60       	ori	r24, 0x04	; 4
     b28:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
     b2a:	ea e0       	ldi	r30, 0x0A	; 10
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	80 81       	ld	r24, Z
     b30:	88 60       	ori	r24, 0x08	; 8
     b32:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
     b34:	e0 e2       	ldi	r30, 0x20	; 32
     b36:	f1 e0       	ldi	r31, 0x01	; 1
     b38:	80 81       	ld	r24, Z
     b3a:	82 68       	ori	r24, 0x82	; 130
     b3c:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
     b3e:	e1 e2       	ldi	r30, 0x21	; 33
     b40:	f1 e0       	ldi	r31, 0x01	; 1
     b42:	80 81       	ld	r24, Z
     b44:	8a 61       	ori	r24, 0x1A	; 26
     b46:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
     b48:	89 ef       	ldi	r24, 0xF9	; 249
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     b50:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     b54:	08 95       	ret
	}
	else if(num==3)
     b56:	83 30       	cpi	r24, 0x03	; 3
     b58:	f1 f4       	brne	.+60     	; 0xb96 <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
     b5a:	e7 e0       	ldi	r30, 0x07	; 7
     b5c:	f1 e0       	ldi	r31, 0x01	; 1
     b5e:	80 81       	ld	r24, Z
     b60:	80 61       	ori	r24, 0x10	; 16
     b62:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
     b64:	80 81       	ld	r24, Z
     b66:	80 62       	ori	r24, 0x20	; 32
     b68:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
     b6a:	ea e0       	ldi	r30, 0x0A	; 10
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	80 81       	ld	r24, Z
     b70:	80 61       	ori	r24, 0x10	; 16
     b72:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
     b74:	e0 e2       	ldi	r30, 0x20	; 32
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	80 81       	ld	r24, Z
     b7a:	82 62       	ori	r24, 0x22	; 34
     b7c:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
     b7e:	e1 e2       	ldi	r30, 0x21	; 33
     b80:	f1 e0       	ldi	r31, 0x01	; 1
     b82:	80 81       	ld	r24, Z
     b84:	8a 61       	ori	r24, 0x1A	; 26
     b86:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
     b88:	89 ef       	ldi	r24, 0xF9	; 249
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     b90:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     b94:	08 95       	ret
	} 
	else if(num==4)
     b96:	84 30       	cpi	r24, 0x04	; 4
     b98:	e9 f4       	brne	.+58     	; 0xbd4 <_ZN5Motor7InitPWMEv+0x102>
	{
		OUTPUT(DD_F4);
     b9a:	e7 e0       	ldi	r30, 0x07	; 7
     b9c:	f1 e0       	ldi	r31, 0x01	; 1
     b9e:	80 81       	ld	r24, Z
     ba0:	82 60       	ori	r24, 0x02	; 2
     ba2:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
     ba4:	80 81       	ld	r24, Z
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
     baa:	e1 e0       	ldi	r30, 0x01	; 1
     bac:	f1 e0       	ldi	r31, 0x01	; 1
     bae:	80 81       	ld	r24, Z
     bb0:	88 60       	ori	r24, 0x08	; 8
     bb2:	80 83       	st	Z, r24

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
     bb4:	e0 ea       	ldi	r30, 0xA0	; 160
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	82 68       	ori	r24, 0x82	; 130
     bbc:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
     bbe:	e1 ea       	ldi	r30, 0xA1	; 161
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	8a 61       	ori	r24, 0x1A	; 26
     bc6:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
     bc8:	89 ef       	ldi	r24, 0xF9	; 249
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
     bd0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
     bd4:	08 95       	ret

00000bd6 <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
     bd6:	fc 01       	movw	r30, r24
     bd8:	80 81       	ld	r24, Z
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	91 f0       	breq	.+36     	; 0xc02 <_ZN5Motor19SetForwardDirectionEv+0x2c>
     bde:	18 f4       	brcc	.+6      	; 0xbe6 <_ZN5Motor19SetForwardDirectionEv+0x10>
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	31 f0       	breq	.+12     	; 0xbf0 <_ZN5Motor19SetForwardDirectionEv+0x1a>
     be4:	08 95       	ret
     be6:	83 30       	cpi	r24, 0x03	; 3
     be8:	a9 f0       	breq	.+42     	; 0xc14 <_ZN5Motor19SetForwardDirectionEv+0x3e>
     bea:	84 30       	cpi	r24, 0x04	; 4
     bec:	e1 f0       	breq	.+56     	; 0xc26 <_ZN5Motor19SetForwardDirectionEv+0x50>
     bee:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
     bf0:	e8 e0       	ldi	r30, 0x08	; 8
     bf2:	f1 e0       	ldi	r31, 0x01	; 1
     bf4:	80 81       	ld	r24, Z
     bf6:	80 64       	ori	r24, 0x40	; 64
     bf8:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     bfa:	80 81       	ld	r24, Z
     bfc:	8f 77       	andi	r24, 0x7F	; 127
     bfe:	80 83       	st	Z, r24
			break;
     c00:	08 95       	ret
		case 2:
			SET		(DD_F2);
     c02:	e8 e0       	ldi	r30, 0x08	; 8
     c04:	f1 e0       	ldi	r31, 0x01	; 1
     c06:	80 81       	ld	r24, Z
     c08:	88 60       	ori	r24, 0x08	; 8
     c0a:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     c0c:	80 81       	ld	r24, Z
     c0e:	8b 7f       	andi	r24, 0xFB	; 251
     c10:	80 83       	st	Z, r24
			break;
     c12:	08 95       	ret
		case 3:
			SET		(DD_F3);
     c14:	e8 e0       	ldi	r30, 0x08	; 8
     c16:	f1 e0       	ldi	r31, 0x01	; 1
     c18:	80 81       	ld	r24, Z
     c1a:	80 61       	ori	r24, 0x10	; 16
     c1c:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     c1e:	80 81       	ld	r24, Z
     c20:	8f 7d       	andi	r24, 0xDF	; 223
     c22:	80 83       	st	Z, r24
			break;
     c24:	08 95       	ret
		case 4:
			SET		(DD_F4);
     c26:	e8 e0       	ldi	r30, 0x08	; 8
     c28:	f1 e0       	ldi	r31, 0x01	; 1
     c2a:	80 81       	ld	r24, Z
     c2c:	82 60       	ori	r24, 0x02	; 2
     c2e:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     c30:	80 81       	ld	r24, Z
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	80 83       	st	Z, r24
     c36:	08 95       	ret

00000c38 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
     c38:	fc 01       	movw	r30, r24
     c3a:	80 81       	ld	r24, Z
     c3c:	82 30       	cpi	r24, 0x02	; 2
     c3e:	91 f0       	breq	.+36     	; 0xc64 <_ZN5Motor19SetReverseDirectionEv+0x2c>
     c40:	18 f4       	brcc	.+6      	; 0xc48 <_ZN5Motor19SetReverseDirectionEv+0x10>
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	31 f0       	breq	.+12     	; 0xc52 <_ZN5Motor19SetReverseDirectionEv+0x1a>
     c46:	08 95       	ret
     c48:	83 30       	cpi	r24, 0x03	; 3
     c4a:	a9 f0       	breq	.+42     	; 0xc76 <_ZN5Motor19SetReverseDirectionEv+0x3e>
     c4c:	84 30       	cpi	r24, 0x04	; 4
     c4e:	e1 f0       	breq	.+56     	; 0xc88 <_ZN5Motor19SetReverseDirectionEv+0x50>
     c50:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     c52:	e8 e0       	ldi	r30, 0x08	; 8
     c54:	f1 e0       	ldi	r31, 0x01	; 1
     c56:	80 81       	ld	r24, Z
     c58:	8f 7b       	andi	r24, 0xBF	; 191
     c5a:	80 83       	st	Z, r24
			SET		(DD_B1);
     c5c:	80 81       	ld	r24, Z
     c5e:	80 68       	ori	r24, 0x80	; 128
     c60:	80 83       	st	Z, r24
			break;
     c62:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     c64:	e8 e0       	ldi	r30, 0x08	; 8
     c66:	f1 e0       	ldi	r31, 0x01	; 1
     c68:	80 81       	ld	r24, Z
     c6a:	87 7f       	andi	r24, 0xF7	; 247
     c6c:	80 83       	st	Z, r24
			SET		(DD_B2);
     c6e:	80 81       	ld	r24, Z
     c70:	84 60       	ori	r24, 0x04	; 4
     c72:	80 83       	st	Z, r24
			break;
     c74:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     c76:	e8 e0       	ldi	r30, 0x08	; 8
     c78:	f1 e0       	ldi	r31, 0x01	; 1
     c7a:	80 81       	ld	r24, Z
     c7c:	8f 7e       	andi	r24, 0xEF	; 239
     c7e:	80 83       	st	Z, r24
			SET		(DD_B3);
     c80:	80 81       	ld	r24, Z
     c82:	80 62       	ori	r24, 0x20	; 32
     c84:	80 83       	st	Z, r24
			break;
     c86:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     c88:	e8 e0       	ldi	r30, 0x08	; 8
     c8a:	f1 e0       	ldi	r31, 0x01	; 1
     c8c:	80 81       	ld	r24, Z
     c8e:	8d 7f       	andi	r24, 0xFD	; 253
     c90:	80 83       	st	Z, r24
			SET		(DD_B4);
     c92:	80 81       	ld	r24, Z
     c94:	81 60       	ori	r24, 0x01	; 1
     c96:	80 83       	st	Z, r24
     c98:	08 95       	ret

00000c9a <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
     c9a:	fc 01       	movw	r30, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	b1 f0       	breq	.+44     	; 0xcce <_ZN5Motor9StopMotorEv+0x34>
     ca2:	18 f4       	brcc	.+6      	; 0xcaa <_ZN5Motor9StopMotorEv+0x10>
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	31 f0       	breq	.+12     	; 0xcb4 <_ZN5Motor9StopMotorEv+0x1a>
     ca8:	08 95       	ret
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	e9 f0       	breq	.+58     	; 0xce8 <_ZN5Motor9StopMotorEv+0x4e>
     cae:	84 30       	cpi	r24, 0x04	; 4
     cb0:	41 f1       	breq	.+80     	; 0xd02 <_ZN5Motor9StopMotorEv+0x68>
     cb2:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     cb4:	e8 e0       	ldi	r30, 0x08	; 8
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	80 81       	ld	r24, Z
     cba:	8f 7b       	andi	r24, 0xBF	; 191
     cbc:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     cbe:	80 81       	ld	r24, Z
     cc0:	8f 77       	andi	r24, 0x7F	; 127
     cc2:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
     cc4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     cc8:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     ccc:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     cce:	e8 e0       	ldi	r30, 0x08	; 8
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	80 81       	ld	r24, Z
     cd4:	87 7f       	andi	r24, 0xF7	; 247
     cd6:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     cd8:	80 81       	ld	r24, Z
     cda:	8b 7f       	andi	r24, 0xFB	; 251
     cdc:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
     cde:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     ce2:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     ce6:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     ce8:	e8 e0       	ldi	r30, 0x08	; 8
     cea:	f1 e0       	ldi	r31, 0x01	; 1
     cec:	80 81       	ld	r24, Z
     cee:	8f 7e       	andi	r24, 0xEF	; 239
     cf0:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     cf2:	80 81       	ld	r24, Z
     cf4:	8f 7d       	andi	r24, 0xDF	; 223
     cf6:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
     cf8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     cfc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     d00:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     d02:	e8 e0       	ldi	r30, 0x08	; 8
     d04:	f1 e0       	ldi	r31, 0x01	; 1
     d06:	80 81       	ld	r24, Z
     d08:	8d 7f       	andi	r24, 0xFD	; 253
     d0a:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     d0c:	80 81       	ld	r24, Z
     d0e:	8e 7f       	andi	r24, 0xFE	; 254
     d10:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
     d12:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     d16:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     d1a:	08 95       	ret

00000d1c <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	8c 01       	movw	r16, r24
     d26:	eb 01       	movw	r28, r22
    if (Ocr > 0)
     d28:	1c 16       	cp	r1, r28
     d2a:	1d 06       	cpc	r1, r29
     d2c:	0c f4       	brge	.+2      	; 0xd30 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
     d2e:	53 df       	rcall	.-346    	; 0xbd6 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr >= MAX_VALUE)
     d30:	c9 3f       	cpi	r28, 0xF9	; 249
     d32:	d1 05       	cpc	r29, r1
     d34:	44 f4       	brge	.+16     	; 0xd46 <_ZN5Motor11SetOcrValueEi+0x2a>
		Ocr = MAX_VALUE;
	if( Ocr < 0)
     d36:	dd 23       	and	r29, r29
     d38:	44 f4       	brge	.+16     	; 0xd4a <_ZN5Motor11SetOcrValueEi+0x2e>
	{
        Ocr = -Ocr;
     d3a:	d1 95       	neg	r29
     d3c:	c1 95       	neg	r28
     d3e:	d1 09       	sbc	r29, r1
        SetReverseDirection();
     d40:	c8 01       	movw	r24, r16
     d42:	7a df       	rcall	.-268    	; 0xc38 <_ZN5Motor19SetReverseDirectionEv>
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <_ZN5Motor11SetOcrValueEi+0x2e>
void Motor::SetOcrValue(int Ocr)
{
    if (Ocr > 0)
        SetForwardDirection();
	if( Ocr >= MAX_VALUE)
		Ocr = MAX_VALUE;
     d46:	c9 ef       	ldi	r28, 0xF9	; 249
     d48:	d0 e0       	ldi	r29, 0x00	; 0
	if( Ocr < 0)
	{
        Ocr = -Ocr;
        SetReverseDirection();
	}
	switch(num)
     d4a:	f8 01       	movw	r30, r16
     d4c:	80 81       	ld	r24, Z
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	71 f0       	breq	.+28     	; 0xd6e <_ZN5Motor11SetOcrValueEi+0x52>
     d52:	18 f4       	brcc	.+6      	; 0xd5a <_ZN5Motor11SetOcrValueEi+0x3e>
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	31 f0       	breq	.+12     	; 0xd64 <_ZN5Motor11SetOcrValueEi+0x48>
     d58:	18 c0       	rjmp	.+48     	; 0xd8a <_ZN5Motor11SetOcrValueEi+0x6e>
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	69 f0       	breq	.+26     	; 0xd78 <_ZN5Motor11SetOcrValueEi+0x5c>
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	81 f0       	breq	.+32     	; 0xd82 <_ZN5Motor11SetOcrValueEi+0x66>
     d62:	13 c0       	rjmp	.+38     	; 0xd8a <_ZN5Motor11SetOcrValueEi+0x6e>
	{
		case 1:
			PWM_OCR1	= Ocr;
     d64:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     d68:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     d6c:	0e c0       	rjmp	.+28     	; 0xd8a <_ZN5Motor11SetOcrValueEi+0x6e>
		case 2:
			PWM_OCR2	= Ocr;
     d6e:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     d72:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     d76:	09 c0       	rjmp	.+18     	; 0xd8a <_ZN5Motor11SetOcrValueEi+0x6e>
		case 3:
			PWM_OCR3	= Ocr;
     d78:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     d7c:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <_ZN5Motor11SetOcrValueEi+0x6e>
		case 4:
			PWM_OCR4	= Ocr;
     d82:	d0 93 a9 00 	sts	0x00A9, r29	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     d86:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
			break;
	}
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	08 95       	ret

00000d94 <__vector_15>:

/*************************************************************************	
  Interrupt Service Routine for timer overflow for I2C timeout
*************************************************************************/
ISR(TIMER2_OVF_vect)
{
     d94:	1f 92       	push	r1
     d96:	0f 92       	push	r0
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	0f 92       	push	r0
     d9c:	11 24       	eor	r1, r1
     d9e:	8f 93       	push	r24
	_Timer_overflow_count = (_Timer_overflow_count == 3)	?	0	: (_Timer_overflow_count+1);
     da0:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_Timer_overflow_count>
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	21 f0       	breq	.+8      	; 0xdb0 <__vector_15+0x1c>
     da8:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_Timer_overflow_count>
     dac:	8f 5f       	subi	r24, 0xFF	; 255
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <__vector_15+0x1e>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <_Timer_overflow_count>
	if (_Timer_overflow_count	==	3)
     db6:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <_Timer_overflow_count>
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	19 f4       	brne	.+6      	; 0xdc4 <__vector_15+0x30>
	{
		_Flag_Timer_overflow = true;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <_Flag_Timer_overflow>
	}
     dc4:	8f 91       	pop	r24
     dc6:	0f 90       	pop	r0
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	0f 90       	pop	r0
     dcc:	1f 90       	pop	r1
     dce:	18 95       	reti

00000dd0 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
     dd0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     dd4:	87 e6       	ldi	r24, 0x67	; 103
     dd6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     dda:	88 e9       	ldi	r24, 0x98	; 152
     ddc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     de0:	86 e0       	ldi	r24, 0x06	; 6
     de2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     de6:	08 95       	ret

00000de8 <_Z9initUART2v>:
     de8:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <_ZL9datacount>
     dec:	e4 e9       	ldi	r30, 0x94	; 148
     dee:	f2 e0       	ldi	r31, 0x02	; 2
     df0:	10 82       	st	Z, r1
     df2:	11 82       	std	Z+1, r1	; 0x01
     df4:	12 82       	std	Z+2, r1	; 0x02
     df6:	13 82       	std	Z+3, r1	; 0x03
     df8:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     dfc:	89 e1       	ldi	r24, 0x19	; 25
     dfe:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     e02:	88 e9       	ldi	r24, 0x98	; 152
     e04:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     e08:	86 e0       	ldi	r24, 0x06	; 6
     e0a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     e0e:	08 95       	ret

00000e10 <_Z9initUART3v>:
     e10:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     e14:	87 e6       	ldi	r24, 0x67	; 103
     e16:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     e1a:	88 e9       	ldi	r24, 0x98	; 152
     e1c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     e20:	86 e0       	ldi	r24, 0x06	; 6
     e22:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
     e26:	08 95       	ret

00000e28 <__vector_25>:

ISR(USART0_RX_vect)
{
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	0b b6       	in	r0, 0x3b	; 59
     e34:	0f 92       	push	r0
     e36:	8f 93       	push	r24
     e38:	ef 93       	push	r30
     e3a:	ff 93       	push	r31
	

	buffer=UDR0;
     e3c:	e6 ec       	ldi	r30, 0xC6	; 198
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <buffer>
	UDR0 = 0;
     e46:	10 82       	st	Z, r1
}
     e48:	ff 91       	pop	r31
     e4a:	ef 91       	pop	r30
     e4c:	8f 91       	pop	r24
     e4e:	0f 90       	pop	r0
     e50:	0b be       	out	0x3b, r0	; 59
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_36>:

ISR(USART1_RX_vect)
{
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	8f 93       	push	r24
	buffer1=UDR1;
     e68:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     e6c:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <buffer1>
	
}
     e70:	8f 91       	pop	r24
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <__vector_51>:

ISR(USART2_RX_vect)
{
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	0b b6       	in	r0, 0x3b	; 59
     e88:	0f 92       	push	r0
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31
	buffer2=UDR2;
     e92:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     e96:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <buffer2>
		if(rcvflag)
     e9a:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <rcvflag>
     e9e:	99 23       	and	r25, r25
     ea0:	89 f0       	breq	.+34     	; 0xec4 <__vector_51+0x48>
		{
			rcvdata[datacount] = buffer2;
     ea2:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <_ZL9datacount>
     ea6:	e9 2f       	mov	r30, r25
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	ec 56       	subi	r30, 0x6C	; 108
     eac:	fd 4f       	sbci	r31, 0xFD	; 253
     eae:	80 83       	st	Z, r24
			datacount++;
     eb0:	9f 5f       	subi	r25, 0xFF	; 255
			if(datacount>3)
     eb2:	94 30       	cpi	r25, 0x04	; 4
     eb4:	18 f4       	brcc	.+6      	; 0xebc <__vector_51+0x40>
{
	buffer2=UDR2;
		if(rcvflag)
		{
			rcvdata[datacount] = buffer2;
			datacount++;
     eb6:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <_ZL9datacount>
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <__vector_51+0x48>
			if(datacount>3)
			{
				 datacount=0;
     ebc:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <_ZL9datacount>
				rcvflag = false; 
     ec0:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <rcvflag>
			}
		}
		if(buffer2==START_BYTE)
     ec4:	8f 37       	cpi	r24, 0x7F	; 127
     ec6:	19 f4       	brne	.+6      	; 0xece <__vector_51+0x52>
			rcvflag=true;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <rcvflag>
		
}
     ece:	ff 91       	pop	r31
     ed0:	ef 91       	pop	r30
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	0f 90       	pop	r0
     ed8:	0b be       	out	0x3b, r0	; 59
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <__vector_54>:


ISR(USART3_RX_vect)
{
     ee4:	1f 92       	push	r1
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	0b b6       	in	r0, 0x3b	; 59
     ef0:	0f 92       	push	r0
     ef2:	8f 93       	push	r24
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
	buffer3=UDR3;
     ef8:	e6 e3       	ldi	r30, 0x36	; 54
     efa:	f1 e0       	ldi	r31, 0x01	; 1
     efc:	80 81       	ld	r24, Z
     efe:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <buffer3>
	UDR3 = 0;
     f02:	10 82       	st	Z, r1
	
}
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	8f 91       	pop	r24
     f0a:	0f 90       	pop	r0
     f0c:	0b be       	out	0x3b, r0	; 59
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__subsf3>:
     f18:	50 58       	subi	r21, 0x80	; 128

00000f1a <__addsf3>:
     f1a:	bb 27       	eor	r27, r27
     f1c:	aa 27       	eor	r26, r26
     f1e:	0e d0       	rcall	.+28     	; 0xf3c <__addsf3x>
     f20:	e5 c0       	rjmp	.+458    	; 0x10ec <__fp_round>
     f22:	d6 d0       	rcall	.+428    	; 0x10d0 <__fp_pscA>
     f24:	30 f0       	brcs	.+12     	; 0xf32 <__addsf3+0x18>
     f26:	db d0       	rcall	.+438    	; 0x10de <__fp_pscB>
     f28:	20 f0       	brcs	.+8      	; 0xf32 <__addsf3+0x18>
     f2a:	31 f4       	brne	.+12     	; 0xf38 <__addsf3+0x1e>
     f2c:	9f 3f       	cpi	r25, 0xFF	; 255
     f2e:	11 f4       	brne	.+4      	; 0xf34 <__addsf3+0x1a>
     f30:	1e f4       	brtc	.+6      	; 0xf38 <__addsf3+0x1e>
     f32:	cb c0       	rjmp	.+406    	; 0x10ca <__fp_nan>
     f34:	0e f4       	brtc	.+2      	; 0xf38 <__addsf3+0x1e>
     f36:	e0 95       	com	r30
     f38:	e7 fb       	bst	r30, 7
     f3a:	c1 c0       	rjmp	.+386    	; 0x10be <__fp_inf>

00000f3c <__addsf3x>:
     f3c:	e9 2f       	mov	r30, r25
     f3e:	e7 d0       	rcall	.+462    	; 0x110e <__fp_split3>
     f40:	80 f3       	brcs	.-32     	; 0xf22 <__addsf3+0x8>
     f42:	ba 17       	cp	r27, r26
     f44:	62 07       	cpc	r22, r18
     f46:	73 07       	cpc	r23, r19
     f48:	84 07       	cpc	r24, r20
     f4a:	95 07       	cpc	r25, r21
     f4c:	18 f0       	brcs	.+6      	; 0xf54 <__addsf3x+0x18>
     f4e:	71 f4       	brne	.+28     	; 0xf6c <__addsf3x+0x30>
     f50:	9e f5       	brtc	.+102    	; 0xfb8 <__addsf3x+0x7c>
     f52:	ff c0       	rjmp	.+510    	; 0x1152 <__fp_zero>
     f54:	0e f4       	brtc	.+2      	; 0xf58 <__addsf3x+0x1c>
     f56:	e0 95       	com	r30
     f58:	0b 2e       	mov	r0, r27
     f5a:	ba 2f       	mov	r27, r26
     f5c:	a0 2d       	mov	r26, r0
     f5e:	0b 01       	movw	r0, r22
     f60:	b9 01       	movw	r22, r18
     f62:	90 01       	movw	r18, r0
     f64:	0c 01       	movw	r0, r24
     f66:	ca 01       	movw	r24, r20
     f68:	a0 01       	movw	r20, r0
     f6a:	11 24       	eor	r1, r1
     f6c:	ff 27       	eor	r31, r31
     f6e:	59 1b       	sub	r21, r25
     f70:	99 f0       	breq	.+38     	; 0xf98 <__addsf3x+0x5c>
     f72:	59 3f       	cpi	r21, 0xF9	; 249
     f74:	50 f4       	brcc	.+20     	; 0xf8a <__addsf3x+0x4e>
     f76:	50 3e       	cpi	r21, 0xE0	; 224
     f78:	68 f1       	brcs	.+90     	; 0xfd4 <__addsf3x+0x98>
     f7a:	1a 16       	cp	r1, r26
     f7c:	f0 40       	sbci	r31, 0x00	; 0
     f7e:	a2 2f       	mov	r26, r18
     f80:	23 2f       	mov	r18, r19
     f82:	34 2f       	mov	r19, r20
     f84:	44 27       	eor	r20, r20
     f86:	58 5f       	subi	r21, 0xF8	; 248
     f88:	f3 cf       	rjmp	.-26     	; 0xf70 <__addsf3x+0x34>
     f8a:	46 95       	lsr	r20
     f8c:	37 95       	ror	r19
     f8e:	27 95       	ror	r18
     f90:	a7 95       	ror	r26
     f92:	f0 40       	sbci	r31, 0x00	; 0
     f94:	53 95       	inc	r21
     f96:	c9 f7       	brne	.-14     	; 0xf8a <__addsf3x+0x4e>
     f98:	7e f4       	brtc	.+30     	; 0xfb8 <__addsf3x+0x7c>
     f9a:	1f 16       	cp	r1, r31
     f9c:	ba 0b       	sbc	r27, r26
     f9e:	62 0b       	sbc	r22, r18
     fa0:	73 0b       	sbc	r23, r19
     fa2:	84 0b       	sbc	r24, r20
     fa4:	ba f0       	brmi	.+46     	; 0xfd4 <__addsf3x+0x98>
     fa6:	91 50       	subi	r25, 0x01	; 1
     fa8:	a1 f0       	breq	.+40     	; 0xfd2 <__addsf3x+0x96>
     faa:	ff 0f       	add	r31, r31
     fac:	bb 1f       	adc	r27, r27
     fae:	66 1f       	adc	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	88 1f       	adc	r24, r24
     fb4:	c2 f7       	brpl	.-16     	; 0xfa6 <__addsf3x+0x6a>
     fb6:	0e c0       	rjmp	.+28     	; 0xfd4 <__addsf3x+0x98>
     fb8:	ba 0f       	add	r27, r26
     fba:	62 1f       	adc	r22, r18
     fbc:	73 1f       	adc	r23, r19
     fbe:	84 1f       	adc	r24, r20
     fc0:	48 f4       	brcc	.+18     	; 0xfd4 <__addsf3x+0x98>
     fc2:	87 95       	ror	r24
     fc4:	77 95       	ror	r23
     fc6:	67 95       	ror	r22
     fc8:	b7 95       	ror	r27
     fca:	f7 95       	ror	r31
     fcc:	9e 3f       	cpi	r25, 0xFE	; 254
     fce:	08 f0       	brcs	.+2      	; 0xfd2 <__addsf3x+0x96>
     fd0:	b3 cf       	rjmp	.-154    	; 0xf38 <__addsf3+0x1e>
     fd2:	93 95       	inc	r25
     fd4:	88 0f       	add	r24, r24
     fd6:	08 f0       	brcs	.+2      	; 0xfda <__addsf3x+0x9e>
     fd8:	99 27       	eor	r25, r25
     fda:	ee 0f       	add	r30, r30
     fdc:	97 95       	ror	r25
     fde:	87 95       	ror	r24
     fe0:	08 95       	ret

00000fe2 <__fixsfsi>:
     fe2:	04 d0       	rcall	.+8      	; 0xfec <__fixunssfsi>
     fe4:	68 94       	set
     fe6:	b1 11       	cpse	r27, r1
     fe8:	b5 c0       	rjmp	.+362    	; 0x1154 <__fp_szero>
     fea:	08 95       	ret

00000fec <__fixunssfsi>:
     fec:	98 d0       	rcall	.+304    	; 0x111e <__fp_splitA>
     fee:	88 f0       	brcs	.+34     	; 0x1012 <__fixunssfsi+0x26>
     ff0:	9f 57       	subi	r25, 0x7F	; 127
     ff2:	90 f0       	brcs	.+36     	; 0x1018 <__fixunssfsi+0x2c>
     ff4:	b9 2f       	mov	r27, r25
     ff6:	99 27       	eor	r25, r25
     ff8:	b7 51       	subi	r27, 0x17	; 23
     ffa:	a0 f0       	brcs	.+40     	; 0x1024 <__fixunssfsi+0x38>
     ffc:	d1 f0       	breq	.+52     	; 0x1032 <__fixunssfsi+0x46>
     ffe:	66 0f       	add	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	88 1f       	adc	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	1a f0       	brmi	.+6      	; 0x100e <__fixunssfsi+0x22>
    1008:	ba 95       	dec	r27
    100a:	c9 f7       	brne	.-14     	; 0xffe <__fixunssfsi+0x12>
    100c:	12 c0       	rjmp	.+36     	; 0x1032 <__fixunssfsi+0x46>
    100e:	b1 30       	cpi	r27, 0x01	; 1
    1010:	81 f0       	breq	.+32     	; 0x1032 <__fixunssfsi+0x46>
    1012:	9f d0       	rcall	.+318    	; 0x1152 <__fp_zero>
    1014:	b1 e0       	ldi	r27, 0x01	; 1
    1016:	08 95       	ret
    1018:	9c c0       	rjmp	.+312    	; 0x1152 <__fp_zero>
    101a:	67 2f       	mov	r22, r23
    101c:	78 2f       	mov	r23, r24
    101e:	88 27       	eor	r24, r24
    1020:	b8 5f       	subi	r27, 0xF8	; 248
    1022:	39 f0       	breq	.+14     	; 0x1032 <__fixunssfsi+0x46>
    1024:	b9 3f       	cpi	r27, 0xF9	; 249
    1026:	cc f3       	brlt	.-14     	; 0x101a <__fixunssfsi+0x2e>
    1028:	86 95       	lsr	r24
    102a:	77 95       	ror	r23
    102c:	67 95       	ror	r22
    102e:	b3 95       	inc	r27
    1030:	d9 f7       	brne	.-10     	; 0x1028 <__fixunssfsi+0x3c>
    1032:	3e f4       	brtc	.+14     	; 0x1042 <__fixunssfsi+0x56>
    1034:	90 95       	com	r25
    1036:	80 95       	com	r24
    1038:	70 95       	com	r23
    103a:	61 95       	neg	r22
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	8f 4f       	sbci	r24, 0xFF	; 255
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	08 95       	ret

00001044 <__floatunsisf>:
    1044:	e8 94       	clt
    1046:	09 c0       	rjmp	.+18     	; 0x105a <__floatsisf+0x12>

00001048 <__floatsisf>:
    1048:	97 fb       	bst	r25, 7
    104a:	3e f4       	brtc	.+14     	; 0x105a <__floatsisf+0x12>
    104c:	90 95       	com	r25
    104e:	80 95       	com	r24
    1050:	70 95       	com	r23
    1052:	61 95       	neg	r22
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	8f 4f       	sbci	r24, 0xFF	; 255
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	99 23       	and	r25, r25
    105c:	a9 f0       	breq	.+42     	; 0x1088 <__floatsisf+0x40>
    105e:	f9 2f       	mov	r31, r25
    1060:	96 e9       	ldi	r25, 0x96	; 150
    1062:	bb 27       	eor	r27, r27
    1064:	93 95       	inc	r25
    1066:	f6 95       	lsr	r31
    1068:	87 95       	ror	r24
    106a:	77 95       	ror	r23
    106c:	67 95       	ror	r22
    106e:	b7 95       	ror	r27
    1070:	f1 11       	cpse	r31, r1
    1072:	f8 cf       	rjmp	.-16     	; 0x1064 <__floatsisf+0x1c>
    1074:	fa f4       	brpl	.+62     	; 0x10b4 <__floatsisf+0x6c>
    1076:	bb 0f       	add	r27, r27
    1078:	11 f4       	brne	.+4      	; 0x107e <__floatsisf+0x36>
    107a:	60 ff       	sbrs	r22, 0
    107c:	1b c0       	rjmp	.+54     	; 0x10b4 <__floatsisf+0x6c>
    107e:	6f 5f       	subi	r22, 0xFF	; 255
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	8f 4f       	sbci	r24, 0xFF	; 255
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	16 c0       	rjmp	.+44     	; 0x10b4 <__floatsisf+0x6c>
    1088:	88 23       	and	r24, r24
    108a:	11 f0       	breq	.+4      	; 0x1090 <__floatsisf+0x48>
    108c:	96 e9       	ldi	r25, 0x96	; 150
    108e:	11 c0       	rjmp	.+34     	; 0x10b2 <__floatsisf+0x6a>
    1090:	77 23       	and	r23, r23
    1092:	21 f0       	breq	.+8      	; 0x109c <__floatsisf+0x54>
    1094:	9e e8       	ldi	r25, 0x8E	; 142
    1096:	87 2f       	mov	r24, r23
    1098:	76 2f       	mov	r23, r22
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <__floatsisf+0x5e>
    109c:	66 23       	and	r22, r22
    109e:	71 f0       	breq	.+28     	; 0x10bc <__floatsisf+0x74>
    10a0:	96 e8       	ldi	r25, 0x86	; 134
    10a2:	86 2f       	mov	r24, r22
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	2a f0       	brmi	.+10     	; 0x10b4 <__floatsisf+0x6c>
    10aa:	9a 95       	dec	r25
    10ac:	66 0f       	add	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	da f7       	brpl	.-10     	; 0x10aa <__floatsisf+0x62>
    10b4:	88 0f       	add	r24, r24
    10b6:	96 95       	lsr	r25
    10b8:	87 95       	ror	r24
    10ba:	97 f9       	bld	r25, 7
    10bc:	08 95       	ret

000010be <__fp_inf>:
    10be:	97 f9       	bld	r25, 7
    10c0:	9f 67       	ori	r25, 0x7F	; 127
    10c2:	80 e8       	ldi	r24, 0x80	; 128
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	08 95       	ret

000010ca <__fp_nan>:
    10ca:	9f ef       	ldi	r25, 0xFF	; 255
    10cc:	80 ec       	ldi	r24, 0xC0	; 192
    10ce:	08 95       	ret

000010d0 <__fp_pscA>:
    10d0:	00 24       	eor	r0, r0
    10d2:	0a 94       	dec	r0
    10d4:	16 16       	cp	r1, r22
    10d6:	17 06       	cpc	r1, r23
    10d8:	18 06       	cpc	r1, r24
    10da:	09 06       	cpc	r0, r25
    10dc:	08 95       	ret

000010de <__fp_pscB>:
    10de:	00 24       	eor	r0, r0
    10e0:	0a 94       	dec	r0
    10e2:	12 16       	cp	r1, r18
    10e4:	13 06       	cpc	r1, r19
    10e6:	14 06       	cpc	r1, r20
    10e8:	05 06       	cpc	r0, r21
    10ea:	08 95       	ret

000010ec <__fp_round>:
    10ec:	09 2e       	mov	r0, r25
    10ee:	03 94       	inc	r0
    10f0:	00 0c       	add	r0, r0
    10f2:	11 f4       	brne	.+4      	; 0x10f8 <__fp_round+0xc>
    10f4:	88 23       	and	r24, r24
    10f6:	52 f0       	brmi	.+20     	; 0x110c <__fp_round+0x20>
    10f8:	bb 0f       	add	r27, r27
    10fa:	40 f4       	brcc	.+16     	; 0x110c <__fp_round+0x20>
    10fc:	bf 2b       	or	r27, r31
    10fe:	11 f4       	brne	.+4      	; 0x1104 <__fp_round+0x18>
    1100:	60 ff       	sbrs	r22, 0
    1102:	04 c0       	rjmp	.+8      	; 0x110c <__fp_round+0x20>
    1104:	6f 5f       	subi	r22, 0xFF	; 255
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	8f 4f       	sbci	r24, 0xFF	; 255
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	08 95       	ret

0000110e <__fp_split3>:
    110e:	57 fd       	sbrc	r21, 7
    1110:	90 58       	subi	r25, 0x80	; 128
    1112:	44 0f       	add	r20, r20
    1114:	55 1f       	adc	r21, r21
    1116:	59 f0       	breq	.+22     	; 0x112e <__fp_splitA+0x10>
    1118:	5f 3f       	cpi	r21, 0xFF	; 255
    111a:	71 f0       	breq	.+28     	; 0x1138 <__fp_splitA+0x1a>
    111c:	47 95       	ror	r20

0000111e <__fp_splitA>:
    111e:	88 0f       	add	r24, r24
    1120:	97 fb       	bst	r25, 7
    1122:	99 1f       	adc	r25, r25
    1124:	61 f0       	breq	.+24     	; 0x113e <__fp_splitA+0x20>
    1126:	9f 3f       	cpi	r25, 0xFF	; 255
    1128:	79 f0       	breq	.+30     	; 0x1148 <__fp_splitA+0x2a>
    112a:	87 95       	ror	r24
    112c:	08 95       	ret
    112e:	12 16       	cp	r1, r18
    1130:	13 06       	cpc	r1, r19
    1132:	14 06       	cpc	r1, r20
    1134:	55 1f       	adc	r21, r21
    1136:	f2 cf       	rjmp	.-28     	; 0x111c <__fp_split3+0xe>
    1138:	46 95       	lsr	r20
    113a:	f1 df       	rcall	.-30     	; 0x111e <__fp_splitA>
    113c:	08 c0       	rjmp	.+16     	; 0x114e <__fp_splitA+0x30>
    113e:	16 16       	cp	r1, r22
    1140:	17 06       	cpc	r1, r23
    1142:	18 06       	cpc	r1, r24
    1144:	99 1f       	adc	r25, r25
    1146:	f1 cf       	rjmp	.-30     	; 0x112a <__fp_splitA+0xc>
    1148:	86 95       	lsr	r24
    114a:	71 05       	cpc	r23, r1
    114c:	61 05       	cpc	r22, r1
    114e:	08 94       	sec
    1150:	08 95       	ret

00001152 <__fp_zero>:
    1152:	e8 94       	clt

00001154 <__fp_szero>:
    1154:	bb 27       	eor	r27, r27
    1156:	66 27       	eor	r22, r22
    1158:	77 27       	eor	r23, r23
    115a:	cb 01       	movw	r24, r22
    115c:	97 f9       	bld	r25, 7
    115e:	08 95       	ret

00001160 <__mulsf3>:
    1160:	0b d0       	rcall	.+22     	; 0x1178 <__mulsf3x>
    1162:	c4 cf       	rjmp	.-120    	; 0x10ec <__fp_round>
    1164:	b5 df       	rcall	.-150    	; 0x10d0 <__fp_pscA>
    1166:	28 f0       	brcs	.+10     	; 0x1172 <__mulsf3+0x12>
    1168:	ba df       	rcall	.-140    	; 0x10de <__fp_pscB>
    116a:	18 f0       	brcs	.+6      	; 0x1172 <__mulsf3+0x12>
    116c:	95 23       	and	r25, r21
    116e:	09 f0       	breq	.+2      	; 0x1172 <__mulsf3+0x12>
    1170:	a6 cf       	rjmp	.-180    	; 0x10be <__fp_inf>
    1172:	ab cf       	rjmp	.-170    	; 0x10ca <__fp_nan>
    1174:	11 24       	eor	r1, r1
    1176:	ee cf       	rjmp	.-36     	; 0x1154 <__fp_szero>

00001178 <__mulsf3x>:
    1178:	ca df       	rcall	.-108    	; 0x110e <__fp_split3>
    117a:	a0 f3       	brcs	.-24     	; 0x1164 <__mulsf3+0x4>

0000117c <__mulsf3_pse>:
    117c:	95 9f       	mul	r25, r21
    117e:	d1 f3       	breq	.-12     	; 0x1174 <__mulsf3+0x14>
    1180:	95 0f       	add	r25, r21
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	55 1f       	adc	r21, r21
    1186:	62 9f       	mul	r22, r18
    1188:	f0 01       	movw	r30, r0
    118a:	72 9f       	mul	r23, r18
    118c:	bb 27       	eor	r27, r27
    118e:	f0 0d       	add	r31, r0
    1190:	b1 1d       	adc	r27, r1
    1192:	63 9f       	mul	r22, r19
    1194:	aa 27       	eor	r26, r26
    1196:	f0 0d       	add	r31, r0
    1198:	b1 1d       	adc	r27, r1
    119a:	aa 1f       	adc	r26, r26
    119c:	64 9f       	mul	r22, r20
    119e:	66 27       	eor	r22, r22
    11a0:	b0 0d       	add	r27, r0
    11a2:	a1 1d       	adc	r26, r1
    11a4:	66 1f       	adc	r22, r22
    11a6:	82 9f       	mul	r24, r18
    11a8:	22 27       	eor	r18, r18
    11aa:	b0 0d       	add	r27, r0
    11ac:	a1 1d       	adc	r26, r1
    11ae:	62 1f       	adc	r22, r18
    11b0:	73 9f       	mul	r23, r19
    11b2:	b0 0d       	add	r27, r0
    11b4:	a1 1d       	adc	r26, r1
    11b6:	62 1f       	adc	r22, r18
    11b8:	83 9f       	mul	r24, r19
    11ba:	a0 0d       	add	r26, r0
    11bc:	61 1d       	adc	r22, r1
    11be:	22 1f       	adc	r18, r18
    11c0:	74 9f       	mul	r23, r20
    11c2:	33 27       	eor	r19, r19
    11c4:	a0 0d       	add	r26, r0
    11c6:	61 1d       	adc	r22, r1
    11c8:	23 1f       	adc	r18, r19
    11ca:	84 9f       	mul	r24, r20
    11cc:	60 0d       	add	r22, r0
    11ce:	21 1d       	adc	r18, r1
    11d0:	82 2f       	mov	r24, r18
    11d2:	76 2f       	mov	r23, r22
    11d4:	6a 2f       	mov	r22, r26
    11d6:	11 24       	eor	r1, r1
    11d8:	9f 57       	subi	r25, 0x7F	; 127
    11da:	50 40       	sbci	r21, 0x00	; 0
    11dc:	8a f0       	brmi	.+34     	; 0x1200 <__mulsf3_pse+0x84>
    11de:	e1 f0       	breq	.+56     	; 0x1218 <__mulsf3_pse+0x9c>
    11e0:	88 23       	and	r24, r24
    11e2:	4a f0       	brmi	.+18     	; 0x11f6 <__mulsf3_pse+0x7a>
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31
    11e8:	bb 1f       	adc	r27, r27
    11ea:	66 1f       	adc	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	91 50       	subi	r25, 0x01	; 1
    11f2:	50 40       	sbci	r21, 0x00	; 0
    11f4:	a9 f7       	brne	.-22     	; 0x11e0 <__mulsf3_pse+0x64>
    11f6:	9e 3f       	cpi	r25, 0xFE	; 254
    11f8:	51 05       	cpc	r21, r1
    11fa:	70 f0       	brcs	.+28     	; 0x1218 <__mulsf3_pse+0x9c>
    11fc:	60 cf       	rjmp	.-320    	; 0x10be <__fp_inf>
    11fe:	aa cf       	rjmp	.-172    	; 0x1154 <__fp_szero>
    1200:	5f 3f       	cpi	r21, 0xFF	; 255
    1202:	ec f3       	brlt	.-6      	; 0x11fe <__mulsf3_pse+0x82>
    1204:	98 3e       	cpi	r25, 0xE8	; 232
    1206:	dc f3       	brlt	.-10     	; 0x11fe <__mulsf3_pse+0x82>
    1208:	86 95       	lsr	r24
    120a:	77 95       	ror	r23
    120c:	67 95       	ror	r22
    120e:	b7 95       	ror	r27
    1210:	f7 95       	ror	r31
    1212:	e7 95       	ror	r30
    1214:	9f 5f       	subi	r25, 0xFF	; 255
    1216:	c1 f7       	brne	.-16     	; 0x1208 <__mulsf3_pse+0x8c>
    1218:	fe 2b       	or	r31, r30
    121a:	88 0f       	add	r24, r24
    121c:	91 1d       	adc	r25, r1
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	97 f9       	bld	r25, 7
    1224:	08 95       	ret

00001226 <__tablejump2__>:
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	88 1f       	adc	r24, r24
    122c:	8b bf       	out	0x3b, r24	; 59
    122e:	07 90       	elpm	r0, Z+
    1230:	f6 91       	elpm	r31, Z
    1232:	e0 2d       	mov	r30, r0
    1234:	19 94       	eijmp

00001236 <_exit>:
    1236:	f8 94       	cli

00001238 <__stop_program>:
    1238:	ff cf       	rjmp	.-2      	; 0x1238 <__stop_program>
