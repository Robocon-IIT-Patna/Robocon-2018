
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800200  00002e14  00002ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022c  008002aa  008002aa  00002f52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004012  00000000  00000000  000032c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001459  00000000  00000000  000072d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002443  00000000  00000000  0000872f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab8  00000000  00000000  0000ab74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000199e  00000000  00000000  0000b62c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022e8  00000000  00000000  0000cfca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000f2b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	b8 c0       	rjmp	.+368    	; 0x176 <__bad_interrupt>
       6:	00 00       	nop
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__vector_3>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	07 c1       	rjmp	.+526    	; 0x228 <__vector_6>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <__vector_9>
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 69 0f 	jmp	0x1ed2	; 0x1ed2 <__vector_11>
      30:	a2 c0       	rjmp	.+324    	; 0x176 <__bad_interrupt>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	98 c0       	rjmp	.+304    	; 0x176 <__bad_interrupt>
      46:	00 00       	nop
      48:	96 c0       	rjmp	.+300    	; 0x176 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	94 c0       	rjmp	.+296    	; 0x176 <__bad_interrupt>
      4e:	00 00       	nop
      50:	92 c0       	rjmp	.+292    	; 0x176 <__bad_interrupt>
      52:	00 00       	nop
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c c1       	rjmp	.+536    	; 0x276 <__vector_23>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__vector_25>
      68:	0c 94 26 12 	jmp	0x244c	; 0x244c <__vector_26>
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	80 c0       	rjmp	.+256    	; 0x176 <__bad_interrupt>
      76:	00 00       	nop
      78:	7e c0       	rjmp	.+252    	; 0x176 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7c c0       	rjmp	.+248    	; 0x176 <__bad_interrupt>
      7e:	00 00       	nop
      80:	7a c0       	rjmp	.+244    	; 0x176 <__bad_interrupt>
      82:	00 00       	nop
      84:	78 c0       	rjmp	.+240    	; 0x176 <__bad_interrupt>
      86:	00 00       	nop
      88:	76 c0       	rjmp	.+236    	; 0x176 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	74 c0       	rjmp	.+232    	; 0x176 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_36>
      94:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__vector_37>
      98:	6e c0       	rjmp	.+220    	; 0x176 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c0       	rjmp	.+216    	; 0x176 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6a c0       	rjmp	.+212    	; 0x176 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	68 c0       	rjmp	.+208    	; 0x176 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	66 c0       	rjmp	.+204    	; 0x176 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	64 c0       	rjmp	.+200    	; 0x176 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	62 c0       	rjmp	.+196    	; 0x176 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	60 c0       	rjmp	.+192    	; 0x176 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5e c0       	rjmp	.+188    	; 0x176 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5c c0       	rjmp	.+184    	; 0x176 <__bad_interrupt>
      be:	00 00       	nop
      c0:	5a c0       	rjmp	.+180    	; 0x176 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	58 c0       	rjmp	.+176    	; 0x176 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	56 c0       	rjmp	.+172    	; 0x176 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__vector_51>
      d0:	0c 94 1c 13 	jmp	0x2638	; 0x2638 <__vector_52>
      d4:	50 c0       	rjmp	.+160    	; 0x176 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__vector_54>
      dc:	0c 94 a7 13 	jmp	0x274e	; 0x274e <__vector_55>
      e0:	4a c0       	rjmp	.+148    	; 0x176 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_start>:
     112:	64 11       	cpse	r22, r4

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d1 e2       	ldi	r29, 0x21	; 33
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	0c bf       	out	0x3c, r16	; 60

00000124 <__do_copy_data>:
     124:	12 e0       	ldi	r17, 0x02	; 2
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	e4 e1       	ldi	r30, 0x14	; 20
     12c:	fe e2       	ldi	r31, 0x2E	; 46
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	aa 3a       	cpi	r26, 0xAA	; 170
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	24 e0       	ldi	r18, 0x04	; 4
     140:	aa ea       	ldi	r26, 0xAA	; 170
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a6 3d       	cpi	r26, 0xD6	; 214
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>

0000014e <__do_global_ctors>:
     14e:	10 e0       	ldi	r17, 0x00	; 0
     150:	ca e8       	ldi	r28, 0x8A	; 138
     152:	d0 e0       	ldi	r29, 0x00	; 0
     154:	00 e0       	ldi	r16, 0x00	; 0
     156:	06 c0       	rjmp	.+12     	; 0x164 <__do_global_ctors+0x16>
     158:	21 97       	sbiw	r28, 0x01	; 1
     15a:	01 09       	sbc	r16, r1
     15c:	80 2f       	mov	r24, r16
     15e:	fe 01       	movw	r30, r28
     160:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__tablejump2__>
     164:	c9 38       	cpi	r28, 0x89	; 137
     166:	d1 07       	cpc	r29, r17
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	08 07       	cpc	r16, r24
     16c:	a9 f7       	brne	.-22     	; 0x158 <__do_global_ctors+0xa>
     16e:	0e 94 20 11 	call	0x2240	; 0x2240 <main>
     172:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <_ZN7encoder22Init_encoder_interruptEv>:
volatile bool PidUpdateFlagDriveY = true;


void encoder::Init_encoder_interrupt()
{
	sei();
     178:	78 94       	sei
	EICRA = 0b00110000;
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EICRB = 0b00001100;
     180:	8c e0       	ldi	r24, 0x0C	; 12
     182:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	EIMSK |=  (1<<INT2) |(1<<INT5);
     186:	8d b3       	in	r24, 0x1d	; 29
     188:	84 62       	ori	r24, 0x24	; 36
     18a:	8d bb       	out	0x1d, r24	; 29
     18c:	08 95       	ret

0000018e <_ZN7encoder10Init_timerEv>:
}

void encoder::Init_timer()	//FOR SPEED TUNING OF 4 MOTORS
{
	sei();
     18e:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00);
     190:	85 b5       	in	r24, 0x25	; 37
     192:	85 60       	ori	r24, 0x05	; 5
     194:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     19c:	08 95       	ret

0000019e <_ZN7encoder11getdistanceEv>:
}
float encoder::getdistance()
	{
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	ec 01       	movw	r28, r24
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
     1a4:	68 81       	ld	r22, Y
     1a6:	79 81       	ldd	r23, Y+1	; 0x01
     1a8:	07 2e       	mov	r0, r23
     1aa:	00 0c       	add	r0, r0
     1ac:	88 0b       	sbc	r24, r24
     1ae:	99 0b       	sbc	r25, r25
     1b0:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     1b4:	2e ef       	ldi	r18, 0xFE	; 254
     1b6:	34 e3       	ldi	r19, 0x34	; 52
     1b8:	46 e3       	ldi	r20, 0x36	; 54
     1ba:	53 e4       	ldi	r21, 0x43	; 67
     1bc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	48 e4       	ldi	r20, 0x48	; 72
     1c6:	53 e4       	ldi	r21, 0x43	; 67
     1c8:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__divsf3>
     1cc:	6c 83       	std	Y+4, r22	; 0x04
     1ce:	7d 83       	std	Y+5, r23	; 0x05
     1d0:	8e 83       	std	Y+6, r24	; 0x06
     1d2:	9f 83       	std	Y+7, r25	; 0x07
	return distance;
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <__vector_3>:

ISR(INT2_vect)	//for x -axis encoder
{
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
     1e4:	0b b6       	in	r0, 0x3b	; 59
     1e6:	0f 92       	push	r0
     1e8:	8f 93       	push	r24
     1ea:	9f 93       	push	r25
     1ec:	ef 93       	push	r30
     1ee:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     1f0:	00 9b       	sbis	0x00, 0	; 0
     1f2:	08 c0       	rjmp	.+16     	; 0x204 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     1f4:	ec eb       	ldi	r30, 0xBC	; 188
     1f6:	f2 e0       	ldi	r31, 0x02	; 2
     1f8:	80 81       	ld	r24, Z
     1fa:	91 81       	ldd	r25, Z+1	; 0x01
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	91 83       	std	Z+1, r25	; 0x01
     200:	80 83       	st	Z, r24
     202:	07 c0       	rjmp	.+14     	; 0x212 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     204:	ec eb       	ldi	r30, 0xBC	; 188
     206:	f2 e0       	ldi	r31, 0x02	; 2
     208:	80 81       	ld	r24, Z
     20a:	91 81       	ldd	r25, Z+1	; 0x01
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	91 83       	std	Z+1, r25	; 0x01
     210:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     212:	ff 91       	pop	r31
     214:	ef 91       	pop	r30
     216:	9f 91       	pop	r25
     218:	8f 91       	pop	r24
     21a:	0f 90       	pop	r0
     21c:	0b be       	out	0x3b, r0	; 59
     21e:	0f 90       	pop	r0
     220:	0f be       	out	0x3f, r0	; 63
     222:	0f 90       	pop	r0
     224:	1f 90       	pop	r1
     226:	18 95       	reti

00000228 <__vector_6>:

ISR(INT5_vect)	//for y-axis encoder
{
     228:	1f 92       	push	r1
     22a:	0f 92       	push	r0
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	0f 92       	push	r0
     230:	11 24       	eor	r1, r1
     232:	0b b6       	in	r0, 0x3b	; 59
     234:	0f 92       	push	r0
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA5)))
     23e:	05 9b       	sbis	0x00, 5	; 0
     240:	08 c0       	rjmp	.+16     	; 0x252 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     242:	e4 eb       	ldi	r30, 0xB4	; 180
     244:	f2 e0       	ldi	r31, 0x02	; 2
     246:	80 81       	ld	r24, Z
     248:	91 81       	ldd	r25, Z+1	; 0x01
     24a:	01 96       	adiw	r24, 0x01	; 1
     24c:	91 83       	std	Z+1, r25	; 0x01
     24e:	80 83       	st	Z, r24
     250:	07 c0       	rjmp	.+14     	; 0x260 <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     252:	e4 eb       	ldi	r30, 0xB4	; 180
     254:	f2 e0       	ldi	r31, 0x02	; 2
     256:	80 81       	ld	r24, Z
     258:	91 81       	ldd	r25, Z+1	; 0x01
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	91 83       	std	Z+1, r25	; 0x01
     25e:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	9f 91       	pop	r25
     266:	8f 91       	pop	r24
     268:	0f 90       	pop	r0
     26a:	0b be       	out	0x3b, r0	; 59
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	8f 93       	push	r24
	PidUpdateFlagCompass = true;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <PidUpdateFlagCompass>
	PidUpdateFlagLinetracker = true;
     288:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <PidUpdateFlagLinetracker>
 
	PidUpdateFlagDriveX = true;
     28c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <PidUpdateFlagDriveX>
	PidUpdateFlagDriveY = true;
     290:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <PidUpdateFlagDriveY>
	
     294:	8f 91       	pop	r24
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <_Z13init_QMC5883Lv>:
int16_t getoffset_X(void){
	return X_offset;
}
int16_t getoffset_Y(void){
	return Y_offset;
}
     2a0:	0e 94 97 11 	call	0x232e	; 0x232e <_Z8i2c_initv>
     2a4:	8a e1       	ldi	r24, 0x1A	; 26
     2a6:	0e 94 9d 11 	call	0x233a	; 0x233a <_Z9i2c_starth>
     2aa:	8b e0       	ldi	r24, 0x0B	; 11
     2ac:	0e 94 cf 11 	call	0x239e	; 0x239e <_Z9i2c_writeh>
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0e 94 cf 11 	call	0x239e	; 0x239e <_Z9i2c_writeh>
     2b6:	0e 94 c6 11 	call	0x238c	; 0x238c <_Z8i2c_stopv>
     2ba:	8a e1       	ldi	r24, 0x1A	; 26
     2bc:	0e 94 9d 11 	call	0x233a	; 0x233a <_Z9i2c_starth>
     2c0:	89 e0       	ldi	r24, 0x09	; 9
     2c2:	0e 94 cf 11 	call	0x239e	; 0x239e <_Z9i2c_writeh>
     2c6:	81 e1       	ldi	r24, 0x11	; 17
     2c8:	0e 94 cf 11 	call	0x239e	; 0x239e <_Z9i2c_writeh>
     2cc:	0c 94 c6 11 	jmp	0x238c	; 0x238c <_Z8i2c_stopv>
     2d0:	08 95       	ret

000002d2 <_Z12read_Compassv>:
     2d2:	8a e1       	ldi	r24, 0x1A	; 26
     2d4:	0e 94 9d 11 	call	0x233a	; 0x233a <_Z9i2c_starth>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 cf 11 	call	0x239e	; 0x239e <_Z9i2c_writeh>
     2de:	0e 94 c6 11 	call	0x238c	; 0x238c <_Z8i2c_stopv>
     2e2:	8b e1       	ldi	r24, 0x1B	; 27
     2e4:	0e 94 c4 11 	call	0x2388	; 0x2388 <_Z13i2c_rep_starth>
     2e8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_Z11i2c_readAckv>
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <raw_x+0x1>
     2f2:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <raw_x>
     2f6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_Z11i2c_readAckv>
     2fa:	20 91 bf 03 	lds	r18, 0x03BF	; 0x8003bf <raw_x>
     2fe:	30 91 c0 03 	lds	r19, 0x03C0	; 0x8003c0 <raw_x+0x1>
     302:	38 2b       	or	r19, r24
     304:	30 93 c0 03 	sts	0x03C0, r19	; 0x8003c0 <raw_x+0x1>
     308:	20 93 bf 03 	sts	0x03BF, r18	; 0x8003bf <raw_x>
     30c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_Z11i2c_readAckv>
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <raw_y+0x1>
     316:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <raw_y>
     31a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_Z11i2c_readAckv>
     31e:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <raw_y>
     322:	30 91 be 03 	lds	r19, 0x03BE	; 0x8003be <raw_y+0x1>
     326:	38 2b       	or	r19, r24
     328:	30 93 be 03 	sts	0x03BE, r19	; 0x8003be <raw_y+0x1>
     32c:	20 93 bd 03 	sts	0x03BD, r18	; 0x8003bd <raw_y>
     330:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_Z11i2c_readAckv>
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <raw_z+0x1>
     33a:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <raw_z>
     33e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <_Z11i2c_readNakv>
     342:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <raw_z>
     346:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <raw_z+0x1>
     34a:	38 2b       	or	r19, r24
     34c:	30 93 bc 03 	sts	0x03BC, r19	; 0x8003bc <raw_z+0x1>
     350:	20 93 bb 03 	sts	0x03BB, r18	; 0x8003bb <raw_z>
     354:	0c 94 c6 11 	jmp	0x238c	; 0x238c <_Z8i2c_stopv>
     358:	08 95       	ret

0000035a <_Z9get_Anglev>:

uint16_t get_Angle(){
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
	read_Compass();
     366:	b5 df       	rcall	.-150    	; 0x2d2 <_Z12read_Compassv>
	raw_x = raw_x - X_offset;
     368:	60 91 bf 03 	lds	r22, 0x03BF	; 0x8003bf <raw_x>
     36c:	70 91 c0 03 	lds	r23, 0x03C0	; 0x8003c0 <raw_x+0x1>
     370:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <X_offset>
     374:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <X_offset+0x1>
     378:	68 1b       	sub	r22, r24
     37a:	79 0b       	sbc	r23, r25
     37c:	70 93 c0 03 	sts	0x03C0, r23	; 0x8003c0 <raw_x+0x1>
     380:	60 93 bf 03 	sts	0x03BF, r22	; 0x8003bf <raw_x>
	raw_y = raw_y - Y_offset;
     384:	c0 91 bd 03 	lds	r28, 0x03BD	; 0x8003bd <raw_y>
     388:	d0 91 be 03 	lds	r29, 0x03BE	; 0x8003be <raw_y+0x1>
     38c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <Y_offset>
     390:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <Y_offset+0x1>
     394:	c8 1b       	sub	r28, r24
     396:	d9 0b       	sbc	r29, r25
     398:	d0 93 be 03 	sts	0x03BE, r29	; 0x8003be <raw_y+0x1>
     39c:	c0 93 bd 03 	sts	0x03BD, r28	; 0x8003bd <raw_y>
	Angle = (atan2((double)raw_y,(double)raw_x)* 180 / 3.14159265 +180.0);
     3a0:	07 2e       	mov	r0, r23
     3a2:	00 0c       	add	r0, r0
     3a4:	88 0b       	sbc	r24, r24
     3a6:	99 0b       	sbc	r25, r25
     3a8:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     3ac:	6b 01       	movw	r12, r22
     3ae:	7c 01       	movw	r14, r24
     3b0:	be 01       	movw	r22, r28
     3b2:	dd 0f       	add	r29, r29
     3b4:	88 0b       	sbc	r24, r24
     3b6:	99 0b       	sbc	r25, r25
     3b8:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     3bc:	a7 01       	movw	r20, r14
     3be:	96 01       	movw	r18, r12
     3c0:	0e 94 92 14 	call	0x2924	; 0x2924 <atan2>
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	44 e3       	ldi	r20, 0x34	; 52
     3ca:	53 e4       	ldi	r21, 0x43	; 67
     3cc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     3d0:	2b ed       	ldi	r18, 0xDB	; 219
     3d2:	3f e0       	ldi	r19, 0x0F	; 15
     3d4:	49 e4       	ldi	r20, 0x49	; 73
     3d6:	50 e4       	ldi	r21, 0x40	; 64
     3d8:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__divsf3>
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	44 e3       	ldi	r20, 0x34	; 52
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     3e8:	0e 94 56 15 	call	0x2aac	; 0x2aac <__fixunssfsi>
     3ec:	70 93 ba 03 	sts	0x03BA, r23	; 0x8003ba <Angle+0x1>
     3f0:	60 93 b9 03 	sts	0x03B9, r22	; 0x8003b9 <Angle>
	return Angle;
}
     3f4:	cb 01       	movw	r24, r22
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	ff 90       	pop	r15
     3fc:	ef 90       	pop	r14
     3fe:	df 90       	pop	r13
     400:	cf 90       	pop	r12
     402:	08 95       	ret

00000404 <_Z10BrakeMotorv>:
inline void linetrackerXjunctionWatchOff();
inline void linetrackerYjunctionWatchOff();
////////////////////////////////////////////////////

void BrakeMotor(){
	PORTK ^= (1<<PK1);
     404:	e8 e0       	ldi	r30, 0x08	; 8
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	90 81       	ld	r25, Z
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	89 27       	eor	r24, r25
     40e:	80 83       	st	Z, r24
     410:	08 95       	ret

00000412 <_Z15sendDataToSlavev>:
}

void sendDataToSlave(void){
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
//	uart0_puts("a");
// 	I2C_Start(0x20);
// 	I2C_Write_byte_array(bufferMotorSpeed,4);
// 	I2C_Stop();
uart2_putc(START_BYTE);
     416:	8f e7       	ldi	r24, 0x7F	; 127
     418:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_Z10uart2_putch>
//_delay_ms(1);
uart2_putc(bufferMotorSpeed[0]);
     41c:	c5 eb       	ldi	r28, 0xB5	; 181
     41e:	d3 e0       	ldi	r29, 0x03	; 3
     420:	88 81       	ld	r24, Y
     422:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_Z10uart2_putch>
//_delay_ms(1);
uart2_putc(bufferMotorSpeed[1]);
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_Z10uart2_putch>
//_delay_ms(1);
uart2_putc(bufferMotorSpeed[2]);
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_Z10uart2_putch>
//_delay_ms(1);
uart2_putc(bufferMotorSpeed[3]);
     432:	8b 81       	ldd	r24, Y+3	; 0x03
     434:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_Z10uart2_putch>
/*_delay_ms(1);*/
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <_Z19getLineTrackerYdatav>:

int getLineTrackerYdata(void){
     43e:	4f 92       	push	r4
     440:	5f 92       	push	r5
     442:	6f 92       	push	r6
     444:	7f 92       	push	r7
     446:	af 92       	push	r10
     448:	bf 92       	push	r11
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	0f 2e       	mov	r0, r31
     45c:	fa e9       	ldi	r31, 0x9A	; 154
     45e:	ef 2e       	mov	r14, r31
     460:	f2 e0       	ldi	r31, 0x02	; 2
     462:	ff 2e       	mov	r15, r31
     464:	f0 2d       	mov	r31, r0
     466:	03 e8       	ldi	r16, 0x83	; 131
     468:	13 e0       	ldi	r17, 0x03	; 3
	for(int i = 0; i <= 7; i++){
     46a:	c0 e0       	ldi	r28, 0x00	; 0
     46c:	d0 e0       	ldi	r29, 0x00	; 0
		if(bit_is_set(PINC,i)){
			lineBit[i] = 1;
     46e:	cc 24       	eor	r12, r12
     470:	c3 94       	inc	r12
     472:	d1 2c       	mov	r13, r1
/*_delay_ms(1);*/
}

int getLineTrackerYdata(void){
	for(int i = 0; i <= 7; i++){
		if(bit_is_set(PINC,i)){
     474:	86 b1       	in	r24, 0x06	; 6
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0c 2e       	mov	r0, r28
     47a:	02 c0       	rjmp	.+4      	; 0x480 <_Z19getLineTrackerYdatav+0x42>
     47c:	95 95       	asr	r25
     47e:	87 95       	ror	r24
     480:	0a 94       	dec	r0
     482:	e2 f7       	brpl	.-8      	; 0x47c <_Z19getLineTrackerYdatav+0x3e>
     484:	80 ff       	sbrs	r24, 0
     486:	10 c0       	rjmp	.+32     	; 0x4a8 <_Z19getLineTrackerYdatav+0x6a>
			lineBit[i] = 1;
     488:	f8 01       	movw	r30, r16
     48a:	d1 82       	std	Z+1, r13	; 0x01
     48c:	c0 82       	st	Z, r12
			linestate |= (1<<i);
     48e:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <_ZL9linestate>
     492:	c6 01       	movw	r24, r12
     494:	0c 2e       	mov	r0, r28
     496:	02 c0       	rjmp	.+4      	; 0x49c <_Z19getLineTrackerYdatav+0x5e>
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	0a 94       	dec	r0
     49e:	e2 f7       	brpl	.-8      	; 0x498 <_Z19getLineTrackerYdatav+0x5a>
     4a0:	82 2b       	or	r24, r18
     4a2:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <_ZL9linestate>
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <_Z19getLineTrackerYdatav+0x70>
		}
		else{
			lineBit[i] = 0;
     4a8:	f8 01       	movw	r30, r16
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	10 82       	st	Z, r1
		}
		totalSum += weight[i]*lineBit[i];
     4ae:	f7 01       	movw	r30, r14
     4b0:	81 91       	ld	r24, Z+
     4b2:	91 91       	ld	r25, Z+
     4b4:	7f 01       	movw	r14, r30
     4b6:	f8 01       	movw	r30, r16
     4b8:	a1 90       	ld	r10, Z+
     4ba:	b1 90       	ld	r11, Z+
     4bc:	8f 01       	movw	r16, r30
     4be:	8a 9d       	mul	r24, r10
     4c0:	b0 01       	movw	r22, r0
     4c2:	8b 9d       	mul	r24, r11
     4c4:	70 0d       	add	r23, r0
     4c6:	9a 9d       	mul	r25, r10
     4c8:	70 0d       	add	r23, r0
     4ca:	11 24       	eor	r1, r1
     4cc:	07 2e       	mov	r0, r23
     4ce:	00 0c       	add	r0, r0
     4d0:	88 0b       	sbc	r24, r24
     4d2:	99 0b       	sbc	r25, r25
     4d4:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     4d8:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <_ZL8totalSum>
     4dc:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <_ZL8totalSum+0x1>
     4e0:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <_ZL8totalSum+0x2>
     4e4:	50 91 9a 03 	lds	r21, 0x039A	; 0x80039a <_ZL8totalSum+0x3>
     4e8:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     4ec:	2b 01       	movw	r4, r22
     4ee:	3c 01       	movw	r6, r24
     4f0:	60 93 97 03 	sts	0x0397, r22	; 0x800397 <_ZL8totalSum>
     4f4:	70 93 98 03 	sts	0x0398, r23	; 0x800398 <_ZL8totalSum+0x1>
     4f8:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <_ZL8totalSum+0x2>
     4fc:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <_ZL8totalSum+0x3>
		totalLine += lineBit[i];
     500:	b5 01       	movw	r22, r10
     502:	bb 0c       	add	r11, r11
     504:	88 0b       	sbc	r24, r24
     506:	99 0b       	sbc	r25, r25
     508:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     50c:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <_ZL9totalLine>
     510:	30 91 94 03 	lds	r19, 0x0394	; 0x800394 <_ZL9totalLine+0x1>
     514:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <_ZL9totalLine+0x2>
     518:	50 91 96 03 	lds	r21, 0x0396	; 0x800396 <_ZL9totalLine+0x3>
     51c:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     520:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <_ZL9totalLine>
     524:	70 93 94 03 	sts	0x0394, r23	; 0x800394 <_ZL9totalLine+0x1>
     528:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <_ZL9totalLine+0x2>
     52c:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <_ZL9totalLine+0x3>
uart2_putc(bufferMotorSpeed[3]);
/*_delay_ms(1);*/
}

int getLineTrackerYdata(void){
	for(int i = 0; i <= 7; i++){
     530:	21 96       	adiw	r28, 0x01	; 1
     532:	c8 30       	cpi	r28, 0x08	; 8
     534:	d1 05       	cpc	r29, r1
     536:	09 f0       	breq	.+2      	; 0x53a <_Z19getLineTrackerYdatav+0xfc>
     538:	9d cf       	rjmp	.-198    	; 0x474 <_Z19getLineTrackerYdatav+0x36>
			lineBit[i] = 0;
		}
		totalSum += weight[i]*lineBit[i];
		totalLine += lineBit[i];
	}
	linetracker_data = totalSum/totalLine;
     53a:	9b 01       	movw	r18, r22
     53c:	ac 01       	movw	r20, r24
     53e:	c3 01       	movw	r24, r6
     540:	b2 01       	movw	r22, r4
     542:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <__divsf3>
     546:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
     54a:	70 93 9c 03 	sts	0x039C, r23	; 0x80039c <_ZL16linetracker_data+0x1>
     54e:	60 93 9b 03 	sts	0x039B, r22	; 0x80039b <_ZL16linetracker_data>
	totalSum = 0;
     552:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <_ZL8totalSum>
     556:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <_ZL8totalSum+0x1>
     55a:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <_ZL8totalSum+0x2>
     55e:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZL8totalSum+0x3>
	totalLine = 0;
     562:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <_ZL9totalLine>
     566:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <_ZL9totalLine+0x1>
     56a:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <_ZL9totalLine+0x2>
     56e:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <_ZL9totalLine+0x3>
	return linetracker_data;
}
     572:	cb 01       	movw	r24, r22
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	bf 90       	pop	r11
     586:	af 90       	pop	r10
     588:	7f 90       	pop	r7
     58a:	6f 90       	pop	r6
     58c:	5f 90       	pop	r5
     58e:	4f 90       	pop	r4
     590:	08 95       	ret

00000592 <_Z19calculateCompassPIDv>:
	PCMSK2 &= ~(1<<PCINT16);
}


void calculateCompassPID(void)
{
     592:	2f 92       	push	r2
     594:	3f 92       	push	r3
     596:	4f 92       	push	r4
     598:	5f 92       	push	r5
     59a:	6f 92       	push	r6
     59c:	7f 92       	push	r7
     59e:	8f 92       	push	r8
     5a0:	9f 92       	push	r9
     5a2:	af 92       	push	r10
     5a4:	bf 92       	push	r11
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <_Z19calculateCompassPIDv+0x26>
     5b8:	1f 92       	push	r1
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
	if(PidUpdateFlagCompass && compassPID)
     5be:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PidUpdateFlagCompass>
     5c2:	88 23       	and	r24, r24
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <_Z19calculateCompassPIDv+0x36>
     5c6:	1c c1       	rjmp	.+568    	; 0x800 <_Z19calculateCompassPIDv+0x26e>
     5c8:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <compassPID>
     5cc:	88 23       	and	r24, r24
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <_Z19calculateCompassPIDv+0x40>
     5d0:	1b c1       	rjmp	.+566    	; 0x808 <_Z19calculateCompassPIDv+0x276>
	{
		
		compass.input = get_Angle();
     5d2:	c3 de       	rcall	.-634    	; 0x35a <_Z9get_Anglev>
     5d4:	8c 01       	movw	r16, r24
     5d6:	ec e1       	ldi	r30, 0x1C	; 28
     5d8:	f3 e0       	ldi	r31, 0x03	; 3
     5da:	91 83       	std	Z+1, r25	; 0x01
     5dc:	80 83       	st	Z, r24
		
		
		compass.error = compass.SETPOINT	-	compass.input;
     5de:	86 85       	ldd	r24, Z+14	; 0x0e
     5e0:	97 85       	ldd	r25, Z+15	; 0x0f
     5e2:	80 1b       	sub	r24, r16
     5e4:	91 0b       	sbc	r25, r17

		if (compass.error > 180)
     5e6:	85 3b       	cpi	r24, 0xB5	; 181
     5e8:	91 05       	cpc	r25, r1
     5ea:	3c f0       	brlt	.+14     	; 0x5fa <_Z19calculateCompassPIDv+0x68>
		{
			compass.error = compass.error - 360;
     5ec:	88 56       	subi	r24, 0x68	; 104
     5ee:	91 40       	sbci	r25, 0x01	; 1
     5f0:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <compass+0x3>
     5f4:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <compass+0x2>
     5f8:	0f c0       	rjmp	.+30     	; 0x618 <_Z19calculateCompassPIDv+0x86>
		}
		else if (compass.error < -180)
     5fa:	8c 34       	cpi	r24, 0x4C	; 76
     5fc:	2f ef       	ldi	r18, 0xFF	; 255
     5fe:	92 07       	cpc	r25, r18
     600:	2c f0       	brlt	.+10     	; 0x60c <_Z19calculateCompassPIDv+0x7a>
	{
		
		compass.input = get_Angle();
		
		
		compass.error = compass.SETPOINT	-	compass.input;
     602:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <compass+0x3>
     606:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <compass+0x2>
     60a:	06 c0       	rjmp	.+12     	; 0x618 <_Z19calculateCompassPIDv+0x86>
		{
			compass.error = compass.error - 360;
		}
		else if (compass.error < -180)
		{
			compass.error = compass.error + 360;
     60c:	88 59       	subi	r24, 0x98	; 152
     60e:	9e 4f       	sbci	r25, 0xFE	; 254
     610:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <compass+0x3>
     614:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <compass+0x2>
		}
	
		compass.Iterm += compass.ki*compass.error;
     618:	20 90 1e 03 	lds	r2, 0x031E	; 0x80031e <compass+0x2>
     61c:	30 90 1f 03 	lds	r3, 0x031F	; 0x80031f <compass+0x3>
     620:	b1 01       	movw	r22, r2
     622:	03 2c       	mov	r0, r3
     624:	00 0c       	add	r0, r0
     626:	88 0b       	sbc	r24, r24
     628:	99 0b       	sbc	r25, r25
     62a:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     62e:	4b 01       	movw	r8, r22
     630:	5c 01       	movw	r10, r24
     632:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <compass+0x19>
     636:	30 91 36 03 	lds	r19, 0x0336	; 0x800336 <compass+0x1a>
     63a:	40 91 37 03 	lds	r20, 0x0337	; 0x800337 <compass+0x1b>
     63e:	50 91 38 03 	lds	r21, 0x0338	; 0x800338 <compass+0x1c>
     642:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     646:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <compass+0xa>
     64a:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <compass+0xb>
     64e:	40 91 28 03 	lds	r20, 0x0328	; 0x800328 <compass+0xc>
     652:	50 91 29 03 	lds	r21, 0x0329	; 0x800329 <compass+0xd>
     656:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     65a:	6b 01       	movw	r12, r22
     65c:	7c 01       	movw	r14, r24
     65e:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <compass+0xa>
     662:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <compass+0xb>
     666:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <compass+0xc>
     66a:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <compass+0xd>

		if (abs(compass.Iterm) > 0.1*compass.Max_output)
     66e:	60 91 2d 03 	lds	r22, 0x032D	; 0x80032d <compass+0x11>
     672:	70 91 2e 03 	lds	r23, 0x032E	; 0x80032e <compass+0x12>
     676:	07 2e       	mov	r0, r23
     678:	00 0c       	add	r0, r0
     67a:	88 0b       	sbc	r24, r24
     67c:	99 0b       	sbc	r25, r25
     67e:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d ec       	ldi	r18, 0xCD	; 205
     68c:	3c ec       	ldi	r19, 0xCC	; 204
     68e:	4c ec       	ldi	r20, 0xCC	; 204
     690:	5d e3       	ldi	r21, 0x3D	; 61
     692:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     696:	2b 01       	movw	r4, r22
     698:	3c 01       	movw	r6, r24
     69a:	c7 01       	movw	r24, r14
     69c:	b6 01       	movw	r22, r12
     69e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
     6a2:	9b 01       	movw	r18, r22
     6a4:	77 23       	and	r23, r23
     6a6:	24 f4       	brge	.+8      	; 0x6b0 <_Z19calculateCompassPIDv+0x11e>
     6a8:	22 27       	eor	r18, r18
     6aa:	33 27       	eor	r19, r19
     6ac:	26 1b       	sub	r18, r22
     6ae:	37 0b       	sbc	r19, r23
     6b0:	b9 01       	movw	r22, r18
     6b2:	33 0f       	add	r19, r19
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     6bc:	a3 01       	movw	r20, r6
     6be:	92 01       	movw	r18, r4
     6c0:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__gesf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	24 f5       	brge	.+72     	; 0x710 <_Z19calculateCompassPIDv+0x17e>
		{
			if(compass.Iterm > 0)
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	a9 01       	movw	r20, r18
     6ce:	c7 01       	movw	r24, r14
     6d0:	b6 01       	movw	r22, r12
     6d2:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__gesf2>
     6d6:	18 16       	cp	r1, r24
     6d8:	4c f4       	brge	.+18     	; 0x6ec <_Z19calculateCompassPIDv+0x15a>
				compass.Iterm = 0.1*compass.Max_output;
     6da:	40 92 26 03 	sts	0x0326, r4	; 0x800326 <compass+0xa>
     6de:	50 92 27 03 	sts	0x0327, r5	; 0x800327 <compass+0xb>
     6e2:	60 92 28 03 	sts	0x0328, r6	; 0x800328 <compass+0xc>
     6e6:	70 92 29 03 	sts	0x0329, r7	; 0x800329 <compass+0xd>
     6ea:	12 c0       	rjmp	.+36     	; 0x710 <_Z19calculateCompassPIDv+0x17e>
			else
				compass.Iterm = -0.1*compass.Max_output;
     6ec:	2d ec       	ldi	r18, 0xCD	; 205
     6ee:	3c ec       	ldi	r19, 0xCC	; 204
     6f0:	4c ec       	ldi	r20, 0xCC	; 204
     6f2:	5d eb       	ldi	r21, 0xBD	; 189
     6f4:	69 81       	ldd	r22, Y+1	; 0x01
     6f6:	7a 81       	ldd	r23, Y+2	; 0x02
     6f8:	8b 81       	ldd	r24, Y+3	; 0x03
     6fa:	9c 81       	ldd	r25, Y+4	; 0x04
     6fc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     700:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <compass+0xa>
     704:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <compass+0xb>
     708:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <compass+0xc>
     70c:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <compass+0xd>
		}
		
		if (abs(compass.error) > 2 )
     710:	c1 01       	movw	r24, r2
     712:	99 23       	and	r25, r25
     714:	24 f4       	brge	.+8      	; 0x71e <_Z19calculateCompassPIDv+0x18c>
     716:	88 27       	eor	r24, r24
     718:	99 27       	eor	r25, r25
     71a:	82 19       	sub	r24, r2
     71c:	93 09       	sbc	r25, r3
     71e:	03 97       	sbiw	r24, 0x03	; 3
     720:	e4 f1       	brlt	.+120    	; 0x79a <_Z19calculateCompassPIDv+0x208>
		{
			compass.output = compass.kp*compass.error	-	compass.kd*(compass.input-compass.prevInput)	+	compass.Iterm;
     722:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <compass+0x15>
     726:	30 91 32 03 	lds	r19, 0x0332	; 0x800332 <compass+0x16>
     72a:	40 91 33 03 	lds	r20, 0x0333	; 0x800333 <compass+0x17>
     72e:	50 91 34 03 	lds	r21, 0x0334	; 0x800334 <compass+0x18>
     732:	c5 01       	movw	r24, r10
     734:	b4 01       	movw	r22, r8
     736:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     73a:	6b 01       	movw	r12, r22
     73c:	7c 01       	movw	r14, r24
     73e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <compass+0x4>
     742:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <compass+0x5>
     746:	b8 01       	movw	r22, r16
     748:	68 1b       	sub	r22, r24
     74a:	79 0b       	sbc	r23, r25
     74c:	07 2e       	mov	r0, r23
     74e:	00 0c       	add	r0, r0
     750:	88 0b       	sbc	r24, r24
     752:	99 0b       	sbc	r25, r25
     754:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     758:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <compass+0x1d>
     75c:	30 91 3a 03 	lds	r19, 0x033A	; 0x80033a <compass+0x1e>
     760:	40 91 3b 03 	lds	r20, 0x033B	; 0x80033b <compass+0x1f>
     764:	50 91 3c 03 	lds	r21, 0x033C	; 0x80033c <compass+0x20>
     768:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     76c:	9b 01       	movw	r18, r22
     76e:	ac 01       	movw	r20, r24
     770:	c7 01       	movw	r24, r14
     772:	b6 01       	movw	r22, r12
     774:	0e 94 1e 14 	call	0x283c	; 0x283c <__subsf3>
     778:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <compass+0xa>
     77c:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <compass+0xb>
     780:	40 91 28 03 	lds	r20, 0x0328	; 0x800328 <compass+0xc>
     784:	50 91 29 03 	lds	r21, 0x0329	; 0x800329 <compass+0xd>
     788:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     78c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
     790:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <compass+0x7>
     794:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <compass+0x6>
     798:	08 c0       	rjmp	.+16     	; 0x7aa <_Z19calculateCompassPIDv+0x218>
		}
		else
		{
			compass.Iterm = 0;
     79a:	ec e1       	ldi	r30, 0x1C	; 28
     79c:	f3 e0       	ldi	r31, 0x03	; 3
     79e:	12 86       	std	Z+10, r1	; 0x0a
     7a0:	13 86       	std	Z+11, r1	; 0x0b
     7a2:	14 86       	std	Z+12, r1	; 0x0c
     7a4:	15 86       	std	Z+13, r1	; 0x0d
			compass.output = 0;
     7a6:	17 82       	std	Z+7, r1	; 0x07
     7a8:	16 82       	std	Z+6, r1	; 0x06
		}
			
		compass.prevInput = compass.input;
     7aa:	ec e1       	ldi	r30, 0x1C	; 28
     7ac:	f3 e0       	ldi	r31, 0x03	; 3
     7ae:	80 81       	ld	r24, Z
     7b0:	91 81       	ldd	r25, Z+1	; 0x01
     7b2:	95 83       	std	Z+5, r25	; 0x05
     7b4:	84 83       	std	Z+4, r24	; 0x04
		//uart0_puts("\tprevInput= ");
		//uart0_putint(compass.prevInput);
		
		if (abs(compass.output) > compass.Max_output)
     7b6:	86 81       	ldd	r24, Z+6	; 0x06
     7b8:	97 81       	ldd	r25, Z+7	; 0x07
     7ba:	21 89       	ldd	r18, Z+17	; 0x11
     7bc:	32 89       	ldd	r19, Z+18	; 0x12
     7be:	ac 01       	movw	r20, r24
     7c0:	99 23       	and	r25, r25
     7c2:	24 f4       	brge	.+8      	; 0x7cc <_Z19calculateCompassPIDv+0x23a>
     7c4:	44 27       	eor	r20, r20
     7c6:	55 27       	eor	r21, r21
     7c8:	48 1b       	sub	r20, r24
     7ca:	59 0b       	sbc	r21, r25
     7cc:	24 17       	cp	r18, r20
     7ce:	35 07       	cpc	r19, r21
     7d0:	54 f4       	brge	.+20     	; 0x7e6 <_Z19calculateCompassPIDv+0x254>
		{
			compass.output = (compass.output > compass.Max_output) ?	compass.Max_output : -compass.Max_output;
     7d2:	28 17       	cp	r18, r24
     7d4:	39 07       	cpc	r19, r25
     7d6:	1c f0       	brlt	.+6      	; 0x7de <_Z19calculateCompassPIDv+0x24c>
     7d8:	31 95       	neg	r19
     7da:	21 95       	neg	r18
     7dc:	31 09       	sbc	r19, r1
     7de:	30 93 23 03 	sts	0x0323, r19	; 0x800323 <compass+0x7>
     7e2:	20 93 22 03 	sts	0x0322, r18	; 0x800322 <compass+0x6>
		}

		velocity_robot[2] = -compass.output;
     7e6:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <compass+0x6>
     7ea:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <compass+0x7>
     7ee:	91 95       	neg	r25
     7f0:	81 95       	neg	r24
     7f2:	91 09       	sbc	r25, r1
     7f4:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <velocity_robot+0x5>
     7f8:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <velocity_robot+0x4>
		
		PidUpdateFlagCompass = false;
     7fc:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <PidUpdateFlagCompass>
	}
	
	if(!compassPID){
     800:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <compassPID>
     804:	81 11       	cpse	r24, r1
     806:	04 c0       	rjmp	.+8      	; 0x810 <_Z19calculateCompassPIDv+0x27e>
		velocity_robot[2] = 0;
     808:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <velocity_robot+0x5>
     80c:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <velocity_robot+0x4>
	}
}
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	bf 90       	pop	r11
     82a:	af 90       	pop	r10
     82c:	9f 90       	pop	r9
     82e:	8f 90       	pop	r8
     830:	7f 90       	pop	r7
     832:	6f 90       	pop	r6
     834:	5f 90       	pop	r5
     836:	4f 90       	pop	r4
     838:	3f 90       	pop	r3
     83a:	2f 90       	pop	r2
     83c:	08 95       	ret

0000083e <_Z12Stable_Robotv>:

bool Stable_Robot(void)
{
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	c4 e6       	ldi	r28, 0x64	; 100
	uint16_t _angle = 0;
     84a:	e1 2c       	mov	r14, r1
     84c:	f1 2c       	mov	r15, r1
	uint16_t _get_angle = 0;
	for (uint8_t i = 0; i< 100; i++)
	{
		_get_angle = get_Angle();
		if(_get_angle<(compass.SETPOINT+1) && _get_angle>(compass.SETPOINT-1))
     84e:	0c e1       	ldi	r16, 0x1C	; 28
     850:	13 e0       	ldi	r17, 0x03	; 3
{
	uint16_t _angle = 0;
	uint16_t _get_angle = 0;
	for (uint8_t i = 0; i< 100; i++)
	{
		_get_angle = get_Angle();
     852:	83 dd       	rcall	.-1274   	; 0x35a <_Z9get_Anglev>
		if(_get_angle<(compass.SETPOINT+1) && _get_angle>(compass.SETPOINT-1))
     854:	f8 01       	movw	r30, r16
     856:	46 85       	ldd	r20, Z+14	; 0x0e
     858:	57 85       	ldd	r21, Z+15	; 0x0f
     85a:	9a 01       	movw	r18, r20
     85c:	2f 5f       	subi	r18, 0xFF	; 255
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	82 17       	cp	r24, r18
     862:	93 07       	cpc	r25, r19
     864:	40 f4       	brcc	.+16     	; 0x876 <_Z12Stable_Robotv+0x38>
     866:	41 50       	subi	r20, 0x01	; 1
     868:	51 09       	sbc	r21, r1
     86a:	48 17       	cp	r20, r24
     86c:	59 07       	cpc	r21, r25
		{ _angle += get_Angle();}
     86e:	18 f4       	brcc	.+6      	; 0x876 <_Z12Stable_Robotv+0x38>
     870:	74 dd       	rcall	.-1304   	; 0x35a <_Z9get_Anglev>
     872:	e8 0e       	add	r14, r24
     874:	f9 1e       	adc	r15, r25
     876:	c1 50       	subi	r28, 0x01	; 1

bool Stable_Robot(void)
{
	uint16_t _angle = 0;
	uint16_t _get_angle = 0;
	for (uint8_t i = 0; i< 100; i++)
     878:	61 f7       	brne	.-40     	; 0x852 <_Z12Stable_Robotv+0x14>
		_get_angle = get_Angle();
		if(_get_angle<(compass.SETPOINT+1) && _get_angle>(compass.SETPOINT-1))
		{ _angle += get_Angle();}
	}
	_angle= _angle/100;
	if (abs(compass.SETPOINT - _angle) <=2) return 1;
     87a:	97 01       	movw	r18, r14
     87c:	36 95       	lsr	r19
     87e:	27 95       	ror	r18
     880:	36 95       	lsr	r19
     882:	27 95       	ror	r18
     884:	ab e7       	ldi	r26, 0x7B	; 123
     886:	b4 e1       	ldi	r27, 0x14	; 20
     888:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__umulhisi3>
     88c:	96 95       	lsr	r25
     88e:	87 95       	ror	r24
     890:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <compass+0xe>
     894:	30 91 2b 03 	lds	r19, 0x032B	; 0x80032b <compass+0xf>
     898:	28 1b       	sub	r18, r24
     89a:	39 0b       	sbc	r19, r25
     89c:	2e 3f       	cpi	r18, 0xFE	; 254
     89e:	ff ef       	ldi	r31, 0xFF	; 255
     8a0:	3f 07       	cpc	r19, r31
     8a2:	34 f0       	brlt	.+12     	; 0x8b0 <_Z12Stable_Robotv+0x72>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	23 30       	cpi	r18, 0x03	; 3
     8a8:	31 05       	cpc	r19, r1
     8aa:	1c f0       	brlt	.+6      	; 0x8b2 <_Z12Stable_Robotv+0x74>
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <_Z12Stable_Robotv+0x74>
	else return 0;
     8b0:	80 e0       	ldi	r24, 0x00	; 0
}
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	08 95       	ret

000008be <_Z12calculatevelv>:


void calculatevel()	//use matrix to find setpoint of individual motor and store in bufferMotorSpeed and send to slave
{
     8be:	2f 92       	push	r2
     8c0:	3f 92       	push	r3
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	8f 92       	push	r8
     8cc:	9f 92       	push	r9
     8ce:	af 92       	push	r10
     8d0:	bf 92       	push	r11
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <_Z12calculatevelv+0x26>
     8e4:	1f 92       	push	r1
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	0f 2e       	mov	r0, r31
     8ec:	fd ea       	ldi	r31, 0xAD	; 173
     8ee:	cf 2e       	mov	r12, r31
     8f0:	f3 e0       	ldi	r31, 0x03	; 3
     8f2:	df 2e       	mov	r13, r31
     8f4:	f0 2d       	mov	r31, r0
     8f6:	0f 2e       	mov	r0, r31
     8f8:	f9 e0       	ldi	r31, 0x09	; 9
     8fa:	4f 2e       	mov	r4, r31
     8fc:	f2 e0       	ldi	r31, 0x02	; 2
     8fe:	5f 2e       	mov	r5, r31
     900:	f0 2d       	mov	r31, r0
     902:	0f 2e       	mov	r0, r31
     904:	f5 eb       	ldi	r31, 0xB5	; 181
     906:	2f 2e       	mov	r2, r31
     908:	f3 e0       	ldi	r31, 0x03	; 3
     90a:	3f 2e       	mov	r3, r31
     90c:	f0 2d       	mov	r31, r0
     90e:	0f 2e       	mov	r0, r31
     910:	fd ea       	ldi	r31, 0xAD	; 173
     912:	6f 2e       	mov	r6, r31
     914:	f3 e0       	ldi	r31, 0x03	; 3
     916:	7f 2e       	mov	r7, r31
     918:	f0 2d       	mov	r31, r0
     91a:	da 82       	std	Y+2, r13	; 0x02
     91c:	c9 82       	std	Y+1, r12	; 0x01
     91e:	07 ea       	ldi	r16, 0xA7	; 167
     920:	13 e0       	ldi	r17, 0x03	; 3
     922:	72 01       	movw	r14, r4
     924:	1b 82       	std	Y+3, r1	; 0x03
     926:	1c 82       	std	Y+4, r1	; 0x04
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
		for(int j=0;j<3;j++)
		{
			velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
     928:	d8 01       	movw	r26, r16
     92a:	6d 91       	ld	r22, X+
     92c:	7d 91       	ld	r23, X+
     92e:	8d 01       	movw	r16, r26
     930:	f7 01       	movw	r30, r14
     932:	81 90       	ld	r8, Z+
     934:	91 90       	ld	r9, Z+
     936:	a1 90       	ld	r10, Z+
     938:	b1 90       	ld	r11, Z+
     93a:	7f 01       	movw	r14, r30
     93c:	07 2e       	mov	r0, r23
     93e:	00 0c       	add	r0, r0
     940:	88 0b       	sbc	r24, r24
     942:	99 0b       	sbc	r25, r25
     944:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     948:	a5 01       	movw	r20, r10
     94a:	94 01       	movw	r18, r8
     94c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     950:	4b 01       	movw	r8, r22
     952:	5c 01       	movw	r10, r24
     954:	2b 81       	ldd	r18, Y+3	; 0x03
     956:	3c 81       	ldd	r19, Y+4	; 0x04
     958:	b9 01       	movw	r22, r18
     95a:	33 0f       	add	r19, r19
     95c:	88 0b       	sbc	r24, r24
     95e:	99 0b       	sbc	r25, r25
     960:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	c5 01       	movw	r24, r10
     96a:	b4 01       	movw	r22, r8
     96c:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     970:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
     974:	7c 83       	std	Y+4, r23	; 0x04
     976:	6b 83       	std	Y+3, r22	; 0x03
void calculatevel()	//use matrix to find setpoint of individual motor and store in bufferMotorSpeed and send to slave
{
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
		for(int j=0;j<3;j++)
     978:	06 15       	cp	r16, r6
     97a:	17 05       	cpc	r17, r7
     97c:	a9 f6       	brne	.-86     	; 0x928 <_Z12calculatevelv+0x6a>
     97e:	a9 81       	ldd	r26, Y+1	; 0x01
     980:	ba 81       	ldd	r27, Y+2	; 0x02
     982:	6d 93       	st	X+, r22
     984:	7c 93       	st	X, r23
     986:	f2 e0       	ldi	r31, 0x02	; 2
     988:	cf 0e       	add	r12, r31
     98a:	d1 1c       	adc	r13, r1
     98c:	2c e0       	ldi	r18, 0x0C	; 12
     98e:	42 0e       	add	r4, r18
     990:	51 1c       	adc	r5, r1
}


void calculatevel()	//use matrix to find setpoint of individual motor and store in bufferMotorSpeed and send to slave
{
	for(int i=0;i<4;i++)
     992:	c2 14       	cp	r12, r2
     994:	d3 04       	cpc	r13, r3
     996:	09 f6       	brne	.-126    	; 0x91a <_Z12calculatevelv+0x5c>
		{
			velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
			
		}
	}
	bufferMotorSpeed[0] = ((velocity_motor[0]) * 23)/249;	  
     998:	e5 eb       	ldi	r30, 0xB5	; 181
     99a:	f3 e0       	ldi	r31, 0x03	; 3
     99c:	ad ea       	ldi	r26, 0xAD	; 173
     99e:	b3 e0       	ldi	r27, 0x03	; 3
     9a0:	2d 91       	ld	r18, X+
     9a2:	3c 91       	ld	r19, X
     9a4:	47 e1       	ldi	r20, 0x17	; 23
     9a6:	42 9f       	mul	r20, r18
     9a8:	c0 01       	movw	r24, r0
     9aa:	43 9f       	mul	r20, r19
     9ac:	90 0d       	add	r25, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	29 ef       	ldi	r18, 0xF9	; 249
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	b9 01       	movw	r22, r18
     9b6:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__divmodhi4>
     9ba:	60 83       	st	Z, r22
	bufferMotorSpeed[1] = ((velocity_motor[1]) * 23)/249;	  
     9bc:	60 91 af 03 	lds	r22, 0x03AF	; 0x8003af <velocity_motor+0x2>
     9c0:	70 91 b0 03 	lds	r23, 0x03B0	; 0x8003b0 <velocity_motor+0x3>
     9c4:	46 9f       	mul	r20, r22
     9c6:	c0 01       	movw	r24, r0
     9c8:	47 9f       	mul	r20, r23
     9ca:	90 0d       	add	r25, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	b9 01       	movw	r22, r18
     9d0:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__divmodhi4>
     9d4:	61 83       	std	Z+1, r22	; 0x01
	bufferMotorSpeed[2] = ((velocity_motor[2]) * 23)/249;	  
     9d6:	60 91 b1 03 	lds	r22, 0x03B1	; 0x8003b1 <velocity_motor+0x4>
     9da:	70 91 b2 03 	lds	r23, 0x03B2	; 0x8003b2 <velocity_motor+0x5>
     9de:	46 9f       	mul	r20, r22
     9e0:	c0 01       	movw	r24, r0
     9e2:	47 9f       	mul	r20, r23
     9e4:	90 0d       	add	r25, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	b9 01       	movw	r22, r18
     9ea:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__divmodhi4>
     9ee:	62 83       	std	Z+2, r22	; 0x02
	bufferMotorSpeed[3] = ((velocity_motor[3]) * 23)/249 ;
     9f0:	60 91 b3 03 	lds	r22, 0x03B3	; 0x8003b3 <velocity_motor+0x6>
     9f4:	70 91 b4 03 	lds	r23, 0x03B4	; 0x8003b4 <velocity_motor+0x7>
     9f8:	46 9f       	mul	r20, r22
     9fa:	c0 01       	movw	r24, r0
     9fc:	47 9f       	mul	r20, r23
     9fe:	90 0d       	add	r25, r0
     a00:	11 24       	eor	r1, r1
     a02:	b9 01       	movw	r22, r18
     a04:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__divmodhi4>
     a08:	63 83       	std	Z+3, r22	; 0x03
	
	sendDataToSlave();  
     a0a:	03 dd       	rcall	.-1530   	; 0x412 <_Z15sendDataToSlavev>
}		
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
     a2c:	7f 90       	pop	r7
     a2e:	6f 90       	pop	r6
     a30:	5f 90       	pop	r5
     a32:	4f 90       	pop	r4
     a34:	3f 90       	pop	r3
     a36:	2f 90       	pop	r2
     a38:	08 95       	ret

00000a3a <_Z24calculateLineTrackerYPidv>:



void calculateLineTrackerYPid()
{
     a3a:	8f 92       	push	r8
     a3c:	9f 92       	push	r9
     a3e:	af 92       	push	r10
     a40:	bf 92       	push	r11
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
 	if(ltY.FirstData && getLineTrackerYdata() != 0){
     a52:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <ltY+0x10>
     a56:	88 23       	and	r24, r24
     a58:	51 f0       	breq	.+20     	; 0xa6e <_Z24calculateLineTrackerYPidv+0x34>
     a5a:	f1 dc       	rcall	.-1566   	; 0x43e <_Z19getLineTrackerYdatav>
     a5c:	89 2b       	or	r24, r25
     a5e:	39 f0       	breq	.+14     	; 0xa6e <_Z24calculateLineTrackerYPidv+0x34>
 		ltY.prevInput = getLineTrackerYdata();
     a60:	ee dc       	rcall	.-1572   	; 0x43e <_Z19getLineTrackerYdatav>
     a62:	ed e3       	ldi	r30, 0x3D	; 61
     a64:	f3 e0       	ldi	r31, 0x03	; 3
     a66:	95 83       	std	Z+5, r25	; 0x05
     a68:	84 83       	std	Z+4, r24	; 0x04
     a6a:	10 8a       	std	Z+16, r1	; 0x10
 		ltY.FirstData = false;
     a6c:	db c0       	rjmp	.+438    	; 0xc24 <_Z24calculateLineTrackerYPidv+0x1ea>
     a6e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <PidUpdateFlagLinetracker>
 	}
	else if(PidUpdateFlagLinetracker && linetrackerPID){
     a72:	88 23       	and	r24, r24
     a74:	09 f4       	brne	.+2      	; 0xa78 <_Z24calculateLineTrackerYPidv+0x3e>
     a76:	d6 c0       	rjmp	.+428    	; 0xc24 <_Z24calculateLineTrackerYPidv+0x1ea>
     a78:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <linetrackerPID>
     a7c:	88 23       	and	r24, r24
     a7e:	09 f4       	brne	.+2      	; 0xa82 <_Z24calculateLineTrackerYPidv+0x48>
     a80:	d5 c0       	rjmp	.+426    	; 0xc2c <_Z24calculateLineTrackerYPidv+0x1f2>
		ltY.input = getLineTrackerYdata();
     a82:	dd dc       	rcall	.-1606   	; 0x43e <_Z19getLineTrackerYdatav>
     a84:	ec 01       	movw	r28, r24
     a86:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <ltY+0x1>
     a8a:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <ltY>
     a8e:	89 2b       	or	r24, r25
		//if linetracker input is not zero///
		if(ltY.input != 0 && lineMeet){
     a90:	09 f4       	brne	.+2      	; 0xa94 <_Z24calculateLineTrackerYPidv+0x5a>
     a92:	c6 c0       	rjmp	.+396    	; 0xc20 <_Z24calculateLineTrackerYPidv+0x1e6>
     a94:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <lineMeet>
     a98:	88 23       	and	r24, r24
     a9a:	09 f4       	brne	.+2      	; 0xa9e <_Z24calculateLineTrackerYPidv+0x64>
     a9c:	c1 c0       	rjmp	.+386    	; 0xc20 <_Z24calculateLineTrackerYPidv+0x1e6>
     a9e:	ed e3       	ldi	r30, 0x3D	; 61
			//uart0_puts("calculating\n");
			ltY.error = ltY.SETPOINT - ltY.input;
     aa0:	f3 e0       	ldi	r31, 0x03	; 3
     aa2:	66 85       	ldd	r22, Z+14	; 0x0e
     aa4:	77 85       	ldd	r23, Z+15	; 0x0f
     aa6:	6c 1b       	sub	r22, r28
     aa8:	7d 0b       	sbc	r23, r29
     aaa:	73 83       	std	Z+3, r23	; 0x03
     aac:	62 83       	std	Z+2, r22	; 0x02
     aae:	61 15       	cp	r22, r1
			if((ltY.error) == 0)
     ab0:	71 05       	cpc	r23, r1
     ab2:	31 f4       	brne	.+12     	; 0xac0 <_Z24calculateLineTrackerYPidv+0x86>
     ab4:	12 86       	std	Z+10, r1	; 0x0a
			{
				ltY.Iterm = 0;
     ab6:	13 86       	std	Z+11, r1	; 0x0b
     ab8:	14 86       	std	Z+12, r1	; 0x0c
     aba:	15 86       	std	Z+13, r1	; 0x0d
     abc:	d5 83       	std	Z+5, r29	; 0x05
			}
			if(ltY.error == 0)
				ltY.prevInput = ltY.input;
     abe:	c4 83       	std	Z+4, r28	; 0x04
     ac0:	07 2e       	mov	r0, r23
			ltY.Iterm += ltY.ki * ltY.error;
     ac2:	00 0c       	add	r0, r0
     ac4:	88 0b       	sbc	r24, r24
     ac6:	99 0b       	sbc	r25, r25
     ac8:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     acc:	4b 01       	movw	r8, r22
     ace:	5c 01       	movw	r10, r24
     ad0:	0d e3       	ldi	r16, 0x3D	; 61
     ad2:	13 e0       	ldi	r17, 0x03	; 3
     ad4:	f8 01       	movw	r30, r16
     ad6:	21 8d       	ldd	r18, Z+25	; 0x19
     ad8:	32 8d       	ldd	r19, Z+26	; 0x1a
     ada:	43 8d       	ldd	r20, Z+27	; 0x1b
     adc:	54 8d       	ldd	r21, Z+28	; 0x1c
     ade:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     ae2:	f8 01       	movw	r30, r16
     ae4:	22 85       	ldd	r18, Z+10	; 0x0a
     ae6:	33 85       	ldd	r19, Z+11	; 0x0b
     ae8:	44 85       	ldd	r20, Z+12	; 0x0c
     aea:	55 85       	ldd	r21, Z+13	; 0x0d
     aec:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     af0:	6b 01       	movw	r12, r22
     af2:	7c 01       	movw	r14, r24
     af4:	f8 01       	movw	r30, r16
     af6:	62 87       	std	Z+10, r22	; 0x0a
     af8:	73 87       	std	Z+11, r23	; 0x0b
     afa:	84 87       	std	Z+12, r24	; 0x0c
     afc:	95 87       	std	Z+13, r25	; 0x0d
     afe:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
			if(abs(ltY.Iterm) > 10){
     b02:	9b 01       	movw	r18, r22
     b04:	77 23       	and	r23, r23
     b06:	24 f4       	brge	.+8      	; 0xb10 <_Z24calculateLineTrackerYPidv+0xd6>
     b08:	22 27       	eor	r18, r18
     b0a:	33 27       	eor	r19, r19
     b0c:	26 1b       	sub	r18, r22
     b0e:	37 0b       	sbc	r19, r23
     b10:	2b 30       	cpi	r18, 0x0B	; 11
     b12:	31 05       	cpc	r19, r1
     b14:	5c f1       	brlt	.+86     	; 0xb6c <_Z24calculateLineTrackerYPidv+0x132>
     b16:	20 e0       	ldi	r18, 0x00	; 0
				if(ltY.Iterm > 0)	ltY.Iterm = 5;
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	a9 01       	movw	r20, r18
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__gesf2>
     b24:	18 16       	cp	r1, r24
     b26:	6c f4       	brge	.+26     	; 0xb42 <_Z24calculateLineTrackerYPidv+0x108>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 ea       	ldi	r26, 0xA0	; 160
     b2e:	b0 e4       	ldi	r27, 0x40	; 64
     b30:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <ltY+0xa>
     b34:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <ltY+0xb>
     b38:	a0 93 49 03 	sts	0x0349, r26	; 0x800349 <ltY+0xc>
     b3c:	b0 93 4a 03 	sts	0x034A, r27	; 0x80034a <ltY+0xd>
     b40:	15 c0       	rjmp	.+42     	; 0xb6c <_Z24calculateLineTrackerYPidv+0x132>
     b42:	20 e0       	ldi	r18, 0x00	; 0
				else if(ltY.Iterm < 0)	ltY.Iterm = -5;
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	a9 01       	movw	r20, r18
     b48:	c7 01       	movw	r24, r14
     b4a:	b6 01       	movw	r22, r12
     b4c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__cmpsf2>
     b50:	88 23       	and	r24, r24
     b52:	64 f4       	brge	.+24     	; 0xb6c <_Z24calculateLineTrackerYPidv+0x132>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 ea       	ldi	r26, 0xA0	; 160
     b5a:	b0 ec       	ldi	r27, 0xC0	; 192
     b5c:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <ltY+0xa>
     b60:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <ltY+0xb>
     b64:	a0 93 49 03 	sts	0x0349, r26	; 0x800349 <ltY+0xc>
     b68:	b0 93 4a 03 	sts	0x034A, r27	; 0x80034a <ltY+0xd>
     b6c:	0d e3       	ldi	r16, 0x3D	; 61
			}
			ltY.output = ltY.kp * ltY.error + ltY.Iterm - ltY.kd *(ltY.input - ltY.prevInput);
     b6e:	13 e0       	ldi	r17, 0x03	; 3
     b70:	f8 01       	movw	r30, r16
     b72:	25 89       	ldd	r18, Z+21	; 0x15
     b74:	36 89       	ldd	r19, Z+22	; 0x16
     b76:	47 89       	ldd	r20, Z+23	; 0x17
     b78:	50 8d       	ldd	r21, Z+24	; 0x18
     b7a:	c5 01       	movw	r24, r10
     b7c:	b4 01       	movw	r22, r8
     b7e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     b82:	f8 01       	movw	r30, r16
     b84:	22 85       	ldd	r18, Z+10	; 0x0a
     b86:	33 85       	ldd	r19, Z+11	; 0x0b
     b88:	44 85       	ldd	r20, Z+12	; 0x0c
     b8a:	55 85       	ldd	r21, Z+13	; 0x0d
     b8c:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     b90:	6b 01       	movw	r12, r22
     b92:	7c 01       	movw	r14, r24
     b94:	f8 01       	movw	r30, r16
     b96:	84 81       	ldd	r24, Z+4	; 0x04
     b98:	95 81       	ldd	r25, Z+5	; 0x05
     b9a:	be 01       	movw	r22, r28
     b9c:	68 1b       	sub	r22, r24
     b9e:	79 0b       	sbc	r23, r25
     ba0:	07 2e       	mov	r0, r23
     ba2:	00 0c       	add	r0, r0
     ba4:	88 0b       	sbc	r24, r24
     ba6:	99 0b       	sbc	r25, r25
     ba8:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     bac:	f8 01       	movw	r30, r16
     bae:	25 8d       	ldd	r18, Z+29	; 0x1d
     bb0:	36 8d       	ldd	r19, Z+30	; 0x1e
     bb2:	47 8d       	ldd	r20, Z+31	; 0x1f
     bb4:	50 a1       	ldd	r21, Z+32	; 0x20
     bb6:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     bba:	9b 01       	movw	r18, r22
     bbc:	ac 01       	movw	r20, r24
     bbe:	c7 01       	movw	r24, r14
     bc0:	b6 01       	movw	r22, r12
     bc2:	0e 94 1e 14 	call	0x283c	; 0x283c <__subsf3>
     bc6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
     bca:	9b 01       	movw	r18, r22
     bcc:	f8 01       	movw	r30, r16
     bce:	77 83       	std	Z+7, r23	; 0x07
     bd0:	66 83       	std	Z+6, r22	; 0x06
     bd2:	d5 83       	std	Z+5, r29	; 0x05
			ltY.prevInput = ltY.input;
     bd4:	c4 83       	std	Z+4, r28	; 0x04
     bd6:	ab 01       	movw	r20, r22
			if (abs(ltY.output) > 40)
     bd8:	77 23       	and	r23, r23
     bda:	24 f4       	brge	.+8      	; 0xbe4 <_Z24calculateLineTrackerYPidv+0x1aa>
     bdc:	44 27       	eor	r20, r20
     bde:	55 27       	eor	r21, r21
     be0:	46 1b       	sub	r20, r22
     be2:	57 0b       	sbc	r21, r23
     be4:	49 32       	cpi	r20, 0x29	; 41
     be6:	51 05       	cpc	r21, r1
     be8:	84 f0       	brlt	.+32     	; 0xc0a <_Z24calculateLineTrackerYPidv+0x1d0>
     bea:	12 16       	cp	r1, r18
			{
				if (ltY.output > 0){ltY.output = 40;}
     bec:	13 06       	cpc	r1, r19
     bee:	3c f4       	brge	.+14     	; 0xbfe <_Z24calculateLineTrackerYPidv+0x1c4>
     bf0:	88 e2       	ldi	r24, 0x28	; 40
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <ltY+0x7>
     bf8:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <ltY+0x6>
     bfc:	06 c0       	rjmp	.+12     	; 0xc0a <_Z24calculateLineTrackerYPidv+0x1d0>
     bfe:	88 ed       	ldi	r24, 0xD8	; 216
				else{ltY.output = -40;}
     c00:	9f ef       	ldi	r25, 0xFF	; 255
     c02:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <ltY+0x7>
     c06:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <ltY+0x6>
     c0a:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <ltY+0x6>
			}
			velocity_robot[0] = -ltY.output;
     c0e:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <ltY+0x7>
     c12:	91 95       	neg	r25
     c14:	81 95       	neg	r24
     c16:	91 09       	sbc	r25, r1
     c18:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <velocity_robot+0x1>
     c1c:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <velocity_robot>
     c20:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <PidUpdateFlagLinetracker>
		}

		PidUpdateFlagLinetracker = false;
     c24:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <linetrackerPID>
		
	}
	if(!linetrackerPID)
     c28:	81 11       	cpse	r24, r1
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <_Z24calculateLineTrackerYPidv+0x1fa>
     c2c:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <velocity_robot+0x1>
		velocity_robot[0] = 0;
     c30:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <velocity_robot>
     c34:	df 91       	pop	r29
	
}
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	8f 90       	pop	r8
     c4c:	08 95       	ret

00000c4e <_Z13initializeAllv>:
     c4e:	cf 93       	push	r28



void initializeAll()
{
     c50:	df 93       	push	r29
		ki = i;
		kd = d;
	}
	void Set_Max_Min_Output (int Max_dum, int Min_dum)
	{
		Max_output = Max_dum;
     c52:	cc e1       	ldi	r28, 0x1C	; 28
     c54:	d3 e0       	ldi	r29, 0x03	; 3
     c56:	88 e2       	ldi	r24, 0x28	; 40
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	9a 8b       	std	Y+18, r25	; 0x12
     c5c:	89 8b       	std	Y+17, r24	; 0x11
		Min_output = Min_dum;
     c5e:	1c 8a       	std	Y+20, r1	; 0x14
     c60:	1b 8a       	std	Y+19, r1	; 0x13
void initializeAll()
{
	
	compass.Set_Max_Min_Output(40,0);	
	
	ltY.SETPOINT = 45;
     c62:	ed e3       	ldi	r30, 0x3D	; 61
     c64:	f3 e0       	ldi	r31, 0x03	; 3
     c66:	8d e2       	ldi	r24, 0x2D	; 45
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	97 87       	std	Z+15, r25	; 0x0f
     c6c:	86 87       	std	Z+14, r24	; 0x0e
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	a0 e0       	ldi	r26, 0x00	; 0
     c74:	b0 e4       	ldi	r27, 0x40	; 64
     c76:	8d 8b       	std	Y+21, r24	; 0x15
     c78:	9e 8b       	std	Y+22, r25	; 0x16
     c7a:	af 8b       	std	Y+23, r26	; 0x17
     c7c:	b8 8f       	std	Y+24, r27	; 0x18
		ki = i;
     c7e:	19 8e       	std	Y+25, r1	; 0x19
     c80:	1a 8e       	std	Y+26, r1	; 0x1a
     c82:	1b 8e       	std	Y+27, r1	; 0x1b
     c84:	1c 8e       	std	Y+28, r1	; 0x1c
		kd = d;
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a8 ef       	ldi	r26, 0xF8	; 248
     c8c:	b1 e4       	ldi	r27, 0x41	; 65
     c8e:	8d 8f       	std	Y+29, r24	; 0x1d
     c90:	9e 8f       	std	Y+30, r25	; 0x1e
     c92:	af 8f       	std	Y+31, r26	; 0x1f
     c94:	b8 a3       	std	Y+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
     c96:	81 ee       	ldi	r24, 0xE1	; 225
     c98:	9a e7       	ldi	r25, 0x7A	; 122
     c9a:	a4 e1       	ldi	r26, 0x14	; 20
     c9c:	bf e3       	ldi	r27, 0x3F	; 63
     c9e:	85 8b       	std	Z+21, r24	; 0x15
     ca0:	96 8b       	std	Z+22, r25	; 0x16
     ca2:	a7 8b       	std	Z+23, r26	; 0x17
     ca4:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
     ca6:	8d ec       	ldi	r24, 0xCD	; 205
     ca8:	9c ec       	ldi	r25, 0xCC	; 204
     caa:	ac e4       	ldi	r26, 0x4C	; 76
     cac:	bd e3       	ldi	r27, 0x3D	; 61
     cae:	81 8f       	std	Z+25, r24	; 0x19
     cb0:	92 8f       	std	Z+26, r25	; 0x1a
     cb2:	a3 8f       	std	Z+27, r26	; 0x1b
     cb4:	b4 8f       	std	Z+28, r27	; 0x1c
		kd = d;
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a9 eb       	ldi	r26, 0xB9	; 185
     cbc:	b3 e4       	ldi	r27, 0x43	; 67
     cbe:	85 8f       	std	Z+29, r24	; 0x1d
     cc0:	96 8f       	std	Z+30, r25	; 0x1e
     cc2:	a7 8f       	std	Z+31, r26	; 0x1f
     cc4:	b0 a3       	std	Z+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
     cc6:	eb ef       	ldi	r30, 0xFB	; 251
     cc8:	f2 e0       	ldi	r31, 0x02	; 2
     cca:	4a e9       	ldi	r20, 0x9A	; 154
     ccc:	59 e9       	ldi	r21, 0x99	; 153
     cce:	69 e1       	ldi	r22, 0x19	; 25
     cd0:	7e e3       	ldi	r23, 0x3E	; 62
     cd2:	45 8b       	std	Z+21, r20	; 0x15
     cd4:	56 8b       	std	Z+22, r21	; 0x16
     cd6:	67 8b       	std	Z+23, r22	; 0x17
     cd8:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
     cda:	11 8e       	std	Z+25, r1	; 0x19
     cdc:	12 8e       	std	Z+26, r1	; 0x1a
     cde:	13 8e       	std	Z+27, r1	; 0x1b
     ce0:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 ec       	ldi	r26, 0xC0	; 192
     ce8:	bf e3       	ldi	r27, 0x3F	; 63
     cea:	85 8f       	std	Z+29, r24	; 0x1d
     cec:	96 8f       	std	Z+30, r25	; 0x1e
     cee:	a7 8f       	std	Z+31, r26	; 0x1f
     cf0:	b0 a3       	std	Z+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
     cf2:	ea ed       	ldi	r30, 0xDA	; 218
     cf4:	f2 e0       	ldi	r31, 0x02	; 2
     cf6:	45 8b       	std	Z+21, r20	; 0x15
     cf8:	56 8b       	std	Z+22, r21	; 0x16
     cfa:	67 8b       	std	Z+23, r22	; 0x17
     cfc:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
     cfe:	11 8e       	std	Z+25, r1	; 0x19
     d00:	12 8e       	std	Z+26, r1	; 0x1a
     d02:	13 8e       	std	Z+27, r1	; 0x1b
     d04:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
     d06:	85 8f       	std	Z+29, r24	; 0x1d
     d08:	96 8f       	std	Z+30, r25	; 0x1e
     d0a:	a7 8f       	std	Z+31, r26	; 0x1f
     d0c:	b0 a3       	std	Z+32, r27	; 0x20
	ltY.SETPOINT = 45;
	compass.setPid(2,0,31);//2,0,31);//4,0.09,18);	//5.5, 0, 500 , 2.1,0.04,32
	ltY.setPid(0.58,0.05,370);//0.58,0.05,370);
	driveX.setPid(0.15,0,1.5);		
	driveY.setPid(0.15,0,1.5);
	init_QMC5883L();
     d0e:	c8 da       	rcall	.-2672   	; 0x2a0 <_Z13init_QMC5883Lv>
	
	if (compass.FirstData)
     d10:	88 89       	ldd	r24, Y+16	; 0x10
     d12:	88 23       	and	r24, r24
	{
		initialCompassAngle = get_Angle();
     d14:	41 f0       	breq	.+16     	; 0xd26 <_Z13initializeAllv+0xd8>
     d16:	21 db       	rcall	.-2494   	; 0x35a <_Z9get_Anglev>
     d18:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <initialCompassAngle+0x1>
     d1c:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <initialCompassAngle>
		compass.FirstData = false;
     d20:	18 8a       	std	Y+16, r1	; 0x10
		compass.SETPOINT = initialCompassAngle;
     d22:	9f 87       	std	Y+15, r25	; 0x0f
     d24:	8e 87       	std	Y+14, r24	; 0x0e
	}
	
	
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <_Z4movxii>:

void movx(int distance_setpoint, int direction){
     d2c:	4f 92       	push	r4
     d2e:	5f 92       	push	r5
     d30:	6f 92       	push	r6
     d32:	7f 92       	push	r7
     d34:	8f 92       	push	r8
     d36:	9f 92       	push	r9
     d38:	af 92       	push	r10
     d3a:	bf 92       	push	r11
     d3c:	cf 92       	push	r12
     d3e:	df 92       	push	r13
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	6c 01       	movw	r12, r24
     d4e:	7b 01       	movw	r14, r22
	//compass.setPid(2.1,0.04,32);
	distanceX = abs(encoderX.getdistance());
     d50:	8c eb       	ldi	r24, 0xBC	; 188
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	24 da       	rcall	.-3000   	; 0x19e <_ZN7encoder11getdistanceEv>
     d56:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
     d5a:	ab 01       	movw	r20, r22
     d5c:	77 23       	and	r23, r23
     d5e:	24 f4       	brge	.+8      	; 0xd68 <_Z4movxii+0x3c>
     d60:	44 27       	eor	r20, r20
     d62:	55 27       	eor	r21, r21
     d64:	46 1b       	sub	r20, r22
     d66:	57 0b       	sbc	r21, r23
     d68:	ea 01       	movw	r28, r20
     d6a:	50 93 a6 03 	sts	0x03A6, r21	; 0x8003a6 <distanceX+0x1>
     d6e:	40 93 a5 03 	sts	0x03A5, r20	; 0x8003a5 <distanceX>
	driveX.SETPOINT = distance_setpoint;
     d72:	d0 92 0a 03 	sts	0x030A, r13	; 0x80030a <driveX+0xf>
     d76:	c0 92 09 03 	sts	0x0309, r12	; 0x800309 <driveX+0xe>
	if(PidUpdateFlagDriveX)
     d7a:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <PidUpdateFlagDriveX>
     d7e:	22 23       	and	r18, r18
     d80:	09 f4       	brne	.+2      	; 0xd84 <_Z4movxii+0x58>
     d82:	18 c1       	rjmp	.+560    	; 0xfb4 <_Z4movxii+0x288>
	{
		movingx = true;
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	20 93 a0 03 	sts	0x03A0, r18	; 0x8003a0 <movingx>
		movingyfront = false;
     d8a:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <movingyfront>
		movingyback = false;
     d8e:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
		driveX.input = distanceX;
     d92:	50 93 fc 02 	sts	0x02FC, r21	; 0x8002fc <driveX+0x1>
     d96:	40 93 fb 02 	sts	0x02FB, r20	; 0x8002fb <driveX>
		PidUpdateFlagDriveX = false;
     d9a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <PidUpdateFlagDriveX>
		if(distanceX >= 200){
     d9e:	48 3c       	cpi	r20, 0xC8	; 200
     da0:	51 05       	cpc	r21, r1
     da2:	0c f4       	brge	.+2      	; 0xda6 <_Z4movxii+0x7a>
     da4:	dd c0       	rjmp	.+442    	; 0xf60 <_Z4movxii+0x234>
			driveX.error = driveX.SETPOINT - driveX.input;
     da6:	c4 1a       	sub	r12, r20
     da8:	d5 0a       	sbc	r13, r21
     daa:	0b ef       	ldi	r16, 0xFB	; 251
     dac:	12 e0       	ldi	r17, 0x02	; 2
     dae:	f8 01       	movw	r30, r16
     db0:	d3 82       	std	Z+3, r13	; 0x03
     db2:	c2 82       	std	Z+2, r12	; 0x02
			driveX.Iterm += driveX.ki * driveX.error;
     db4:	b6 01       	movw	r22, r12
     db6:	0d 2c       	mov	r0, r13
     db8:	00 0c       	add	r0, r0
     dba:	88 0b       	sbc	r24, r24
     dbc:	99 0b       	sbc	r25, r25
     dbe:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     dc2:	2b 01       	movw	r4, r22
     dc4:	3c 01       	movw	r6, r24
     dc6:	f8 01       	movw	r30, r16
     dc8:	21 8d       	ldd	r18, Z+25	; 0x19
     dca:	32 8d       	ldd	r19, Z+26	; 0x1a
     dcc:	43 8d       	ldd	r20, Z+27	; 0x1b
     dce:	54 8d       	ldd	r21, Z+28	; 0x1c
     dd0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     dd4:	f8 01       	movw	r30, r16
     dd6:	22 85       	ldd	r18, Z+10	; 0x0a
     dd8:	33 85       	ldd	r19, Z+11	; 0x0b
     dda:	44 85       	ldd	r20, Z+12	; 0x0c
     ddc:	55 85       	ldd	r21, Z+13	; 0x0d
     dde:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     de2:	4b 01       	movw	r8, r22
     de4:	5c 01       	movw	r10, r24
     de6:	f8 01       	movw	r30, r16
     de8:	62 87       	std	Z+10, r22	; 0x0a
     dea:	73 87       	std	Z+11, r23	; 0x0b
     dec:	84 87       	std	Z+12, r24	; 0x0c
     dee:	95 87       	std	Z+13, r25	; 0x0d
			if(driveX.FirstData){
     df0:	80 89       	ldd	r24, Z+16	; 0x10
     df2:	88 23       	and	r24, r24
     df4:	19 f0       	breq	.+6      	; 0xdfc <_Z4movxii+0xd0>
				driveX.prevInput = driveX.input;
     df6:	d5 83       	std	Z+5, r29	; 0x05
     df8:	c4 83       	std	Z+4, r28	; 0x04
				driveX.FirstData = false;
     dfa:	10 8a       	std	Z+16, r1	; 0x10
			}
			if(abs(driveX.Iterm) > 10){
     dfc:	c5 01       	movw	r24, r10
     dfe:	b4 01       	movw	r22, r8
     e00:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
     e04:	9b 01       	movw	r18, r22
     e06:	77 23       	and	r23, r23
     e08:	24 f4       	brge	.+8      	; 0xe12 <_Z4movxii+0xe6>
     e0a:	22 27       	eor	r18, r18
     e0c:	33 27       	eor	r19, r19
     e0e:	26 1b       	sub	r18, r22
     e10:	37 0b       	sbc	r19, r23
     e12:	2b 30       	cpi	r18, 0x0B	; 11
     e14:	31 05       	cpc	r19, r1
     e16:	5c f1       	brlt	.+86     	; 0xe6e <_Z4movxii+0x142>
				if(driveX.Iterm > 0)	driveX.Iterm = 10;
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	a9 01       	movw	r20, r18
     e1e:	c5 01       	movw	r24, r10
     e20:	b4 01       	movw	r22, r8
     e22:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__gesf2>
     e26:	18 16       	cp	r1, r24
     e28:	6c f4       	brge	.+26     	; 0xe44 <_Z4movxii+0x118>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a0 e2       	ldi	r26, 0x20	; 32
     e30:	b1 e4       	ldi	r27, 0x41	; 65
     e32:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <driveX+0xa>
     e36:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <driveX+0xb>
     e3a:	a0 93 07 03 	sts	0x0307, r26	; 0x800307 <driveX+0xc>
     e3e:	b0 93 08 03 	sts	0x0308, r27	; 0x800308 <driveX+0xd>
     e42:	15 c0       	rjmp	.+42     	; 0xe6e <_Z4movxii+0x142>
				if(driveX.Iterm < 0)	driveX.Iterm = -10;
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	a9 01       	movw	r20, r18
     e4a:	c5 01       	movw	r24, r10
     e4c:	b4 01       	movw	r22, r8
     e4e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__cmpsf2>
     e52:	88 23       	and	r24, r24
     e54:	64 f4       	brge	.+24     	; 0xe6e <_Z4movxii+0x142>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a0 e2       	ldi	r26, 0x20	; 32
     e5c:	b1 ec       	ldi	r27, 0xC1	; 193
     e5e:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <driveX+0xa>
     e62:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <driveX+0xb>
     e66:	a0 93 07 03 	sts	0x0307, r26	; 0x800307 <driveX+0xc>
     e6a:	b0 93 08 03 	sts	0x0308, r27	; 0x800308 <driveX+0xd>
			}
			if((driveX.error) > 0){
     e6e:	1c 14       	cp	r1, r12
     e70:	1d 04       	cpc	r1, r13
     e72:	9c f5       	brge	.+102    	; 0xeda <_Z4movxii+0x1ae>
				driveX.output = driveX.kp * driveX.error + driveX.Iterm - driveX.kd*(driveX.input - driveX.prevInput);
     e74:	0b ef       	ldi	r16, 0xFB	; 251
     e76:	12 e0       	ldi	r17, 0x02	; 2
     e78:	f8 01       	movw	r30, r16
     e7a:	25 89       	ldd	r18, Z+21	; 0x15
     e7c:	36 89       	ldd	r19, Z+22	; 0x16
     e7e:	47 89       	ldd	r20, Z+23	; 0x17
     e80:	50 8d       	ldd	r21, Z+24	; 0x18
     e82:	c3 01       	movw	r24, r6
     e84:	b2 01       	movw	r22, r4
     e86:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     e8a:	f8 01       	movw	r30, r16
     e8c:	22 85       	ldd	r18, Z+10	; 0x0a
     e8e:	33 85       	ldd	r19, Z+11	; 0x0b
     e90:	44 85       	ldd	r20, Z+12	; 0x0c
     e92:	55 85       	ldd	r21, Z+13	; 0x0d
     e94:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     e98:	4b 01       	movw	r8, r22
     e9a:	5c 01       	movw	r10, r24
     e9c:	f8 01       	movw	r30, r16
     e9e:	84 81       	ldd	r24, Z+4	; 0x04
     ea0:	95 81       	ldd	r25, Z+5	; 0x05
     ea2:	be 01       	movw	r22, r28
     ea4:	68 1b       	sub	r22, r24
     ea6:	79 0b       	sbc	r23, r25
     ea8:	07 2e       	mov	r0, r23
     eaa:	00 0c       	add	r0, r0
     eac:	88 0b       	sbc	r24, r24
     eae:	99 0b       	sbc	r25, r25
     eb0:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     eb4:	f8 01       	movw	r30, r16
     eb6:	25 8d       	ldd	r18, Z+29	; 0x1d
     eb8:	36 8d       	ldd	r19, Z+30	; 0x1e
     eba:	47 8d       	ldd	r20, Z+31	; 0x1f
     ebc:	50 a1       	ldd	r21, Z+32	; 0x20
     ebe:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     ec2:	9b 01       	movw	r18, r22
     ec4:	ac 01       	movw	r20, r24
     ec6:	c5 01       	movw	r24, r10
     ec8:	b4 01       	movw	r22, r8
     eca:	0e 94 1e 14 	call	0x283c	; 0x283c <__subsf3>
     ece:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
     ed2:	f8 01       	movw	r30, r16
     ed4:	77 83       	std	Z+7, r23	; 0x07
     ed6:	66 83       	std	Z+6, r22	; 0x06
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <_Z4movxii+0x1b6>
			}
			else{
				driveX.output = 0;
     eda:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <driveX+0x7>
     ede:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <driveX+0x6>
			}
			driveX.prevInput = driveX.input;
     ee2:	eb ef       	ldi	r30, 0xFB	; 251
     ee4:	f2 e0       	ldi	r31, 0x02	; 2
     ee6:	d5 83       	std	Z+5, r29	; 0x05
     ee8:	c4 83       	std	Z+4, r28	; 0x04
			//////////////////////////////////////////////////////
			if(abs(driveX.output) > 150){
     eea:	86 81       	ldd	r24, Z+6	; 0x06
     eec:	97 81       	ldd	r25, Z+7	; 0x07
     eee:	9c 01       	movw	r18, r24
     ef0:	99 23       	and	r25, r25
     ef2:	24 f4       	brge	.+8      	; 0xefc <_Z4movxii+0x1d0>
     ef4:	22 27       	eor	r18, r18
     ef6:	33 27       	eor	r19, r19
     ef8:	28 1b       	sub	r18, r24
     efa:	39 0b       	sbc	r19, r25
     efc:	27 39       	cpi	r18, 0x97	; 151
     efe:	31 05       	cpc	r19, r1
     f00:	8c f0       	brlt	.+34     	; 0xf24 <_Z4movxii+0x1f8>
				if(driveX.output >0)	driveX.output = 150;
     f02:	18 16       	cp	r1, r24
     f04:	19 06       	cpc	r1, r25
     f06:	3c f4       	brge	.+14     	; 0xf16 <_Z4movxii+0x1ea>
     f08:	86 e9       	ldi	r24, 0x96	; 150
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <driveX+0x7>
     f10:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <driveX+0x6>
     f14:	1c c0       	rjmp	.+56     	; 0xf4e <_Z4movxii+0x222>
				else						driveX.output = -150;
     f16:	8a e6       	ldi	r24, 0x6A	; 106
     f18:	9f ef       	ldi	r25, 0xFF	; 255
     f1a:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <driveX+0x7>
     f1e:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <driveX+0x6>
     f22:	15 c0       	rjmp	.+42     	; 0xf4e <_Z4movxii+0x222>
			}
 			if(abs(driveX.output) < 30){
     f24:	9c 01       	movw	r18, r24
     f26:	23 5e       	subi	r18, 0xE3	; 227
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	2b 33       	cpi	r18, 0x3B	; 59
     f2c:	31 05       	cpc	r19, r1
     f2e:	78 f4       	brcc	.+30     	; 0xf4e <_Z4movxii+0x222>
 				if(driveX.output >= 0)	driveX.output = 30;
     f30:	99 23       	and	r25, r25
     f32:	3c f0       	brlt	.+14     	; 0xf42 <_Z4movxii+0x216>
     f34:	8e e1       	ldi	r24, 0x1E	; 30
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <driveX+0x7>
     f3c:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <driveX+0x6>
     f40:	06 c0       	rjmp	.+12     	; 0xf4e <_Z4movxii+0x222>
 				else					driveX.output = -30;
     f42:	82 ee       	ldi	r24, 0xE2	; 226
     f44:	9f ef       	ldi	r25, 0xFF	; 255
     f46:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <driveX+0x7>
     f4a:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <driveX+0x6>
 			}
			//////////////////////////////////////////////////////
			velocity_robot[0] = driveX.output;
     f4e:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <driveX+0x6>
     f52:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <driveX+0x7>
     f56:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <velocity_robot+0x1>
     f5a:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <velocity_robot>
     f5e:	18 c0       	rjmp	.+48     	; 0xf90 <_Z4movxii+0x264>
		}
		else{
				velocity_robot[0] = 60 + 0.45*distanceX;
     f60:	ba 01       	movw	r22, r20
     f62:	55 0f       	add	r21, r21
     f64:	88 0b       	sbc	r24, r24
     f66:	99 0b       	sbc	r25, r25
     f68:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
     f6c:	26 e6       	ldi	r18, 0x66	; 102
     f6e:	36 e6       	ldi	r19, 0x66	; 102
     f70:	46 ee       	ldi	r20, 0xE6	; 230
     f72:	5e e3       	ldi	r21, 0x3E	; 62
     f74:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e7       	ldi	r20, 0x70	; 112
     f7e:	52 e4       	ldi	r21, 0x42	; 66
     f80:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
     f84:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
     f88:	70 93 a8 03 	sts	0x03A8, r23	; 0x8003a8 <velocity_robot+0x1>
     f8c:	60 93 a7 03 	sts	0x03A7, r22	; 0x8003a7 <velocity_robot>
		}
		if(direction == Front){
			velocity_robot[0] = velocity_robot[0];
		}
		else if(direction == Back){
     f90:	f3 e0       	ldi	r31, 0x03	; 3
     f92:	ef 16       	cp	r14, r31
     f94:	f1 04       	cpc	r15, r1
     f96:	71 f4       	brne	.+28     	; 0xfb4 <_Z4movxii+0x288>
			velocity_robot[0] = -abs(velocity_robot[0]);
     f98:	e7 ea       	ldi	r30, 0xA7	; 167
     f9a:	f3 e0       	ldi	r31, 0x03	; 3
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	99 23       	and	r25, r25
     fa2:	1c f4       	brge	.+6      	; 0xfaa <_Z4movxii+0x27e>
     fa4:	91 95       	neg	r25
     fa6:	81 95       	neg	r24
     fa8:	91 09       	sbc	r25, r1
     faa:	91 95       	neg	r25
     fac:	81 95       	neg	r24
     fae:	91 09       	sbc	r25, r1
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
		}
	
	}
	velocity_robot[1] = 0;
     fb4:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <velocity_robot+0x3>
     fb8:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <velocity_robot+0x2>
	//velocity_robot[2] = 0;
	calculateCompassPID();
     fbc:	ea da       	rcall	.-2604   	; 0x592 <_Z19calculateCompassPIDv>
}
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	7f 90       	pop	r7
     fd8:	6f 90       	pop	r6
     fda:	5f 90       	pop	r5
     fdc:	4f 90       	pop	r4
     fde:	08 95       	ret

00000fe0 <_Z4movyii>:

void movy(int distance_setpoint, int direction){
     fe0:	4f 92       	push	r4
     fe2:	5f 92       	push	r5
     fe4:	6f 92       	push	r6
     fe6:	7f 92       	push	r7
     fe8:	8f 92       	push	r8
     fea:	9f 92       	push	r9
     fec:	af 92       	push	r10
     fee:	bf 92       	push	r11
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	6c 01       	movw	r12, r24
    1002:	7b 01       	movw	r14, r22
	//compass.setPid(2.1,0.04,32);
	distanceY = abs(encoderY.getdistance());
    1004:	84 eb       	ldi	r24, 0xB4	; 180
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	ca d8       	rcall	.-3692   	; 0x19e <_ZN7encoder11getdistanceEv>
    100a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
    100e:	9b 01       	movw	r18, r22
    1010:	77 23       	and	r23, r23
    1012:	24 f4       	brge	.+8      	; 0x101c <_Z4movyii+0x3c>
    1014:	22 27       	eor	r18, r18
    1016:	33 27       	eor	r19, r19
    1018:	26 1b       	sub	r18, r22
    101a:	37 0b       	sbc	r19, r23
    101c:	e9 01       	movw	r28, r18
    101e:	30 93 a4 03 	sts	0x03A4, r19	; 0x8003a4 <distanceY+0x1>
    1022:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <distanceY>
	driveY.SETPOINT = distance_setpoint;
    1026:	d0 92 e9 02 	sts	0x02E9, r13	; 0x8002e9 <driveY+0xf>
    102a:	c0 92 e8 02 	sts	0x02E8, r12	; 0x8002e8 <driveY+0xe>
	if(PidUpdateFlagDriveY)
    102e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <PidUpdateFlagDriveY>
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <_Z4movyii+0x58>
    1036:	22 c1       	rjmp	.+580    	; 0x127c <_Z4movyii+0x29c>
	{
			PidUpdateFlagDriveY = false;
    1038:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <PidUpdateFlagDriveY>
			if(distanceY >= 200)
    103c:	28 3c       	cpi	r18, 0xC8	; 200
    103e:	31 05       	cpc	r19, r1
    1040:	0c f4       	brge	.+2      	; 0x1044 <_Z4movyii+0x64>
    1042:	df c0       	rjmp	.+446    	; 0x1202 <_Z4movyii+0x222>
			{
				driveY.input = distanceY;
    1044:	0a ed       	ldi	r16, 0xDA	; 218
    1046:	12 e0       	ldi	r17, 0x02	; 2
    1048:	f8 01       	movw	r30, r16
    104a:	31 83       	std	Z+1, r19	; 0x01
    104c:	20 83       	st	Z, r18
				driveY.error = driveY.SETPOINT - driveY.input;
    104e:	c2 1a       	sub	r12, r18
    1050:	d3 0a       	sbc	r13, r19
    1052:	d3 82       	std	Z+3, r13	; 0x03
    1054:	c2 82       	std	Z+2, r12	; 0x02
				driveY.Iterm += driveY.ki * driveY.error;
    1056:	b6 01       	movw	r22, r12
    1058:	0d 2c       	mov	r0, r13
    105a:	00 0c       	add	r0, r0
    105c:	88 0b       	sbc	r24, r24
    105e:	99 0b       	sbc	r25, r25
    1060:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
    1064:	2b 01       	movw	r4, r22
    1066:	3c 01       	movw	r6, r24
    1068:	f8 01       	movw	r30, r16
    106a:	21 8d       	ldd	r18, Z+25	; 0x19
    106c:	32 8d       	ldd	r19, Z+26	; 0x1a
    106e:	43 8d       	ldd	r20, Z+27	; 0x1b
    1070:	54 8d       	ldd	r21, Z+28	; 0x1c
    1072:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1076:	f8 01       	movw	r30, r16
    1078:	22 85       	ldd	r18, Z+10	; 0x0a
    107a:	33 85       	ldd	r19, Z+11	; 0x0b
    107c:	44 85       	ldd	r20, Z+12	; 0x0c
    107e:	55 85       	ldd	r21, Z+13	; 0x0d
    1080:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
    1084:	4b 01       	movw	r8, r22
    1086:	5c 01       	movw	r10, r24
    1088:	f8 01       	movw	r30, r16
    108a:	62 87       	std	Z+10, r22	; 0x0a
    108c:	73 87       	std	Z+11, r23	; 0x0b
    108e:	84 87       	std	Z+12, r24	; 0x0c
    1090:	95 87       	std	Z+13, r25	; 0x0d
				if(driveY.FirstData){
    1092:	80 89       	ldd	r24, Z+16	; 0x10
    1094:	88 23       	and	r24, r24
    1096:	19 f0       	breq	.+6      	; 0x109e <_Z4movyii+0xbe>
					driveY.prevInput = driveY.input;
    1098:	d5 83       	std	Z+5, r29	; 0x05
    109a:	c4 83       	std	Z+4, r28	; 0x04
					driveY.FirstData = false;
    109c:	10 8a       	std	Z+16, r1	; 0x10
				}
				if(abs(driveY.Iterm) > 10){
    109e:	c5 01       	movw	r24, r10
    10a0:	b4 01       	movw	r22, r8
    10a2:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
    10a6:	9b 01       	movw	r18, r22
    10a8:	77 23       	and	r23, r23
    10aa:	24 f4       	brge	.+8      	; 0x10b4 <_Z4movyii+0xd4>
    10ac:	22 27       	eor	r18, r18
    10ae:	33 27       	eor	r19, r19
    10b0:	26 1b       	sub	r18, r22
    10b2:	37 0b       	sbc	r19, r23
    10b4:	2b 30       	cpi	r18, 0x0B	; 11
    10b6:	31 05       	cpc	r19, r1
    10b8:	5c f1       	brlt	.+86     	; 0x1110 <_Z4movyii+0x130>
					if(driveY.Iterm > 0)	driveY.Iterm = 10;
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	c5 01       	movw	r24, r10
    10c2:	b4 01       	movw	r22, r8
    10c4:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <__gesf2>
    10c8:	18 16       	cp	r1, r24
    10ca:	6c f4       	brge	.+26     	; 0x10e6 <_Z4movyii+0x106>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a0 e2       	ldi	r26, 0x20	; 32
    10d2:	b1 e4       	ldi	r27, 0x41	; 65
    10d4:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <driveY+0xa>
    10d8:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <driveY+0xb>
    10dc:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <driveY+0xc>
    10e0:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <driveY+0xd>
    10e4:	15 c0       	rjmp	.+42     	; 0x1110 <_Z4movyii+0x130>
					if(driveY.Iterm < 0)	driveY.Iterm = -10;
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	a9 01       	movw	r20, r18
    10ec:	c5 01       	movw	r24, r10
    10ee:	b4 01       	movw	r22, r8
    10f0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__cmpsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	64 f4       	brge	.+24     	; 0x1110 <_Z4movyii+0x130>
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a0 e2       	ldi	r26, 0x20	; 32
    10fe:	b1 ec       	ldi	r27, 0xC1	; 193
    1100:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <driveY+0xa>
    1104:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <driveY+0xb>
    1108:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <driveY+0xc>
    110c:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <driveY+0xd>
				}
				if(driveY.error > 0){
    1110:	1c 14       	cp	r1, r12
    1112:	1d 04       	cpc	r1, r13
    1114:	9c f5       	brge	.+102    	; 0x117c <_Z4movyii+0x19c>
					driveY.output = driveY.kp * driveY.error + driveY.Iterm - driveY.kd*(driveY.input - driveY.prevInput);
    1116:	0a ed       	ldi	r16, 0xDA	; 218
    1118:	12 e0       	ldi	r17, 0x02	; 2
    111a:	f8 01       	movw	r30, r16
    111c:	25 89       	ldd	r18, Z+21	; 0x15
    111e:	36 89       	ldd	r19, Z+22	; 0x16
    1120:	47 89       	ldd	r20, Z+23	; 0x17
    1122:	50 8d       	ldd	r21, Z+24	; 0x18
    1124:	c3 01       	movw	r24, r6
    1126:	b2 01       	movw	r22, r4
    1128:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    112c:	f8 01       	movw	r30, r16
    112e:	22 85       	ldd	r18, Z+10	; 0x0a
    1130:	33 85       	ldd	r19, Z+11	; 0x0b
    1132:	44 85       	ldd	r20, Z+12	; 0x0c
    1134:	55 85       	ldd	r21, Z+13	; 0x0d
    1136:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
    113a:	4b 01       	movw	r8, r22
    113c:	5c 01       	movw	r10, r24
    113e:	f8 01       	movw	r30, r16
    1140:	84 81       	ldd	r24, Z+4	; 0x04
    1142:	95 81       	ldd	r25, Z+5	; 0x05
    1144:	be 01       	movw	r22, r28
    1146:	68 1b       	sub	r22, r24
    1148:	79 0b       	sbc	r23, r25
    114a:	07 2e       	mov	r0, r23
    114c:	00 0c       	add	r0, r0
    114e:	88 0b       	sbc	r24, r24
    1150:	99 0b       	sbc	r25, r25
    1152:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
    1156:	f8 01       	movw	r30, r16
    1158:	25 8d       	ldd	r18, Z+29	; 0x1d
    115a:	36 8d       	ldd	r19, Z+30	; 0x1e
    115c:	47 8d       	ldd	r20, Z+31	; 0x1f
    115e:	50 a1       	ldd	r21, Z+32	; 0x20
    1160:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    1164:	9b 01       	movw	r18, r22
    1166:	ac 01       	movw	r20, r24
    1168:	c5 01       	movw	r24, r10
    116a:	b4 01       	movw	r22, r8
    116c:	0e 94 1e 14 	call	0x283c	; 0x283c <__subsf3>
    1170:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
    1174:	f8 01       	movw	r30, r16
    1176:	77 83       	std	Z+7, r23	; 0x07
    1178:	66 83       	std	Z+6, r22	; 0x06
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <_Z4movyii+0x1a4>
				}
				else{
					driveY.output = 0;
    117c:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <driveY+0x7>
    1180:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <driveY+0x6>
				}
				driveY.prevInput = driveY.input;
    1184:	ea ed       	ldi	r30, 0xDA	; 218
    1186:	f2 e0       	ldi	r31, 0x02	; 2
    1188:	d5 83       	std	Z+5, r29	; 0x05
    118a:	c4 83       	std	Z+4, r28	; 0x04
				////////////////////////////////////////////////////////////
				if(abs(driveY.output) >= 100){
    118c:	86 81       	ldd	r24, Z+6	; 0x06
    118e:	97 81       	ldd	r25, Z+7	; 0x07
    1190:	9c 01       	movw	r18, r24
    1192:	99 23       	and	r25, r25
    1194:	24 f4       	brge	.+8      	; 0x119e <_Z4movyii+0x1be>
    1196:	22 27       	eor	r18, r18
    1198:	33 27       	eor	r19, r19
    119a:	28 1b       	sub	r18, r24
    119c:	39 0b       	sbc	r19, r25
    119e:	24 36       	cpi	r18, 0x64	; 100
    11a0:	31 05       	cpc	r19, r1
    11a2:	8c f0       	brlt	.+34     	; 0x11c6 <_Z4movyii+0x1e6>
					if(driveY.output >100)	driveY.output = 100;
    11a4:	85 36       	cpi	r24, 0x65	; 101
    11a6:	91 05       	cpc	r25, r1
    11a8:	3c f0       	brlt	.+14     	; 0x11b8 <_Z4movyii+0x1d8>
    11aa:	84 e6       	ldi	r24, 0x64	; 100
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <driveY+0x7>
    11b2:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <driveY+0x6>
    11b6:	1c c0       	rjmp	.+56     	; 0x11f0 <_Z4movyii+0x210>
					else						driveY.output = -100;
    11b8:	8c e9       	ldi	r24, 0x9C	; 156
    11ba:	9f ef       	ldi	r25, 0xFF	; 255
    11bc:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <driveY+0x7>
    11c0:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <driveY+0x6>
    11c4:	15 c0       	rjmp	.+42     	; 0x11f0 <_Z4movyii+0x210>
				}
 				if(abs(driveY.output) < 20){
    11c6:	9c 01       	movw	r18, r24
    11c8:	2d 5e       	subi	r18, 0xED	; 237
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	27 32       	cpi	r18, 0x27	; 39
    11ce:	31 05       	cpc	r19, r1
    11d0:	78 f4       	brcc	.+30     	; 0x11f0 <_Z4movyii+0x210>
 					if(driveY.output >= 0)	driveY.output = 20;
    11d2:	99 23       	and	r25, r25
    11d4:	3c f0       	brlt	.+14     	; 0x11e4 <_Z4movyii+0x204>
    11d6:	84 e1       	ldi	r24, 0x14	; 20
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <driveY+0x7>
    11de:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <driveY+0x6>
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <_Z4movyii+0x210>
 					else					driveY.output = -20;
    11e4:	8c ee       	ldi	r24, 0xEC	; 236
    11e6:	9f ef       	ldi	r25, 0xFF	; 255
    11e8:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <driveY+0x7>
    11ec:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <driveY+0x6>
 				}
				/////////////////////////////////////////////////////////
				velocity_robot[1] = driveY.output;
    11f0:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <driveY+0x6>
    11f4:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <driveY+0x7>
    11f8:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <velocity_robot+0x3>
    11fc:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <velocity_robot+0x2>
    1200:	18 c0       	rjmp	.+48     	; 0x1232 <_Z4movyii+0x252>
			}
			else
			{
				//uart0_puts("ramp up\t");
				velocity_robot[1] = 40 + (distanceY*0.3);
    1202:	b9 01       	movw	r22, r18
    1204:	33 0f       	add	r19, r19
    1206:	88 0b       	sbc	r24, r24
    1208:	99 0b       	sbc	r25, r25
    120a:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__floatsisf>
    120e:	2a e9       	ldi	r18, 0x9A	; 154
    1210:	39 e9       	ldi	r19, 0x99	; 153
    1212:	49 e9       	ldi	r20, 0x99	; 153
    1214:	5e e3       	ldi	r21, 0x3E	; 62
    1216:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulsf3>
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e2       	ldi	r20, 0x20	; 32
    1220:	52 e4       	ldi	r21, 0x42	; 66
    1222:	0e 94 1f 14 	call	0x283e	; 0x283e <__addsf3>
    1226:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
    122a:	70 93 aa 03 	sts	0x03AA, r23	; 0x8003aa <velocity_robot+0x3>
    122e:	60 93 a9 03 	sts	0x03A9, r22	; 0x8003a9 <velocity_robot+0x2>
				//uart0_putint(velocity_robot[1]);
				//uart0_puts("\r\n");
			}
			if(direction == Front){
    1232:	f2 e0       	ldi	r31, 0x02	; 2
    1234:	ef 16       	cp	r14, r31
    1236:	f1 04       	cpc	r15, r1
    1238:	41 f4       	brne	.+16     	; 0x124a <_Z4movyii+0x26a>
				movingyfront = true;
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <movingyfront>
				movingyback = false;
    1240:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
				movingx = false;
    1244:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <movingx>
    1248:	19 c0       	rjmp	.+50     	; 0x127c <_Z4movyii+0x29c>
				velocity_robot[1] = velocity_robot[1];
			}
			else if(direction == Back){
    124a:	83 e0       	ldi	r24, 0x03	; 3
    124c:	e8 16       	cp	r14, r24
    124e:	f1 04       	cpc	r15, r1
    1250:	a9 f4       	brne	.+42     	; 0x127c <_Z4movyii+0x29c>
				movingyback = true;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <movingyback>
				movingyfront = false;
    1258:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <movingyfront>
				movingx = false;
    125c:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <movingx>
				velocity_robot[1] = -abs(velocity_robot[1]);
    1260:	e7 ea       	ldi	r30, 0xA7	; 167
    1262:	f3 e0       	ldi	r31, 0x03	; 3
    1264:	82 81       	ldd	r24, Z+2	; 0x02
    1266:	93 81       	ldd	r25, Z+3	; 0x03
    1268:	99 23       	and	r25, r25
    126a:	1c f4       	brge	.+6      	; 0x1272 <_Z4movyii+0x292>
    126c:	91 95       	neg	r25
    126e:	81 95       	neg	r24
    1270:	91 09       	sbc	r25, r1
    1272:	91 95       	neg	r25
    1274:	81 95       	neg	r24
    1276:	91 09       	sbc	r25, r1
    1278:	93 83       	std	Z+3, r25	; 0x03
			}
		
	}
	//velocity_robot[0] = 0;
	calculateLineTrackerYPid();
    127a:	82 83       	std	Z+2, r24	; 0x02
	//velocity_robot[2] = 0;
	calculateCompassPID();
    127c:	de db       	rcall	.-2116   	; 0xa3a <_Z24calculateLineTrackerYPidv>
    127e:	89 d9       	rcall	.-3310   	; 0x592 <_Z19calculateCompassPIDv>
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	bf 90       	pop	r11
    1292:	af 90       	pop	r10
    1294:	9f 90       	pop	r9
    1296:	8f 90       	pop	r8
    1298:	7f 90       	pop	r7
    129a:	6f 90       	pop	r6
    129c:	5f 90       	pop	r5
    129e:	4f 90       	pop	r4
    12a0:	08 95       	ret

000012a2 <_Z15movYForwardSlowv>:

void movYForwardSlow(){
	movingx = false;
    12a2:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <movingx>
	movingyfront = true;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <movingyfront>
	movingyback = false;
    12ac:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    12b0:	ec e1       	ldi	r30, 0x1C	; 28
    12b2:	f3 e0       	ldi	r31, 0x03	; 3
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a0 e0       	ldi	r26, 0x00	; 0
    12ba:	b0 e4       	ldi	r27, 0x40	; 64
    12bc:	85 8b       	std	Z+21, r24	; 0x15
    12be:	96 8b       	std	Z+22, r25	; 0x16
    12c0:	a7 8b       	std	Z+23, r26	; 0x17
    12c2:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    12c4:	11 8e       	std	Z+25, r1	; 0x19
    12c6:	12 8e       	std	Z+26, r1	; 0x1a
    12c8:	13 8e       	std	Z+27, r1	; 0x1b
    12ca:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a8 ef       	ldi	r26, 0xF8	; 248
    12d2:	b1 e4       	ldi	r27, 0x41	; 65
    12d4:	85 8f       	std	Z+29, r24	; 0x1d
    12d6:	96 8f       	std	Z+30, r25	; 0x1e
    12d8:	a7 8f       	std	Z+31, r26	; 0x1f
    12da:	b0 a3       	std	Z+32, r27	; 0x20
void movYForwardSlow(){
	movingx = false;
	movingyfront = true;
	movingyback = false;
	compass.setPid(2,0,31);
	velocity_robot[1] = 30;
    12dc:	8e e1       	ldi	r24, 0x1E	; 30
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <velocity_robot+0x3>
    12e4:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <velocity_robot+0x2>
	calculateLineTrackerYPid();
    12e8:	a8 db       	rcall	.-2224   	; 0xa3a <_Z24calculateLineTrackerYPidv>
	calculateCompassPID();
    12ea:	53 c9       	rjmp	.-3418   	; 0x592 <_Z19calculateCompassPIDv>
    12ec:	08 95       	ret

000012ee <_Z12holdpositionv>:
    12ee:	e7 ea       	ldi	r30, 0xA7	; 167
}

void holdposition(){
	velocity_robot[0]  = 0;
    12f0:	f3 e0       	ldi	r31, 0x03	; 3
    12f2:	11 82       	std	Z+1, r1	; 0x01
    12f4:	10 82       	st	Z, r1
	velocity_robot[1] = 0;
    12f6:	13 82       	std	Z+3, r1	; 0x03
    12f8:	12 82       	std	Z+2, r1	; 0x02
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    12fa:	ec e1       	ldi	r30, 0x1C	; 28
    12fc:	f3 e0       	ldi	r31, 0x03	; 3
    12fe:	86 e6       	ldi	r24, 0x66	; 102
    1300:	96 e6       	ldi	r25, 0x66	; 102
    1302:	a6 e8       	ldi	r26, 0x86	; 134
    1304:	b0 e4       	ldi	r27, 0x40	; 64
    1306:	85 8b       	std	Z+21, r24	; 0x15
    1308:	96 8b       	std	Z+22, r25	; 0x16
    130a:	a7 8b       	std	Z+23, r26	; 0x17
    130c:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    130e:	8f e8       	ldi	r24, 0x8F	; 143
    1310:	92 ec       	ldi	r25, 0xC2	; 194
    1312:	a5 e7       	ldi	r26, 0x75	; 117
    1314:	be e3       	ldi	r27, 0x3E	; 62
    1316:	81 8f       	std	Z+25, r24	; 0x19
    1318:	92 8f       	std	Z+26, r25	; 0x1a
    131a:	a3 8f       	std	Z+27, r26	; 0x1b
    131c:	b4 8f       	std	Z+28, r27	; 0x1c
		kd = d;
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a0 e0       	ldi	r26, 0x00	; 0
    1324:	b2 e4       	ldi	r27, 0x42	; 66
    1326:	85 8f       	std	Z+29, r24	; 0x1d
    1328:	96 8f       	std	Z+30, r25	; 0x1e
    132a:	a7 8f       	std	Z+31, r26	; 0x1f
    132c:	b0 a3       	std	Z+32, r27	; 0x20
void holdposition(){
	velocity_robot[0]  = 0;
	velocity_robot[1] = 0;
	//velocity_robot[2] = 0;
	compass.setPid(4.2,0.24,32);	//5.1,0,31
	calculateCompassPID();
    132e:	31 c9       	rjmp	.-3486   	; 0x592 <_Z19calculateCompassPIDv>
    1330:	08 95       	ret

00001332 <_Z14updateZoneflagv>:
//  		else        uart0_puts("0 \n");


}

void updateZoneflag(void){
    1332:	cf 93       	push	r28
	//uart0_puts("update \r\n");
	/*if low on shuttlecock pin then shuttlecock received
	i.e if manual robot arm is extended to give shuttlecock*/
	if(!ShuttleCockGiven){
    1334:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <ShuttleCockGiven>
    1338:	81 11       	cpse	r24, r1
    133a:	8c c0       	rjmp	.+280    	; 0x1454 <_Z14updateZoneflagv+0x122>
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL4)) &&  where == inLZ1 ){
    133c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1340:	84 fd       	sbrc	r24, 4
    1342:	50 c0       	rjmp	.+160    	; 0x13e4 <_Z14updateZoneflagv+0xb2>
    1344:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1348:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    134c:	05 97       	sbiw	r24, 0x05	; 5
    134e:	09 f0       	breq	.+2      	; 0x1352 <_Z14updateZoneflagv+0x20>
    1350:	49 c0       	rjmp	.+146    	; 0x13e4 <_Z14updateZoneflagv+0xb2>
    1352:	3b c0       	rjmp	.+118    	; 0x13ca <_Z14updateZoneflagv+0x98>
			GoThrowingZone1 = true;
			task3 = task4 = false;
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    1354:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1358:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    135c:	06 97       	sbiw	r24, 0x06	; 6
    135e:	f9 f4       	brne	.+62     	; 0x139e <_Z14updateZoneflagv+0x6c>
    1360:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ManualInFrontOfLZ2>
    1364:	81 11       	cpse	r24, r1
    1366:	43 c0       	rjmp	.+134    	; 0x13ee <_Z14updateZoneflagv+0xbc>
    1368:	1a c0       	rjmp	.+52     	; 0x139e <_Z14updateZoneflagv+0x6c>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL4)) &&  (where == inLZ1 || where == inLZ2) ){
    136a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    136e:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1372:	05 97       	sbiw	r24, 0x05	; 5
    1374:	31 f0       	breq	.+12     	; 0x1382 <_Z14updateZoneflagv+0x50>
    1376:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    137a:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    137e:	06 97       	sbiw	r24, 0x06	; 6
    1380:	31 f4       	brne	.+12     	; 0x138e <_Z14updateZoneflagv+0x5c>
		//uart0_puts("Shuttlecock arm gone \r\n");
		ShuttleCockArmGone = true;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ShuttleCockArmGone>
		uart3_putc('w');
    1388:	87 e7       	ldi	r24, 0x77	; 119
    138a:	0e 94 09 14 	call	0x2812	; 0x2812 <_Z10uart3_putch>
	}
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
    138e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <ShuttleCockGiven>
    1392:	88 23       	and	r24, r24
    1394:	21 f0       	breq	.+8      	; 0x139e <_Z14updateZoneflagv+0x6c>
    1396:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <GoldenRackGiven>
    139a:	81 11       	cpse	r24, r1
    139c:	60 c0       	rjmp	.+192    	; 0x145e <_Z14updateZoneflagv+0x12c>
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
    139e:	7d 9b       	sbis	0x0f, 5	; 15
    13a0:	52 c0       	rjmp	.+164    	; 0x1446 <_Z14updateZoneflagv+0x114>
    13a2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    13a6:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    13aa:	06 97       	sbiw	r24, 0x06	; 6
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <_Z14updateZoneflagv+0x7e>
    13ae:	4b c0       	rjmp	.+150    	; 0x1446 <_Z14updateZoneflagv+0x114>
    13b0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ManualInFrontOfLZ2>
    13b4:	81 11       	cpse	r24, r1
    13b6:	47 c0       	rjmp	.+142    	; 0x1446 <_Z14updateZoneflagv+0x114>
    13b8:	2f c0       	rjmp	.+94     	; 0x1418 <_Z14updateZoneflagv+0xe6>
			GoThrowingZone2 = false;
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
			//uart0_puts("none \r\n");
			GoldenRackGiven = false;
    13ba:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <GoldenRackGiven>
			GoThrowingZone2 = true;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <GoThrowingZone2>
			GoThrowingZone3 = false;
    13c4:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <GoThrowingZone3>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    13c8:	4a c0       	rjmp	.+148    	; 0x145e <_Z14updateZoneflagv+0x12c>
	if(!ShuttleCockGiven){
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL4)) &&  where == inLZ1 ){
			//uart0_puts("Shuttlecock given in LZ1\r\n");
			//'w' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    13ca:	8f e6       	ldi	r24, 0x6F	; 111
    13cc:	0e 94 09 14 	call	0x2812	; 0x2812 <_Z10uart3_putch>
			ShuttleCockGiven = true;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = true;
    13d6:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <GoThrowingZone1>
			task3 = task4 = false;
    13da:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <task4>
    13de:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <task3>
    13e2:	38 c0       	rjmp	.+112    	; 0x1454 <_Z14updateZoneflagv+0x122>
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    13e4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    13e8:	84 ff       	sbrs	r24, 4
    13ea:	b4 cf       	rjmp	.-152    	; 0x1354 <_Z14updateZoneflagv+0x22>
    13ec:	d8 cf       	rjmp	.-80     	; 0x139e <_Z14updateZoneflagv+0x6c>
			//uart0_puts("Shuttlecock given in loading zone 2\r\nManual robot ahead \r\n");
			//'o' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    13ee:	8f e6       	ldi	r24, 0x6F	; 111
    13f0:	0e 94 09 14 	call	0x2812	; 0x2812 <_Z10uart3_putch>
			ShuttleCockGiven = true;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = false;
    13fa:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <GoThrowingZone1>
			GoThrowingZone2 = true;
    13fe:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <GoThrowingZone2>
			task3 = task4 = task5 = true;
    1402:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <task5>
    1406:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <task4>
    140a:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <task3>
			task6 = task7 = false;
    140e:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <task7>
    1412:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <task6>
    1416:	1e c0       	rjmp	.+60     	; 0x1454 <_Z14updateZoneflagv+0x122>
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
			//'f' is sent to throwing mechanism to tell to throwing zone 3 from golden rack
			task6 = task7 = true;
    1418:	c1 e0       	ldi	r28, 0x01	; 1
    141a:	c0 93 c7 02 	sts	0x02C7, r28	; 0x8002c7 <task7>
    141e:	c0 93 c8 02 	sts	0x02C8, r28	; 0x8002c8 <task6>
			task8 = task9 = false;
    1422:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <task9>
    1426:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <task8>
			//uart0_puts("going throwing zone 3\r\n");
			uart3_putc('j');
    142a:	8a e6       	ldi	r24, 0x6A	; 106
    142c:	0e 94 09 14 	call	0x2812	; 0x2812 <_Z10uart3_putch>
			GoldenRackGiven = true;
    1430:	c0 93 d8 02 	sts	0x02D8, r28	; 0x8002d8 <GoldenRackGiven>
			ShuttleCockArmGone = true;
    1434:	c0 93 d7 02 	sts	0x02D7, r28	; 0x8002d7 <ShuttleCockArmGone>
			ShuttleCockGiven = true;
    1438:	c0 93 d9 02 	sts	0x02D9, r28	; 0x8002d9 <ShuttleCockGiven>
			GoThrowingZone3 = true;
    143c:	c0 93 d3 02 	sts	0x02D3, r28	; 0x8002d3 <GoThrowingZone3>
			GoThrowingZone2 = false;
    1440:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <GoThrowingZone2>
    1444:	0c c0       	rjmp	.+24     	; 0x145e <_Z14updateZoneflagv+0x12c>
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
    1446:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    144a:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    144e:	06 97       	sbiw	r24, 0x06	; 6
    1450:	31 f4       	brne	.+12     	; 0x145e <_Z14updateZoneflagv+0x12c>
    1452:	b3 cf       	rjmp	.-154    	; 0x13ba <_Z14updateZoneflagv+0x88>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL4)) &&  (where == inLZ1 || where == inLZ2) ){
    1454:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1458:	84 fd       	sbrc	r24, 4
    145a:	87 cf       	rjmp	.-242    	; 0x136a <_Z14updateZoneflagv+0x38>
    145c:	9c cf       	rjmp	.-200    	; 0x1396 <_Z14updateZoneflagv+0x64>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    145e:	cf 91       	pop	r28
    1460:	08 95       	ret

00001462 <_Z18gorockthegamefieldv>:
// 			if(task5){uart0_puts("5");}
// 			if(task6){uart0_puts("6");}
// 				if(task7){uart0_puts("7");}
// 				if(task8){uart0_puts("8");}

	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
    1462:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1466:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    146a:	05 97       	sbiw	r24, 0x05	; 5
    146c:	39 f0       	breq	.+14     	; 0x147c <_Z18gorockthegamefieldv+0x1a>
    146e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1472:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1476:	06 97       	sbiw	r24, 0x06	; 6
    1478:	09 f0       	breq	.+2      	; 0x147c <_Z18gorockthegamefieldv+0x1a>
    147a:	50 c0       	rjmp	.+160    	; 0x151c <_Z18gorockthegamefieldv+0xba>
    147c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1480:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1484:	08 97       	sbiw	r24, 0x08	; 8
    1486:	09 f0       	breq	.+2      	; 0x148a <_Z18gorockthegamefieldv+0x28>
    1488:	49 c0       	rjmp	.+146    	; 0x151c <_Z18gorockthegamefieldv+0xba>
    148a:	59 c3       	rjmp	.+1714   	; 0x1b3e <_Z18gorockthegamefieldv+0x6dc>
		
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    148c:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <task5>
    1490:	81 11       	cpse	r24, r1
    1492:	1f c0       	rjmp	.+62     	; 0x14d2 <_Z18gorockthegamefieldv+0x70>
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN))){
    1494:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1498:	86 ff       	sbrs	r24, 6
    149a:	12 c0       	rjmp	.+36     	; 0x14c0 <_Z18gorockthegamefieldv+0x5e>
				/*go directly to loading zone 2 and manual robot is waiting there*/
				where = inLZ1;
    149c:	85 e0       	ldi	r24, 0x05	; 5
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    14a4:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
				gotoLZ2 = true;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <gotoLZ2>
				FlagChangeSetpointCompass = false;
    14ae:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <FlagChangeSetpointCompass>
				FlagInitialAngleSetpoint = false;
    14b2:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <FlagInitialAngleSetpoint>
				ShuttleCockGiven = true;	
    14b6:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <ShuttleCockGiven>
				ShuttleCockArmGone = true;
    14ba:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ShuttleCockArmGone>
    14be:	2e c0       	rjmp	.+92     	; 0x151c <_Z18gorockthegamefieldv+0xba>
			
			/*if there is manual robot infront of automatic robot*/
			
			else{
				/*if there is manual robot ahead of automatic robot then goto throwing zone1*/
				GoThrowingZone1 = true;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <GoThrowingZone1>
				task3 = task4 = false;
    14c6:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <task4>
    14ca:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <task3>
				updateZoneflag();
    14ce:	31 df       	rcall	.-414    	; 0x1332 <_Z14updateZoneflagv>
    14d0:	25 c0       	rjmp	.+74     	; 0x151c <_Z18gorockthegamefieldv+0xba>
				//holdposition();
			}	
		}
		else if(task6 && task7 ){
    14d2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task6>
    14d6:	88 23       	and	r24, r24
    14d8:	f9 f0       	breq	.+62     	; 0x1518 <_Z18gorockthegamefieldv+0xb6>
    14da:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task7>
    14de:	88 23       	and	r24, r24
    14e0:	d9 f0       	breq	.+54     	; 0x1518 <_Z18gorockthegamefieldv+0xb6>
			if((ZONE_STATUSPORT & (1<< ZONE_STATUSPIN))){
    14e2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    14e6:	86 ff       	sbrs	r24, 6
    14e8:	0b c0       	rjmp	.+22     	; 0x1500 <_Z18gorockthegamefieldv+0x9e>
				where = inLZ2;
    14ea:	86 e0       	ldi	r24, 0x06	; 6
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    14f2:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
				ManualInFrontOfLZ2 = false;
    14f6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <ManualInFrontOfLZ2>
				updateZoneflag();
				holdposition();
    14fa:	1b df       	rcall	.-458    	; 0x1332 <_Z14updateZoneflagv>
    14fc:	f8 de       	rcall	.-528    	; 0x12ee <_Z12holdpositionv>
    14fe:	0e c0       	rjmp	.+28     	; 0x151c <_Z18gorockthegamefieldv+0xba>
			}
			else if (ManualInFrontOfLZ2){
    1500:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ManualInFrontOfLZ2>
    1504:	88 23       	and	r24, r24
    1506:	29 f0       	breq	.+10     	; 0x1512 <_Z18gorockthegamefieldv+0xb0>
				task6 = task7 = false;
    1508:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <task7>
    150c:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <task6>
			}
			else{
				updateZoneflag();
				holdposition();
    1510:	05 c0       	rjmp	.+10     	; 0x151c <_Z18gorockthegamefieldv+0xba>
    1512:	0f df       	rcall	.-482    	; 0x1332 <_Z14updateZoneflagv>
    1514:	ec de       	rcall	.-552    	; 0x12ee <_Z12holdpositionv>
			}
		}
		
		/*if the robot is in loading zone 1 or loading zone 2  otherwise */
		else{
			updateZoneflag();
    1516:	02 c0       	rjmp	.+4      	; 0x151c <_Z18gorockthegamefieldv+0xba>
    1518:	0c df       	rcall	.-488    	; 0x1332 <_Z14updateZoneflagv>
			holdposition();
    151a:	e9 de       	rcall	.-558    	; 0x12ee <_Z12holdpositionv>
    151c:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <task1>
		}
	}
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point){	
    1520:	81 11       	cpse	r24, r1
    1522:	14 c0       	rjmp	.+40     	; 0x154c <_Z18gorockthegamefieldv+0xea>
    1524:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1528:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    152c:	89 2b       	or	r24, r25
    152e:	09 f4       	brne	.+2      	; 0x1532 <_Z18gorockthegamefieldv+0xd0>
    1530:	0b c3       	rjmp	.+1558   	; 0x1b48 <_Z18gorockthegamefieldv+0x6e6>
    1532:	55 c0       	rjmp	.+170    	; 0x15de <_Z18gorockthegamefieldv+0x17c>
    1534:	78 94       	sei
	totalLine = 0;
	return linetracker_data;
}

inline void linetrackerXjunctionWatch(void){
	sei();
    1536:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE0);
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	81 60       	ori	r24, 0x01	; 1
    153e:	80 83       	st	Z, r24
    1540:	eb e6       	ldi	r30, 0x6B	; 107
	PCMSK0 |= (1<<PCINT4);
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	80 61       	ori	r24, 0x10	; 16
    1548:	80 83       	st	Z, r24
    154a:	49 c0       	rjmp	.+146    	; 0x15de <_Z18gorockthegamefieldv+0x17c>
    154c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <task2>
		}
		//uart0_puts("\r\n");
	}
	
	///move from corner to loading zone1 if task1 is completed and task2 not completed
	else if(task1 && !task2){	
    1550:	81 11       	cpse	r24, r1
    1552:	1e c0       	rjmp	.+60     	; 0x1590 <_Z18gorockthegamefieldv+0x12e>
    1554:	81 e0       	ldi	r24, 0x01	; 1
		where = inFirstloadingCorner;
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    155c:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
    1560:	87 e0       	ldi	r24, 0x07	; 7
		//uart0_puts("moving aheead \r\n");
		robotState = moving;
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1568:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    156c:	eb e6       	ldi	r30, 0x6B	; 107
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT16);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 7e       	andi	r24, 0xEF	; 239
    1574:	80 83       	st	Z, r24
    1576:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    1578:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	84 60       	ori	r24, 0x04	; 4
    1580:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT16);
    1582:	ed e6       	ldi	r30, 0x6D	; 109
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	81 60       	ori	r24, 0x01	; 1
    158a:	80 83       	st	Z, r24
		linetrackerXjunctionWatchOff();
		linetrackerYjunctionWatch();
		movYForwardSlow();
    158c:	8a de       	rcall	.-748    	; 0x12a2 <_Z15movYForwardSlowv>
    158e:	27 c0       	rjmp	.+78     	; 0x15de <_Z18gorockthegamefieldv+0x17c>
    1590:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
	}
	/*if task2 is completed and robot just reached loading zone 1*/
	else if(task1 && task2 && where == inFirstloadingCorner && (robotState == moving)){
    1594:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	09 f5       	brne	.+66     	; 0x15de <_Z18gorockthegamefieldv+0x17c>
    159c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    15a0:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    15a4:	07 97       	sbiw	r24, 0x07	; 7
    15a6:	d9 f4       	brne	.+54     	; 0x15de <_Z18gorockthegamefieldv+0x17c>
    15a8:	85 e0       	ldi	r24, 0x05	; 5
		where = inLZ1;
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    15b0:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
    15b4:	88 e0       	ldi	r24, 0x08	; 8
		//uart0_puts("in loading zone 1\r\n");
		robotState = notmoving;
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    15bc:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    15c0:	ed e6       	ldi	r30, 0x6D	; 109
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT16);
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8e 7f       	andi	r24, 0xFE	; 254
    15c8:	80 83       	st	Z, r24
    15ca:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
		linetrackerYjunctionWatchOff();
		BrakeMotor();
    15ce:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
		inline void resetCount(){count_encoder = 0;};
    15d2:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    15d6:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    15da:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    15de:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <ShuttleCockGiven>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	
	/*if Shuttlecock is given*/
	if(ShuttleCockGiven && ShuttleCockArmGone)
    15e2:	88 23       	and	r24, r24
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <_Z18gorockthegamefieldv+0x186>
    15e6:	39 c4       	rjmp	.+2162   	; 0x1e5a <_Z18gorockthegamefieldv+0x9f8>
    15e8:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <ShuttleCockArmGone>
    15ec:	88 23       	and	r24, r24
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <_Z18gorockthegamefieldv+0x190>
    15f0:	34 c4       	rjmp	.+2152   	; 0x1e5a <_Z18gorockthegamefieldv+0x9f8>
    15f2:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <GoThrowingZone1>
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
    15f6:	88 23       	and	r24, r24
    15f8:	09 f4       	brne	.+2      	; 0x15fc <_Z18gorockthegamefieldv+0x19a>
    15fa:	0a c3       	rjmp	.+1556   	; 0x1c10 <_Z18gorockthegamefieldv+0x7ae>
    15fc:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <task3>
    1600:	81 11       	cpse	r24, r1
    1602:	13 c0       	rjmp	.+38     	; 0x162a <_Z18gorockthegamefieldv+0x1c8>
    1604:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1608:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    160c:	05 97       	sbiw	r24, 0x05	; 5
    160e:	f1 f4       	brne	.+60     	; 0x164c <_Z18gorockthegamefieldv+0x1ea>
    1610:	cd c2       	rjmp	.+1434   	; 0x1bac <_Z18gorockthegamefieldv+0x74a>
    1612:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    1614:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	84 60       	ori	r24, 0x04	; 4
    161c:	80 83       	st	Z, r24
    161e:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	81 60       	ori	r24, 0x01	; 1
    1626:	80 83       	st	Z, r24
    1628:	11 c0       	rjmp	.+34     	; 0x164c <_Z18gorockthegamefieldv+0x1ea>
    162a:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task4>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    162e:	81 11       	cpse	r24, r1
    1630:	0d c0       	rjmp	.+26     	; 0x164c <_Z18gorockthegamefieldv+0x1ea>
    1632:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1636:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    163a:	05 97       	sbiw	r24, 0x05	; 5
    163c:	39 f4       	brne	.+14     	; 0x164c <_Z18gorockthegamefieldv+0x1ea>
    163e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1642:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1646:	07 97       	sbiw	r24, 0x07	; 7
    1648:	09 f4       	brne	.+2      	; 0x164c <_Z18gorockthegamefieldv+0x1ea>
    164a:	e8 c2       	rjmp	.+1488   	; 0x1c1c <_Z18gorockthegamefieldv+0x7ba>
    164c:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
				robotState = notmoving;
				
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
    1650:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1654:	02 97       	sbiw	r24, 0x02	; 2
    1656:	d1 f4       	brne	.+52     	; 0x168c <_Z18gorockthegamefieldv+0x22a>
    1658:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    165c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1660:	08 97       	sbiw	r24, 0x08	; 8
    1662:	a1 f4       	brne	.+40     	; 0x168c <_Z18gorockthegamefieldv+0x22a>
    1664:	fa c2       	rjmp	.+1524   	; 0x1c5a <_Z18gorockthegamefieldv+0x7f8>
    1666:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <_b_Transmit_once>
				uart0_puts("Throwing \r\n");
				holdposition();

				if(Stable_Robot() && _b_Transmit_once)
    166a:	81 11       	cpse	r24, r1
    166c:	ff c2       	rjmp	.+1534   	; 0x1c6c <_Z18gorockthegamefieldv+0x80a>
    166e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_Z10uart3_getcv>
				{	
					uart3_putc('1');
					_b_Transmit_once = false;
				}
				
				receiveAck = uart3_getc();
    1672:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    1676:	87 36       	cpi	r24, 0x67	; 103
				if(receiveAck == 'g'){
    1678:	49 f4       	brne	.+18     	; 0x168c <_Z18gorockthegamefieldv+0x22a>
    167a:	81 e0       	ldi	r24, 0x01	; 1
					backtoLZ1 = true;
    167c:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <backtoLZ1>
    1680:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <GoThrowingZone1>
					GoThrowingZone1 = false;
    1684:	80 e2       	ldi	r24, 0x20	; 32
					receiveAck = ' ';
    1686:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <_Z18gorockthegamefieldv+0x234>
    168c:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <backtoLZ1>
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ1 && task3 && !task4){
    1690:	88 23       	and	r24, r24
    1692:	09 f4       	brne	.+2      	; 0x1696 <_Z18gorockthegamefieldv+0x234>
    1694:	47 c0       	rjmp	.+142    	; 0x1724 <_Z18gorockthegamefieldv+0x2c2>
    1696:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <task3>
    169a:	88 23       	and	r24, r24
    169c:	09 f4       	brne	.+2      	; 0x16a0 <_Z18gorockthegamefieldv+0x23e>
    169e:	42 c0       	rjmp	.+132    	; 0x1724 <_Z18gorockthegamefieldv+0x2c2>
    16a0:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task4>
    16a4:	81 11       	cpse	r24, r1
    16a6:	43 c0       	rjmp	.+134    	; 0x172e <_Z18gorockthegamefieldv+0x2cc>
    16a8:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    16aa:	f3 e0       	ldi	r31, 0x03	; 3
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a0 e0       	ldi	r26, 0x00	; 0
    16b2:	b0 e4       	ldi	r27, 0x40	; 64
    16b4:	85 8b       	std	Z+21, r24	; 0x15
    16b6:	96 8b       	std	Z+22, r25	; 0x16
    16b8:	a7 8b       	std	Z+23, r26	; 0x17
    16ba:	b0 8f       	std	Z+24, r27	; 0x18
    16bc:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    16be:	12 8e       	std	Z+26, r1	; 0x1a
    16c0:	13 8e       	std	Z+27, r1	; 0x1b
    16c2:	14 8e       	std	Z+28, r1	; 0x1c
    16c4:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a8 ef       	ldi	r26, 0xF8	; 248
    16ca:	b1 e4       	ldi	r27, 0x41	; 65
    16cc:	85 8f       	std	Z+29, r24	; 0x1d
    16ce:	96 8f       	std	Z+30, r25	; 0x1e
    16d0:	a7 8f       	std	Z+31, r26	; 0x1f
    16d2:	b0 a3       	std	Z+32, r27	; 0x20
				compass.setPid(2,0,31);
				//uart0_puts("Returning from tz1 \t");
				movy(Throwingzone1.y, Back);
    16d4:	63 e0       	ldi	r22, 0x03	; 3
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	88 e5       	ldi	r24, 0x58	; 88
    16da:	97 e0       	ldi	r25, 0x07	; 7
    16dc:	81 dc       	rcall	.-1790   	; 0xfe0 <_Z4movyii>
    16de:	87 e0       	ldi	r24, 0x07	; 7
				robotState = moving;
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    16e6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    16ea:	84 eb       	ldi	r24, 0xB4	; 180
				if(abs(encoderY.getdistance()) >= 1200){
    16ec:	92 e0       	ldi	r25, 0x02	; 2
    16ee:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    16f2:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
    16f6:	9b 01       	movw	r18, r22
    16f8:	77 23       	and	r23, r23
    16fa:	24 f4       	brge	.+8      	; 0x1704 <_Z18gorockthegamefieldv+0x2a2>
    16fc:	22 27       	eor	r18, r18
    16fe:	33 27       	eor	r19, r19
    1700:	26 1b       	sub	r18, r22
    1702:	37 0b       	sbc	r19, r23
    1704:	20 3b       	cpi	r18, 0xB0	; 176
    1706:	34 40       	sbci	r19, 0x04	; 4
    1708:	0c f4       	brge	.+2      	; 0x170c <_Z18gorockthegamefieldv+0x2aa>
    170a:	72 c0       	rjmp	.+228    	; 0x17f0 <_Z18gorockthegamefieldv+0x38e>
    170c:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    170e:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	84 60       	ori	r24, 0x04	; 4
    1716:	80 83       	st	Z, r24
    1718:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	81 60       	ori	r24, 0x01	; 1
    1720:	80 83       	st	Z, r24
    1722:	66 c0       	rjmp	.+204    	; 0x17f0 <_Z18gorockthegamefieldv+0x38e>
    1724:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task4>
				//uart0_puts("\r\n");
			
			}
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
    1728:	88 23       	and	r24, r24
    172a:	09 f4       	brne	.+2      	; 0x172e <_Z18gorockthegamefieldv+0x2cc>
    172c:	c6 c2       	rjmp	.+1420   	; 0x1cba <_Z18gorockthegamefieldv+0x858>
    172e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1732:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1736:	07 97       	sbiw	r24, 0x07	; 7
    1738:	09 f0       	breq	.+2      	; 0x173c <_Z18gorockthegamefieldv+0x2da>
    173a:	bf c2       	rjmp	.+1406   	; 0x1cba <_Z18gorockthegamefieldv+0x858>
    173c:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1740:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1744:	02 97       	sbiw	r24, 0x02	; 2
    1746:	09 f0       	breq	.+2      	; 0x174a <_Z18gorockthegamefieldv+0x2e8>
    1748:	b8 c2       	rjmp	.+1392   	; 0x1cba <_Z18gorockthegamefieldv+0x858>
    174a:	95 c2       	rjmp	.+1322   	; 0x1c76 <_Z18gorockthegamefieldv+0x814>
    174c:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <task5>
				ShuttleCockGiven = false;
				ShuttleCockArmGone = false;
				backtoLZ1 = false;
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    1750:	81 11       	cpse	r24, r1
    1752:	41 c0       	rjmp	.+130    	; 0x17d6 <_Z18gorockthegamefieldv+0x374>
    1754:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1756:	f3 e0       	ldi	r31, 0x03	; 3
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a0 e0       	ldi	r26, 0x00	; 0
    175e:	b0 e4       	ldi	r27, 0x40	; 64
    1760:	85 8b       	std	Z+21, r24	; 0x15
    1762:	96 8b       	std	Z+22, r25	; 0x16
    1764:	a7 8b       	std	Z+23, r26	; 0x17
    1766:	b0 8f       	std	Z+24, r27	; 0x18
    1768:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    176a:	12 8e       	std	Z+26, r1	; 0x1a
    176c:	13 8e       	std	Z+27, r1	; 0x1b
    176e:	14 8e       	std	Z+28, r1	; 0x1c
    1770:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a8 ef       	ldi	r26, 0xF8	; 248
    1776:	b1 e4       	ldi	r27, 0x41	; 65
    1778:	85 8f       	std	Z+29, r24	; 0x1d
    177a:	96 8f       	std	Z+30, r25	; 0x1e
    177c:	a7 8f       	std	Z+31, r26	; 0x1f
    177e:	b0 a3       	std	Z+32, r27	; 0x20
				//uart0_puts("heading loading zone 2\t");
				compass.setPid(2,0,31);
				movx(2000,Front);
    1780:	62 e0       	ldi	r22, 0x02	; 2
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	80 ed       	ldi	r24, 0xD0	; 208
    1786:	97 e0       	ldi	r25, 0x07	; 7
    1788:	d1 da       	rcall	.-2654   	; 0xd2c <_Z4movxii>
    178a:	87 e0       	ldi	r24, 0x07	; 7
				robotState = moving;
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1792:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1796:	8c eb       	ldi	r24, 0xBC	; 188
				if(abs(encoderX.getdistance()) >= 1900){
    1798:	92 e0       	ldi	r25, 0x02	; 2
    179a:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    179e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
    17a2:	9b 01       	movw	r18, r22
    17a4:	77 23       	and	r23, r23
    17a6:	24 f4       	brge	.+8      	; 0x17b0 <_Z18gorockthegamefieldv+0x34e>
    17a8:	22 27       	eor	r18, r18
    17aa:	33 27       	eor	r19, r19
    17ac:	26 1b       	sub	r18, r22
    17ae:	37 0b       	sbc	r19, r23
    17b0:	2c 36       	cpi	r18, 0x6C	; 108
    17b2:	37 40       	sbci	r19, 0x07	; 7
    17b4:	ec f0       	brlt	.+58     	; 0x17f0 <_Z18gorockthegamefieldv+0x38e>
    17b6:	78 94       	sei
	totalLine = 0;
	return linetracker_data;
}

inline void linetrackerXjunctionWatch(void){
	sei();
    17b8:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE0);
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	81 60       	ori	r24, 0x01	; 1
    17c0:	80 83       	st	Z, r24
    17c2:	eb e6       	ldi	r30, 0x6B	; 107
	PCMSK0 |= (1<<PCINT4);
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 61       	ori	r24, 0x10	; 16
    17ca:	80 83       	st	Z, r24
    17cc:	11 c0       	rjmp	.+34     	; 0x17f0 <_Z18gorockthegamefieldv+0x38e>
    17ce:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <task5>
				}
				//uart0_puts("\r\n");
		
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
    17d2:	88 23       	and	r24, r24
    17d4:	69 f0       	breq	.+26     	; 0x17f0 <_Z18gorockthegamefieldv+0x38e>
    17d6:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    17da:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    17de:	07 97       	sbiw	r24, 0x07	; 7
    17e0:	39 f4       	brne	.+14     	; 0x17f0 <_Z18gorockthegamefieldv+0x38e>
    17e2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    17e6:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    17ea:	05 97       	sbiw	r24, 0x05	; 5
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <_Z18gorockthegamefieldv+0x38e>
    17ee:	6a c2       	rjmp	.+1236   	; 0x1cc4 <_Z18gorockthegamefieldv+0x862>
    17f0:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <GoThrowingZone2>
			}
			
			
			/*if there is manual robot ahead of automatic robot && golden rack is not given and shuttlecock
			is given*/
			if(GoThrowingZone2 && !task6 ){
    17f4:	88 23       	and	r24, r24
    17f6:	09 f4       	brne	.+2      	; 0x17fa <_Z18gorockthegamefieldv+0x398>
    17f8:	41 c0       	rjmp	.+130    	; 0x187c <_Z18gorockthegamefieldv+0x41a>
    17fa:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task6>
    17fe:	81 11       	cpse	r24, r1
    1800:	41 c0       	rjmp	.+130    	; 0x1884 <_Z18gorockthegamefieldv+0x422>
    1802:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1804:	f3 e0       	ldi	r31, 0x03	; 3
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b0 e4       	ldi	r27, 0x40	; 64
    180e:	85 8b       	std	Z+21, r24	; 0x15
    1810:	96 8b       	std	Z+22, r25	; 0x16
    1812:	a7 8b       	std	Z+23, r26	; 0x17
    1814:	b0 8f       	std	Z+24, r27	; 0x18
    1816:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    1818:	12 8e       	std	Z+26, r1	; 0x1a
    181a:	13 8e       	std	Z+27, r1	; 0x1b
    181c:	14 8e       	std	Z+28, r1	; 0x1c
    181e:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a8 ef       	ldi	r26, 0xF8	; 248
    1824:	b1 e4       	ldi	r27, 0x41	; 65
    1826:	85 8f       	std	Z+29, r24	; 0x1d
    1828:	96 8f       	std	Z+30, r25	; 0x1e
    182a:	a7 8f       	std	Z+31, r26	; 0x1f
    182c:	b0 a3       	std	Z+32, r27	; 0x20
    182e:	87 e0       	ldi	r24, 0x07	; 7
				//uart0_puts("going tz2 \t");
				compass.setPid(2,0,31);
				robotState = moving;
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1836:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				movy(Throwingzone2.y, Front);
    183a:	62 e0       	ldi	r22, 0x02	; 2
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	88 e5       	ldi	r24, 0x58	; 88
    1840:	97 e0       	ldi	r25, 0x07	; 7
    1842:	ce db       	rcall	.-2148   	; 0xfe0 <_Z4movyii>
    1844:	84 eb       	ldi	r24, 0xB4	; 180
			
				if(abs(encoderY.getdistance()) >=1200){
    1846:	92 e0       	ldi	r25, 0x02	; 2
    1848:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    184c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
    1850:	9b 01       	movw	r18, r22
    1852:	77 23       	and	r23, r23
    1854:	24 f4       	brge	.+8      	; 0x185e <_Z18gorockthegamefieldv+0x3fc>
    1856:	22 27       	eor	r18, r18
    1858:	33 27       	eor	r19, r19
    185a:	26 1b       	sub	r18, r22
    185c:	37 0b       	sbc	r19, r23
    185e:	20 3b       	cpi	r18, 0xB0	; 176
    1860:	34 40       	sbci	r19, 0x04	; 4
    1862:	0c f1       	brlt	.+66     	; 0x18a6 <_Z18gorockthegamefieldv+0x444>
    1864:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    1866:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	84 60       	ori	r24, 0x04	; 4
    186e:	80 83       	st	Z, r24
    1870:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	81 60       	ori	r24, 0x01	; 1
    1878:	80 83       	st	Z, r24
    187a:	15 c0       	rjmp	.+42     	; 0x18a6 <_Z18gorockthegamefieldv+0x444>
    187c:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task6>
				}
				//uart0_puts("\r\n");

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
    1880:	88 23       	and	r24, r24
    1882:	89 f0       	breq	.+34     	; 0x18a6 <_Z18gorockthegamefieldv+0x444>
    1884:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task7>
    1888:	81 11       	cpse	r24, r1
    188a:	0d c0       	rjmp	.+26     	; 0x18a6 <_Z18gorockthegamefieldv+0x444>
    188c:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1890:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1894:	06 97       	sbiw	r24, 0x06	; 6
    1896:	39 f4       	brne	.+14     	; 0x18a6 <_Z18gorockthegamefieldv+0x444>
    1898:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    189c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    18a0:	07 97       	sbiw	r24, 0x07	; 7
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <_Z18gorockthegamefieldv+0x444>
    18a4:	31 c2       	rjmp	.+1122   	; 0x1d08 <_Z18gorockthegamefieldv+0x8a6>
    18a6:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
				//uart3_putc('2');
				
			}
			/* if in throwing zone 2 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ2 && robotState == notmoving){
    18aa:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    18ae:	03 97       	sbiw	r24, 0x03	; 3
    18b0:	c9 f4       	brne	.+50     	; 0x18e4 <_Z18gorockthegamefieldv+0x482>
    18b2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    18b6:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    18ba:	08 97       	sbiw	r24, 0x08	; 8
    18bc:	99 f4       	brne	.+38     	; 0x18e4 <_Z18gorockthegamefieldv+0x482>
    18be:	43 c2       	rjmp	.+1158   	; 0x1d46 <_Z18gorockthegamefieldv+0x8e4>
				uart0_puts("throwing \r\n");
				holdposition();

				if(Stable_Robot() && _b_Transmit_once)
    18c0:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <_b_Transmit_once>
    18c4:	81 11       	cpse	r24, r1
    18c6:	48 c2       	rjmp	.+1168   	; 0x1d58 <_Z18gorockthegamefieldv+0x8f6>
				{	
					uart3_putc('2');
					_b_Transmit_once = false;
				}

				receiveAck = uart3_getc();
    18c8:	89 d7       	rcall	.+3858   	; 0x27dc <_Z10uart3_getcv>
    18ca:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    18ce:	87 36       	cpi	r24, 0x67	; 103
				if(receiveAck == 'g'){
    18d0:	49 f4       	brne	.+18     	; 0x18e4 <_Z18gorockthegamefieldv+0x482>
    18d2:	81 e0       	ldi	r24, 0x01	; 1
					backtoLZ2 = true;
    18d4:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <backtoLZ2>
    18d8:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <GoThrowingZone2>
					GoThrowingZone2 = false;
    18dc:	80 e2       	ldi	r24, 0x20	; 32
					receiveAck = ' ';
    18de:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    18e2:	05 c0       	rjmp	.+10     	; 0x18ee <_Z18gorockthegamefieldv+0x48c>
    18e4:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <backtoLZ2>
				}
			}
			///if acknowledge received from throwing mechanism after throwing then back to loading zone 2
			if(backtoLZ2 && task6 && !task7){
    18e8:	88 23       	and	r24, r24
    18ea:	09 f4       	brne	.+2      	; 0x18ee <_Z18gorockthegamefieldv+0x48c>
    18ec:	46 c0       	rjmp	.+140    	; 0x197a <_Z18gorockthegamefieldv+0x518>
    18ee:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task6>
    18f2:	88 23       	and	r24, r24
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <_Z18gorockthegamefieldv+0x496>
    18f6:	41 c0       	rjmp	.+130    	; 0x197a <_Z18gorockthegamefieldv+0x518>
    18f8:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task7>
    18fc:	81 11       	cpse	r24, r1
    18fe:	41 c0       	rjmp	.+130    	; 0x1982 <_Z18gorockthegamefieldv+0x520>
    1900:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1902:	f3 e0       	ldi	r31, 0x03	; 3
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e0       	ldi	r26, 0x00	; 0
    190a:	b0 e4       	ldi	r27, 0x40	; 64
    190c:	85 8b       	std	Z+21, r24	; 0x15
    190e:	96 8b       	std	Z+22, r25	; 0x16
    1910:	a7 8b       	std	Z+23, r26	; 0x17
    1912:	b0 8f       	std	Z+24, r27	; 0x18
    1914:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    1916:	12 8e       	std	Z+26, r1	; 0x1a
    1918:	13 8e       	std	Z+27, r1	; 0x1b
    191a:	14 8e       	std	Z+28, r1	; 0x1c
    191c:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a8 ef       	ldi	r26, 0xF8	; 248
    1922:	b1 e4       	ldi	r27, 0x41	; 65
    1924:	85 8f       	std	Z+29, r24	; 0x1d
    1926:	96 8f       	std	Z+30, r25	; 0x1e
    1928:	a7 8f       	std	Z+31, r26	; 0x1f
    192a:	b0 a3       	std	Z+32, r27	; 0x20
				//uart0_puts("returning to loading zone 2 \t");
				compass.setPid(2,0,31);
				movy(Throwingzone2.y,Back);
    192c:	63 e0       	ldi	r22, 0x03	; 3
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	88 e5       	ldi	r24, 0x58	; 88
    1932:	97 e0       	ldi	r25, 0x07	; 7
    1934:	55 db       	rcall	.-2390   	; 0xfe0 <_Z4movyii>
    1936:	87 e0       	ldi	r24, 0x07	; 7
				robotState = moving;
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    193e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1942:	84 eb       	ldi	r24, 0xB4	; 180
			
				if(abs(encoderY.getdistance()) >= 1200){
    1944:	92 e0       	ldi	r25, 0x02	; 2
    1946:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    194a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
    194e:	9b 01       	movw	r18, r22
    1950:	77 23       	and	r23, r23
    1952:	24 f4       	brge	.+8      	; 0x195c <_Z18gorockthegamefieldv+0x4fa>
    1954:	22 27       	eor	r18, r18
    1956:	33 27       	eor	r19, r19
    1958:	26 1b       	sub	r18, r22
    195a:	37 0b       	sbc	r19, r23
    195c:	20 3b       	cpi	r18, 0xB0	; 176
    195e:	34 40       	sbci	r19, 0x04	; 4
    1960:	ec f0       	brlt	.+58     	; 0x199c <_Z18gorockthegamefieldv+0x53a>
    1962:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    1964:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	84 60       	ori	r24, 0x04	; 4
    196c:	80 83       	st	Z, r24
    196e:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	81 60       	ori	r24, 0x01	; 1
    1976:	80 83       	st	Z, r24
    1978:	11 c0       	rjmp	.+34     	; 0x199c <_Z18gorockthegamefieldv+0x53a>
    197a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task7>
				//uart0_puts("\r\n");
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
    197e:	88 23       	and	r24, r24
    1980:	69 f0       	breq	.+26     	; 0x199c <_Z18gorockthegamefieldv+0x53a>
    1982:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1986:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    198a:	07 97       	sbiw	r24, 0x07	; 7
    198c:	39 f4       	brne	.+14     	; 0x199c <_Z18gorockthegamefieldv+0x53a>
    198e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1992:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1996:	03 97       	sbiw	r24, 0x03	; 3
    1998:	09 f4       	brne	.+2      	; 0x199c <_Z18gorockthegamefieldv+0x53a>
    199a:	e3 c1       	rjmp	.+966    	; 0x1d62 <_Z18gorockthegamefieldv+0x900>
    199c:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <GoThrowingZone3>
				ShuttleCockArmGone = false;
				backtoLZ2 = false;
			}
			
			/*if golden rack is given to automatic robot and says goto throwingzone 1*/
			if(GoThrowingZone3 && !task8){
    19a0:	88 23       	and	r24, r24
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <_Z18gorockthegamefieldv+0x544>
    19a4:	41 c0       	rjmp	.+130    	; 0x1a28 <_Z18gorockthegamefieldv+0x5c6>
    19a6:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <task8>
    19aa:	81 11       	cpse	r24, r1
    19ac:	41 c0       	rjmp	.+130    	; 0x1a30 <_Z18gorockthegamefieldv+0x5ce>
    19ae:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    19b0:	f3 e0       	ldi	r31, 0x03	; 3
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a0 e0       	ldi	r26, 0x00	; 0
    19b8:	b0 e4       	ldi	r27, 0x40	; 64
    19ba:	85 8b       	std	Z+21, r24	; 0x15
    19bc:	96 8b       	std	Z+22, r25	; 0x16
    19be:	a7 8b       	std	Z+23, r26	; 0x17
    19c0:	b0 8f       	std	Z+24, r27	; 0x18
    19c2:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    19c4:	12 8e       	std	Z+26, r1	; 0x1a
    19c6:	13 8e       	std	Z+27, r1	; 0x1b
    19c8:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a8 ef       	ldi	r26, 0xF8	; 248
    19d0:	b1 e4       	ldi	r27, 0x41	; 65
    19d2:	85 8f       	std	Z+29, r24	; 0x1d
    19d4:	96 8f       	std	Z+30, r25	; 0x1e
    19d6:	a7 8f       	std	Z+31, r26	; 0x1f
    19d8:	b0 a3       	std	Z+32, r27	; 0x20
				compass.setPid(2,0,31);
				//uart0_puts("going tz3 \t");
				movy(5100,Front);
    19da:	62 e0       	ldi	r22, 0x02	; 2
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	8c ee       	ldi	r24, 0xEC	; 236
    19e0:	93 e1       	ldi	r25, 0x13	; 19
    19e2:	fe da       	rcall	.-2564   	; 0xfe0 <_Z4movyii>
    19e4:	87 e0       	ldi	r24, 0x07	; 7
				robotState = moving;
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    19ec:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    19f0:	84 eb       	ldi	r24, 0xB4	; 180
				if(abs(encoderY.getdistance()) >= 4000){
    19f2:	92 e0       	ldi	r25, 0x02	; 2
    19f4:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    19f8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__fixsfsi>
    19fc:	9b 01       	movw	r18, r22
    19fe:	77 23       	and	r23, r23
    1a00:	24 f4       	brge	.+8      	; 0x1a0a <_Z18gorockthegamefieldv+0x5a8>
    1a02:	22 27       	eor	r18, r18
    1a04:	33 27       	eor	r19, r19
    1a06:	26 1b       	sub	r18, r22
    1a08:	37 0b       	sbc	r19, r23
    1a0a:	20 3a       	cpi	r18, 0xA0	; 160
    1a0c:	3f 40       	sbci	r19, 0x0F	; 15
    1a0e:	c4 f1       	brlt	.+112    	; 0x1a80 <_Z18gorockthegamefieldv+0x61e>
    1a10:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    1a12:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	84 60       	ori	r24, 0x04	; 4
    1a1a:	80 83       	st	Z, r24
    1a1c:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	81 60       	ori	r24, 0x01	; 1
    1a24:	80 83       	st	Z, r24
    1a26:	2c c0       	rjmp	.+88     	; 0x1a80 <_Z18gorockthegamefieldv+0x61e>
    1a28:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <task8>
					//uart0_puts("interrupt on");
				}
				//uart0_puts("\r\n");
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
    1a2c:	88 23       	and	r24, r24
    1a2e:	41 f1       	breq	.+80     	; 0x1a80 <_Z18gorockthegamefieldv+0x61e>
    1a30:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1a34:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1a38:	06 97       	sbiw	r24, 0x06	; 6
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <_Z18gorockthegamefieldv+0x5dc>
    1a3c:	06 c2       	rjmp	.+1036   	; 0x1e4a <_Z18gorockthegamefieldv+0x9e8>
    1a3e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1a42:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1a46:	07 97       	sbiw	r24, 0x07	; 7
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <_Z18gorockthegamefieldv+0x5ea>
    1a4a:	ff c1       	rjmp	.+1022   	; 0x1e4a <_Z18gorockthegamefieldv+0x9e8>
    1a4c:	ad c1       	rjmp	.+858    	; 0x1da8 <_Z18gorockthegamefieldv+0x946>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    1a4e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1a52:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1a56:	08 97       	sbiw	r24, 0x08	; 8
    1a58:	99 f4       	brne	.+38     	; 0x1a80 <_Z18gorockthegamefieldv+0x61e>
    1a5a:	c7 c1       	rjmp	.+910    	; 0x1dea <_Z18gorockthegamefieldv+0x988>
				uart0_puts("holding \r\n");
				holdposition();	

				if(Stable_Robot() && _b_Transmit_once)
    1a5c:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <_b_Transmit_once>
    1a60:	81 11       	cpse	r24, r1
    1a62:	cc c1       	rjmp	.+920    	; 0x1dfc <_Z18gorockthegamefieldv+0x99a>
				{	
					uart3_putc('3');
					_b_Transmit_once = false;
				}
				
				receiveAck = uart3_getc();
    1a64:	bb d6       	rcall	.+3446   	; 0x27dc <_Z10uart3_getcv>
    1a66:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    1a6a:	87 36       	cpi	r24, 0x67	; 103
				if(receiveAck == 'g'){
    1a6c:	49 f4       	brne	.+18     	; 0x1a80 <_Z18gorockthegamefieldv+0x61e>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
					backtoLZ2 = true;
    1a70:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <backtoLZ2>
    1a74:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <GoThrowingZone3>
					GoThrowingZone3 = false;
    1a78:	80 e2       	ldi	r24, 0x20	; 32
					receiveAck = ' ';
    1a7a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    1a7e:	05 c0       	rjmp	.+10     	; 0x1a8a <_Z18gorockthegamefieldv+0x628>
    1a80:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <backtoLZ2>
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ2 && task8 && !task9){
    1a84:	88 23       	and	r24, r24
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <_Z18gorockthegamefieldv+0x628>
    1a88:	46 c0       	rjmp	.+140    	; 0x1b16 <_Z18gorockthegamefieldv+0x6b4>
    1a8a:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <task8>
    1a8e:	88 23       	and	r24, r24
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <_Z18gorockthegamefieldv+0x632>
    1a92:	41 c0       	rjmp	.+130    	; 0x1b16 <_Z18gorockthegamefieldv+0x6b4>
    1a94:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <task9>
    1a98:	81 11       	cpse	r24, r1
    1a9a:	42 c0       	rjmp	.+132    	; 0x1b20 <_Z18gorockthegamefieldv+0x6be>
    1a9c:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1a9e:	f3 e0       	ldi	r31, 0x03	; 3
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a0 e0       	ldi	r26, 0x00	; 0
    1aa6:	b0 e4       	ldi	r27, 0x40	; 64
    1aa8:	85 8b       	std	Z+21, r24	; 0x15
    1aaa:	96 8b       	std	Z+22, r25	; 0x16
    1aac:	a7 8b       	std	Z+23, r26	; 0x17
    1aae:	b0 8f       	std	Z+24, r27	; 0x18
    1ab0:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    1ab2:	12 8e       	std	Z+26, r1	; 0x1a
    1ab4:	13 8e       	std	Z+27, r1	; 0x1b
    1ab6:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a8 ef       	ldi	r26, 0xF8	; 248
    1abe:	b1 e4       	ldi	r27, 0x41	; 65
    1ac0:	85 8f       	std	Z+29, r24	; 0x1d
    1ac2:	96 8f       	std	Z+30, r25	; 0x1e
    1ac4:	a7 8f       	std	Z+31, r26	; 0x1f
    1ac6:	b0 a3       	std	Z+32, r27	; 0x20
				//uart0_puts("back to lz2\t");
				compass.setPid(2,0,31);
				movy(5100,Back);
    1ac8:	63 e0       	ldi	r22, 0x03	; 3
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	8c ee       	ldi	r24, 0xEC	; 236
    1ace:	93 e1       	ldi	r25, 0x13	; 19
    1ad0:	87 da       	rcall	.-2802   	; 0xfe0 <_Z4movyii>
				robotState = moving;
    1ad2:	87 e0       	ldi	r24, 0x07	; 7
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1ada:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				if(abs(encoderY.getdistance()) >= 4000){
    1ade:	84 eb       	ldi	r24, 0xB4	; 180
    1ae0:	92 e0       	ldi	r25, 0x02	; 2
    1ae2:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    1ae6:	dd d7       	rcall	.+4026   	; 0x2aa2 <__fixsfsi>
    1ae8:	9b 01       	movw	r18, r22
    1aea:	77 23       	and	r23, r23
    1aec:	24 f4       	brge	.+8      	; 0x1af6 <_Z18gorockthegamefieldv+0x694>
    1aee:	22 27       	eor	r18, r18
    1af0:	33 27       	eor	r19, r19
    1af2:	26 1b       	sub	r18, r22
    1af4:	37 0b       	sbc	r19, r23
    1af6:	20 3a       	cpi	r18, 0xA0	; 160
    1af8:	3f 40       	sbci	r19, 0x0F	; 15
    1afa:	0c f4       	brge	.+2      	; 0x1afe <_Z18gorockthegamefieldv+0x69c>
    1afc:	ae c1       	rjmp	.+860    	; 0x1e5a <_Z18gorockthegamefieldv+0x9f8>
    1afe:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    1b00:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	84 60       	ori	r24, 0x04	; 4
    1b08:	80 83       	st	Z, r24
    1b0a:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	81 60       	ori	r24, 0x01	; 1
    1b12:	80 83       	st	Z, r24
    1b14:	08 95       	ret
    1b16:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <task9>
				}
				//uart0_puts("\r\n");
			}
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <_Z18gorockthegamefieldv+0x6be>
    1b1e:	9d c1       	rjmp	.+826    	; 0x1e5a <_Z18gorockthegamefieldv+0x9f8>
    1b20:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1b24:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1b28:	07 97       	sbiw	r24, 0x07	; 7
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <_Z18gorockthegamefieldv+0x6cc>
    1b2c:	96 c1       	rjmp	.+812    	; 0x1e5a <_Z18gorockthegamefieldv+0x9f8>
    1b2e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1b32:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1b36:	04 97       	sbiw	r24, 0x04	; 4
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <_Z18gorockthegamefieldv+0x6da>
    1b3a:	8f c1       	rjmp	.+798    	; 0x1e5a <_Z18gorockthegamefieldv+0x9f8>
    1b3c:	64 c1       	rjmp	.+712    	; 0x1e06 <_Z18gorockthegamefieldv+0x9a4>
    1b3e:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task4>

	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
		
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    1b42:	81 11       	cpse	r24, r1
    1b44:	a3 cc       	rjmp	.-1722   	; 0x148c <_Z18gorockthegamefieldv+0x2a>
    1b46:	c5 cc       	rjmp	.-1654   	; 0x14d2 <_Z18gorockthegamefieldv+0x70>
    1b48:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1b4a:	f3 e0       	ldi	r31, 0x03	; 3
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	b0 e4       	ldi	r27, 0x40	; 64
    1b54:	85 8b       	std	Z+21, r24	; 0x15
    1b56:	96 8b       	std	Z+22, r25	; 0x16
    1b58:	a7 8b       	std	Z+23, r26	; 0x17
    1b5a:	b0 8f       	std	Z+24, r27	; 0x18
    1b5c:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    1b5e:	12 8e       	std	Z+26, r1	; 0x1a
    1b60:	13 8e       	std	Z+27, r1	; 0x1b
    1b62:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a8 ef       	ldi	r26, 0xF8	; 248
    1b6a:	b1 e4       	ldi	r27, 0x41	; 65
    1b6c:	85 8f       	std	Z+29, r24	; 0x1d
    1b6e:	96 8f       	std	Z+30, r25	; 0x1e
    1b70:	a7 8f       	std	Z+31, r26	; 0x1f
	}
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point){	
		compass.setPid(2,0,31);
		movx(Throwingzone1.x,Front);
    1b72:	b0 a3       	std	Z+32, r27	; 0x20
    1b74:	62 e0       	ldi	r22, 0x02	; 2
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	88 ef       	ldi	r24, 0xF8	; 248
    1b7a:	91 e1       	ldi	r25, 0x11	; 17
    1b7c:	d7 d8       	rcall	.-3666   	; 0xd2c <_Z4movxii>
		robotState = moving;
    1b7e:	87 e0       	ldi	r24, 0x07	; 7
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1b86:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
		//uart0_puts("going ahead \t");
		if(abs(encoderX.getdistance()) >= 4530){
    1b8a:	8c eb       	ldi	r24, 0xBC	; 188
    1b8c:	92 e0       	ldi	r25, 0x02	; 2
    1b8e:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    1b92:	87 d7       	rcall	.+3854   	; 0x2aa2 <__fixsfsi>
    1b94:	9b 01       	movw	r18, r22
    1b96:	77 23       	and	r23, r23
    1b98:	24 f4       	brge	.+8      	; 0x1ba2 <_Z18gorockthegamefieldv+0x740>
    1b9a:	22 27       	eor	r18, r18
    1b9c:	33 27       	eor	r19, r19
    1b9e:	26 1b       	sub	r18, r22
    1ba0:	37 0b       	sbc	r19, r23
    1ba2:	22 3b       	cpi	r18, 0xB2	; 178
    1ba4:	31 41       	sbci	r19, 0x11	; 17
    1ba6:	0c f0       	brlt	.+2      	; 0x1baa <_Z18gorockthegamefieldv+0x748>
    1ba8:	c5 cc       	rjmp	.-1654   	; 0x1534 <_Z18gorockthegamefieldv+0xd2>
    1baa:	19 cd       	rjmp	.-1486   	; 0x15de <_Z18gorockthegamefieldv+0x17c>
    1bac:	87 e0       	ldi	r24, 0x07	; 7
	if(ShuttleCockGiven && ShuttleCockArmGone)
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
				robotState = moving;
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1bb4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1bb8:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1bba:	f3 e0       	ldi	r31, 0x03	; 3
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e0       	ldi	r26, 0x00	; 0
    1bc2:	b0 e4       	ldi	r27, 0x40	; 64
    1bc4:	85 8b       	std	Z+21, r24	; 0x15
    1bc6:	96 8b       	std	Z+22, r25	; 0x16
    1bc8:	a7 8b       	std	Z+23, r26	; 0x17
    1bca:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    1bcc:	11 8e       	std	Z+25, r1	; 0x19
    1bce:	12 8e       	std	Z+26, r1	; 0x1a
    1bd0:	13 8e       	std	Z+27, r1	; 0x1b
		kd = d;
    1bd2:	14 8e       	std	Z+28, r1	; 0x1c
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a8 ef       	ldi	r26, 0xF8	; 248
    1bda:	b1 e4       	ldi	r27, 0x41	; 65
    1bdc:	85 8f       	std	Z+29, r24	; 0x1d
    1bde:	96 8f       	std	Z+30, r25	; 0x1e
    1be0:	a7 8f       	std	Z+31, r26	; 0x1f
				compass.setPid(2,0,31);
				movy(Throwingzone1.y,Front);
    1be2:	b0 a3       	std	Z+32, r27	; 0x20
    1be4:	62 e0       	ldi	r22, 0x02	; 2
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	88 e5       	ldi	r24, 0x58	; 88
    1bea:	97 e0       	ldi	r25, 0x07	; 7
    1bec:	f9 d9       	rcall	.-3086   	; 0xfe0 <_Z4movyii>
				//uart0_puts("going tz1\t");
				if(abs(encoderY.getdistance()) >= 1600){
    1bee:	84 eb       	ldi	r24, 0xB4	; 180
    1bf0:	92 e0       	ldi	r25, 0x02	; 2
    1bf2:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    1bf6:	55 d7       	rcall	.+3754   	; 0x2aa2 <__fixsfsi>
    1bf8:	9b 01       	movw	r18, r22
    1bfa:	77 23       	and	r23, r23
    1bfc:	24 f4       	brge	.+8      	; 0x1c06 <_Z18gorockthegamefieldv+0x7a4>
    1bfe:	22 27       	eor	r18, r18
    1c00:	33 27       	eor	r19, r19
    1c02:	26 1b       	sub	r18, r22
    1c04:	37 0b       	sbc	r19, r23
    1c06:	20 34       	cpi	r18, 0x40	; 64
    1c08:	36 40       	sbci	r19, 0x06	; 6
    1c0a:	0c f0       	brlt	.+2      	; 0x1c0e <_Z18gorockthegamefieldv+0x7ac>
    1c0c:	02 cd       	rjmp	.-1532   	; 0x1612 <_Z18gorockthegamefieldv+0x1b0>
    1c0e:	1e cd       	rjmp	.-1476   	; 0x164c <_Z18gorockthegamefieldv+0x1ea>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    1c10:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <task3>
    1c14:	88 23       	and	r24, r24
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <_Z18gorockthegamefieldv+0x7b8>
    1c18:	19 cd       	rjmp	.-1486   	; 0x164c <_Z18gorockthegamefieldv+0x1ea>
    1c1a:	07 cd       	rjmp	.-1522   	; 0x162a <_Z18gorockthegamefieldv+0x1c8>
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT16);
    1c1c:	ed e6       	ldi	r30, 0x6D	; 109
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	8e 7f       	andi	r24, 0xFE	; 254
    1c24:	80 83       	st	Z, r24
				linetrackerYjunctionWatchOff();
				uart0_puts("reached throwing zone 1\r\n");
    1c26:	80 e4       	ldi	r24, 0x40	; 64
    1c28:	92 e0       	ldi	r25, 0x02	; 2
    1c2a:	6c d4       	rcall	.+2264   	; 0x2504 <_Z10uart0_putsPKc>
    1c2c:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
				BrakeMotor();
    1c30:	82 e0       	ldi	r24, 0x02	; 2
				//uart3_putc('1');
				where = inTZ1;
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1c38:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
    1c3c:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1c40:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1c44:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    1c48:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    1c4c:	88 e0       	ldi	r24, 0x08	; 8
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1c54:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
				uart0_puts("Throwing \r\n");
    1c58:	f9 cc       	rjmp	.-1550   	; 0x164c <_Z18gorockthegamefieldv+0x1ea>
    1c5a:	8a e5       	ldi	r24, 0x5A	; 90
    1c5c:	92 e0       	ldi	r25, 0x02	; 2
				holdposition();
    1c5e:	52 d4       	rcall	.+2212   	; 0x2504 <_Z10uart0_putsPKc>
    1c60:	46 db       	rcall	.-2420   	; 0x12ee <_Z12holdpositionv>

				if(Stable_Robot() && _b_Transmit_once)
    1c62:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z12Stable_Robotv>
    1c66:	81 11       	cpse	r24, r1
    1c68:	fe cc       	rjmp	.-1540   	; 0x1666 <_Z18gorockthegamefieldv+0x204>
    1c6a:	01 cd       	rjmp	.-1534   	; 0x166e <_Z18gorockthegamefieldv+0x20c>
				{	
					uart3_putc('1');
    1c6c:	81 e3       	ldi	r24, 0x31	; 49
    1c6e:	d1 d5       	rcall	.+2978   	; 0x2812 <_Z10uart3_putch>
    1c70:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <_b_Transmit_once>
					_b_Transmit_once = false;
    1c74:	fc cc       	rjmp	.-1544   	; 0x166e <_Z18gorockthegamefieldv+0x20c>
    1c76:	ed e6       	ldi	r30, 0x6D	; 109
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8e 7f       	andi	r24, 0xFE	; 254
    1c7e:	80 83       	st	Z, r24
    1c80:	85 e0       	ldi	r24, 0x05	; 5
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
				//uart0_puts("REached loading zone 1\r\n");
				linetrackerYjunctionWatchOff();
				where = inLZ1;
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1c88:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
    1c8c:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
				BrakeMotor();
    1c90:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1c94:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1c98:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    1c9c:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    1ca0:	88 e0       	ldi	r24, 0x08	; 8
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1ca8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1cac:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <ShuttleCockGiven>
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    1cb0:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    1cb4:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <backtoLZ1>
				backtoLZ1 = false;
    1cb8:	9b cd       	rjmp	.-1226   	; 0x17f0 <_Z18gorockthegamefieldv+0x38e>
    1cba:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <gotoLZ2>
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    1cbe:	81 11       	cpse	r24, r1
    1cc0:	45 cd       	rjmp	.-1398   	; 0x174c <_Z18gorockthegamefieldv+0x2ea>
    1cc2:	85 cd       	rjmp	.-1270   	; 0x17ce <_Z18gorockthegamefieldv+0x36c>
    1cc4:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <gotoLZ2>
		
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
				//uart0_puts("reached loading zone 2\r\n");
				gotoLZ2 = false;
    1cc8:	eb e6       	ldi	r30, 0x6B	; 107
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT16);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	8f 7e       	andi	r24, 0xEF	; 239
    1cd0:	80 83       	st	Z, r24
    1cd2:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
				linetrackerXjunctionWatchOff();
				BrakeMotor();
    1cd6:	86 e0       	ldi	r24, 0x06	; 6
				where = inLZ2;
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1cde:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
				robotState = notmoving;
    1ce2:	88 e0       	ldi	r24, 0x08	; 8
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1cea:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1cee:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1cf2:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1cf6:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    1cfa:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
				encoderX.resetCount();
				encoderY.resetCount();
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    1cfe:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <ShuttleCockGiven>
				ShuttleCockArmGone = false;
    1d02:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <ShuttleCockArmGone>
    1d06:	74 cd       	rjmp	.-1304   	; 0x17f0 <_Z18gorockthegamefieldv+0x38e>
				//uart0_puts("\r\n");

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
				uart0_puts("Reached tz2 \r\n");
    1d08:	86 e6       	ldi	r24, 0x66	; 102
    1d0a:	92 e0       	ldi	r25, 0x02	; 2
    1d0c:	fb d3       	rcall	.+2038   	; 0x2504 <_Z10uart0_putsPKc>
    1d0e:	83 e0       	ldi	r24, 0x03	; 3
				where = inTZ2;
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1d16:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT16);
    1d1a:	ed e6       	ldi	r30, 0x6D	; 109
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8e 7f       	andi	r24, 0xFE	; 254
    1d22:	80 83       	st	Z, r24
    1d24:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1d28:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1d2c:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
				linetrackerYjunctionWatchOff();
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    1d30:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    1d34:	88 e0       	ldi	r24, 0x08	; 8
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				BrakeMotor();
    1d3c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				
			}
			/* if in throwing zone 2 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ2 && robotState == notmoving){
				uart0_puts("throwing \r\n");
    1d40:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1d44:	b0 cd       	rjmp	.-1184   	; 0x18a6 <_Z18gorockthegamefieldv+0x444>
    1d46:	85 e7       	ldi	r24, 0x75	; 117
				holdposition();
    1d48:	92 e0       	ldi	r25, 0x02	; 2
    1d4a:	dc d3       	rcall	.+1976   	; 0x2504 <_Z10uart0_putsPKc>

				if(Stable_Robot() && _b_Transmit_once)
    1d4c:	d0 da       	rcall	.-2656   	; 0x12ee <_Z12holdpositionv>
    1d4e:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z12Stable_Robotv>
    1d52:	81 11       	cpse	r24, r1
    1d54:	b5 cd       	rjmp	.-1174   	; 0x18c0 <_Z18gorockthegamefieldv+0x45e>
				{	
					uart3_putc('2');
    1d56:	b8 cd       	rjmp	.-1168   	; 0x18c8 <_Z18gorockthegamefieldv+0x466>
    1d58:	82 e3       	ldi	r24, 0x32	; 50
    1d5a:	5b d5       	rcall	.+2742   	; 0x2812 <_Z10uart3_putch>
					_b_Transmit_once = false;
    1d5c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <_b_Transmit_once>
    1d60:	b3 cd       	rjmp	.-1178   	; 0x18c8 <_Z18gorockthegamefieldv+0x466>
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
				holdposition();
    1d62:	c5 da       	rcall	.-2678   	; 0x12ee <_Z12holdpositionv>
    1d64:	ed e6       	ldi	r30, 0x6D	; 109
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	8e 7f       	andi	r24, 0xFE	; 254
    1d6c:	80 83       	st	Z, r24
    1d6e:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
				//uart0_puts("reached loading zone 2 \r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    1d72:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1d76:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1d7a:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    1d7e:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    1d82:	86 e0       	ldi	r24, 0x06	; 6
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1d8a:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
				robotState = notmoving;
    1d8e:	88 e0       	ldi	r24, 0x08	; 8
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1d96:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    1d9a:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <ShuttleCockGiven>
				ShuttleCockArmGone = false;
    1d9e:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <ShuttleCockArmGone>
				backtoLZ2 = false;
    1da2:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <backtoLZ2>
    1da6:	fa cd       	rjmp	.-1036   	; 0x199c <_Z18gorockthegamefieldv+0x53a>
				}
				//uart0_puts("\r\n");
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
				uart0_puts("reached tz3\r\n");
    1da8:	81 e8       	ldi	r24, 0x81	; 129
    1daa:	92 e0       	ldi	r25, 0x02	; 2
    1dac:	ab d3       	rcall	.+1878   	; 0x2504 <_Z10uart0_putsPKc>
    1dae:	ed e6       	ldi	r30, 0x6D	; 109
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	8e 7f       	andi	r24, 0xFE	; 254
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    1db6:	80 83       	st	Z, r24
    1db8:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1dbc:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1dc0:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1dc4:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    1dc8:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    1dcc:	88 e0       	ldi	r24, 0x08	; 8
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				GoThrowingZone3 = false;
    1dd4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				where = inTZ3;
    1dd8:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <GoThrowingZone3>
    1ddc:	84 e0       	ldi	r24, 0x04	; 4
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1de4:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
				uart0_puts("holding \r\n");
    1de8:	4b ce       	rjmp	.-874    	; 0x1a80 <_Z18gorockthegamefieldv+0x61e>
    1dea:	8f e8       	ldi	r24, 0x8F	; 143
    1dec:	92 e0       	ldi	r25, 0x02	; 2
				holdposition();	
    1dee:	8a d3       	rcall	.+1812   	; 0x2504 <_Z10uart0_putsPKc>
    1df0:	7e da       	rcall	.-2820   	; 0x12ee <_Z12holdpositionv>

				if(Stable_Robot() && _b_Transmit_once)
    1df2:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z12Stable_Robotv>
    1df6:	81 11       	cpse	r24, r1
    1df8:	31 ce       	rjmp	.-926    	; 0x1a5c <_Z18gorockthegamefieldv+0x5fa>
    1dfa:	34 ce       	rjmp	.-920    	; 0x1a64 <_Z18gorockthegamefieldv+0x602>
				{	
					uart3_putc('3');
    1dfc:	83 e3       	ldi	r24, 0x33	; 51
    1dfe:	09 d5       	rcall	.+2578   	; 0x2812 <_Z10uart3_putch>
    1e00:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <_b_Transmit_once>
					_b_Transmit_once = false;
    1e04:	2f ce       	rjmp	.-930    	; 0x1a64 <_Z18gorockthegamefieldv+0x602>
    1e06:	ed e6       	ldi	r30, 0x6D	; 109
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8e 7f       	andi	r24, 0xFE	; 254
    1e0e:	80 83       	st	Z, r24
    1e10:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
				//uart0_puts("reached loading zone 2\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    1e14:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1e18:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1e1c:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    1e20:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    1e24:	86 e0       	ldi	r24, 0x06	; 6
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1e2c:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
    1e30:	88 e0       	ldi	r24, 0x08	; 8
				robotState = notmoving;
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1e38:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1e3c:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <ShuttleCockGiven>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    1e40:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    1e44:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <backtoLZ2>
				backtoLZ2 = false;
    1e48:	08 95       	ret
    1e4a:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    1e4e:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1e52:	04 97       	sbiw	r24, 0x04	; 4
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <_Z18gorockthegamefieldv+0x9f6>
    1e56:	14 ce       	rjmp	.-984    	; 0x1a80 <_Z18gorockthegamefieldv+0x61e>
    1e58:	fa cd       	rjmp	.-1036   	; 0x1a4e <_Z18gorockthegamefieldv+0x5ec>
    1e5a:	08 95       	ret

00001e5c <__vector_9>:
    1e5c:	1f 92       	push	r1
}


/*When Junction on Linetracker X is deteced*/
ISR(PCINT0_vect)		
{
    1e5e:	0f 92       	push	r0
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	0f 92       	push	r0
    1e64:	11 24       	eor	r1, r1
    1e66:	0b b6       	in	r0, 0x3b	; 59
    1e68:	0f 92       	push	r0
    1e6a:	2f 93       	push	r18
    1e6c:	3f 93       	push	r19
    1e6e:	4f 93       	push	r20
    1e70:	5f 93       	push	r21
    1e72:	6f 93       	push	r22
    1e74:	7f 93       	push	r23
    1e76:	8f 93       	push	r24
    1e78:	9f 93       	push	r25
    1e7a:	af 93       	push	r26
    1e7c:	bf 93       	push	r27
    1e7e:	ef 93       	push	r30
    1e80:	ff 93       	push	r31
	if(!task1){
    1e82:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <task1>
    1e86:	81 11       	cpse	r24, r1
    1e88:	06 c0       	rjmp	.+12     	; 0x1e96 <__vector_9+0x3a>
		task1 = true;			//reached to corner of loading zone1
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <task1>
		FlagChangeSetpointCompass = true;
    1e90:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <FlagChangeSetpointCompass>
    1e94:	0b c0       	rjmp	.+22     	; 0x1eac <__vector_9+0x50>
	}
	else if(!task5){
    1e96:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <task5>
    1e9a:	81 11       	cpse	r24, r1
    1e9c:	07 c0       	rjmp	.+14     	; 0x1eac <__vector_9+0x50>
		task5 = true;			//reached loading zone 2 from loading zone 1
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <task5>
		FlagChangeSetpointCompass = true;
    1ea4:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <FlagChangeSetpointCompass>
		BrakeMotor();
    1ea8:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
	}
}
    1eac:	ff 91       	pop	r31
    1eae:	ef 91       	pop	r30
    1eb0:	bf 91       	pop	r27
    1eb2:	af 91       	pop	r26
    1eb4:	9f 91       	pop	r25
    1eb6:	8f 91       	pop	r24
    1eb8:	7f 91       	pop	r23
    1eba:	6f 91       	pop	r22
    1ebc:	5f 91       	pop	r21
    1ebe:	4f 91       	pop	r20
    1ec0:	3f 91       	pop	r19
    1ec2:	2f 91       	pop	r18
    1ec4:	0f 90       	pop	r0
    1ec6:	0b be       	out	0x3b, r0	; 59
    1ec8:	0f 90       	pop	r0
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	0f 90       	pop	r0
    1ece:	1f 90       	pop	r1
    1ed0:	18 95       	reti

00001ed2 <__vector_11>:


/*When Junction on Linetracker Y is detected*/
ISR(PCINT2_vect)
{
    1ed2:	1f 92       	push	r1
    1ed4:	0f 92       	push	r0
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	0f 92       	push	r0
    1eda:	11 24       	eor	r1, r1
    1edc:	0b b6       	in	r0, 0x3b	; 59
    1ede:	0f 92       	push	r0
    1ee0:	2f 93       	push	r18
    1ee2:	3f 93       	push	r19
    1ee4:	4f 93       	push	r20
    1ee6:	5f 93       	push	r21
    1ee8:	6f 93       	push	r22
    1eea:	7f 93       	push	r23
    1eec:	8f 93       	push	r24
    1eee:	9f 93       	push	r25
    1ef0:	af 93       	push	r26
    1ef2:	bf 93       	push	r27
    1ef4:	ef 93       	push	r30
    1ef6:	ff 93       	push	r31
	if(!task2){
    1ef8:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <task2>
    1efc:	81 11       	cpse	r24, r1
    1efe:	06 c0       	rjmp	.+12     	; 0x1f0c <__vector_11+0x3a>
		BrakeMotor();
    1f00:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
		task2 = true;		//reached to loading zone 1
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <task2>
    1f0a:	41 c0       	rjmp	.+130    	; 0x1f8e <__vector_11+0xbc>
	}
	else if(!task3){
    1f0c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <task3>
    1f10:	81 11       	cpse	r24, r1
    1f12:	08 c0       	rjmp	.+16     	; 0x1f24 <__vector_11+0x52>
		task3 = true;		//reached throwing zone 1
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <task3>
		_b_Transmit_once = true;
    1f1a:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_b_Transmit_once>
		BrakeMotor();
    1f1e:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1f22:	35 c0       	rjmp	.+106    	; 0x1f8e <__vector_11+0xbc>
	}
		
	else if(!task4){
    1f24:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task4>
    1f28:	81 11       	cpse	r24, r1
    1f2a:	06 c0       	rjmp	.+12     	; 0x1f38 <__vector_11+0x66>
		task4 = true;		//reached loading zone 1 from throwing zone 1
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <task4>
		 BrakeMotor();
    1f32:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1f36:	2b c0       	rjmp	.+86     	; 0x1f8e <__vector_11+0xbc>
	}
	else if(!task6){
    1f38:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task6>
    1f3c:	81 11       	cpse	r24, r1
    1f3e:	08 c0       	rjmp	.+16     	; 0x1f50 <__vector_11+0x7e>
		task6 = true;		//reached throwing zone 2
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <task6>
		_b_Transmit_once = true;
    1f46:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_b_Transmit_once>
		BrakeMotor();
    1f4a:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1f4e:	1f c0       	rjmp	.+62     	; 0x1f8e <__vector_11+0xbc>
	}
		
	else if(!task7){
    1f50:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task7>
    1f54:	81 11       	cpse	r24, r1
    1f56:	06 c0       	rjmp	.+12     	; 0x1f64 <__vector_11+0x92>
		task7 = true;		//reached loading zone 2 from throwing zone 2
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <task7>
		BrakeMotor();
    1f5e:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1f62:	15 c0       	rjmp	.+42     	; 0x1f8e <__vector_11+0xbc>
	}
	else if(!task8){
    1f64:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <task8>
    1f68:	81 11       	cpse	r24, r1
    1f6a:	08 c0       	rjmp	.+16     	; 0x1f7c <__vector_11+0xaa>
		task8 = true;		//reached throwing zone 3
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <task8>
		_b_Transmit_once = true;
    1f72:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_b_Transmit_once>
		BrakeMotor();
    1f76:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1f7a:	09 c0       	rjmp	.+18     	; 0x1f8e <__vector_11+0xbc>
	}
	else if(!task9){
    1f7c:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <task9>
    1f80:	81 11       	cpse	r24, r1
    1f82:	05 c0       	rjmp	.+10     	; 0x1f8e <__vector_11+0xbc>
		task9 = true;		//reached loading zone 2 from throwing zone 3
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <task9>
		BrakeMotor();
    1f8a:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
	}
}
    1f8e:	ff 91       	pop	r31
    1f90:	ef 91       	pop	r30
    1f92:	bf 91       	pop	r27
    1f94:	af 91       	pop	r26
    1f96:	9f 91       	pop	r25
    1f98:	8f 91       	pop	r24
    1f9a:	7f 91       	pop	r23
    1f9c:	6f 91       	pop	r22
    1f9e:	5f 91       	pop	r21
    1fa0:	4f 91       	pop	r20
    1fa2:	3f 91       	pop	r19
    1fa4:	2f 91       	pop	r18
    1fa6:	0f 90       	pop	r0
    1fa8:	0b be       	out	0x3b, r0	; 59
    1faa:	0f 90       	pop	r0
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	0f 90       	pop	r0
    1fb0:	1f 90       	pop	r1
    1fb2:	18 95       	reti

00001fb4 <_Z16checkJunctionOfYv>:
uint16_t angle_Average = 0;


void checkJunctionOfY(){
	
	if(bit_is_set(PINK,PK0)){
    1fb4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1fb8:	80 ff       	sbrs	r24, 0
    1fba:	04 c0       	rjmp	.+8      	; 0x1fc4 <_Z16checkJunctionOfYv+0x10>
		junctionY = true;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <junctionY>
    1fc2:	08 95       	ret
	}
	else{
		junctionY = false;
    1fc4:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <junctionY>
    1fc8:	08 95       	ret

00001fca <_Z16checkJunctionOfXv>:
	}
	
}

void checkJunctionOfX(){
	if(bit_is_set(PINB,PB4)){
    1fca:	1c 9b       	sbis	0x03, 4	; 3
    1fcc:	04 c0       	rjmp	.+8      	; 0x1fd6 <_Z16checkJunctionOfXv+0xc>
		junctionX = true;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <junctionX>
    1fd4:	08 95       	ret
	}
	else{
		junctionX = false;
    1fd6:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <junctionX>
    1fda:	08 95       	ret

00001fdc <_Z21changeCompassSetpointv>:
	}
}

void changeCompassSetpoint(){
	if(FlagChangeSetpointCompass)
    1fdc:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <FlagChangeSetpointCompass>
    1fe0:	88 23       	and	r24, r24
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <_Z21changeCompassSetpointv+0xa>
    1fe4:	53 c0       	rjmp	.+166    	; 0x208c <_Z21changeCompassSetpointv+0xb0>
	{
		if(junctionX && lineTrackerData == 45 && !junctionY){
    1fe6:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <junctionX>
    1fea:	88 23       	and	r24, r24
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <_Z21changeCompassSetpointv+0x14>
    1fee:	5a c0       	rjmp	.+180    	; 0x20a4 <_Z21changeCompassSetpointv+0xc8>
    1ff0:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <lineTrackerData>
    1ff4:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <lineTrackerData+0x1>
    1ff8:	8d 97       	sbiw	r24, 0x2d	; 45
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <_Z21changeCompassSetpointv+0x22>
    1ffc:	53 c0       	rjmp	.+166    	; 0x20a4 <_Z21changeCompassSetpointv+0xc8>
    1ffe:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <junctionY>
    2002:	81 11       	cpse	r24, r1
    2004:	4f c0       	rjmp	.+158    	; 0x20a4 <_Z21changeCompassSetpointv+0xc8>
			if(FirstData){
    2006:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <FirstData>
    200a:	88 23       	and	r24, r24
    200c:	79 f0       	breq	.+30     	; 0x202c <_Z21changeCompassSetpointv+0x50>
				angle_Min = compass_Angle;
    200e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <compass_Angle>
    2012:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <compass_Angle+0x1>
    2016:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <angle_Min+0x1>
    201a:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <angle_Min>
				angle_Max = compass_Angle;
    201e:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <angle_Max+0x1>
    2022:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <angle_Max>
				FirstData = false;
    2026:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <FirstData>
    202a:	1b c0       	rjmp	.+54     	; 0x2062 <_Z21changeCompassSetpointv+0x86>
			}
			if(compass_Angle > angle_Max)
    202c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <compass_Angle>
    2030:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <compass_Angle+0x1>
    2034:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <angle_Max>
    2038:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <angle_Max+0x1>
    203c:	28 17       	cp	r18, r24
    203e:	39 07       	cpc	r19, r25
    2040:	28 f4       	brcc	.+10     	; 0x204c <_Z21changeCompassSetpointv+0x70>
				angle_Max = compass_Angle;
    2042:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <angle_Max+0x1>
    2046:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <angle_Max>
    204a:	0b c0       	rjmp	.+22     	; 0x2062 <_Z21changeCompassSetpointv+0x86>
			else if(angle_Min > compass_Angle)
    204c:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <angle_Min>
    2050:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <angle_Min+0x1>
    2054:	82 17       	cp	r24, r18
    2056:	93 07       	cpc	r25, r19
    2058:	20 f4       	brcc	.+8      	; 0x2062 <_Z21changeCompassSetpointv+0x86>
				angle_Min = compass_Angle;
    205a:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <angle_Min+0x1>
    205e:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <angle_Min>
			
			angle_Average = (angle_Max + angle_Min)/2;
    2062:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <angle_Max>
    2066:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <angle_Max+0x1>
    206a:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <angle_Min>
    206e:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <angle_Min+0x1>
    2072:	82 0f       	add	r24, r18
    2074:	93 1f       	adc	r25, r19
    2076:	96 95       	lsr	r25
    2078:	87 95       	ror	r24
    207a:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <__data_end+0x1>
    207e:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <__data_end>
			
			compass.SETPOINT = angle_Average;
    2082:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <compass+0xf>
    2086:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <compass+0xe>
    208a:	08 95       	ret
			
		}
 	}
	else if(FlagInitialAngleSetpoint){
    208c:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <FlagInitialAngleSetpoint>
    2090:	88 23       	and	r24, r24
    2092:	41 f0       	breq	.+16     	; 0x20a4 <_Z21changeCompassSetpointv+0xc8>
		 compass.SETPOINT = initialCompassAngle;
    2094:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <initialCompassAngle>
    2098:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <initialCompassAngle+0x1>
    209c:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <compass+0xf>
    20a0:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <compass+0xe>
    20a4:	08 95       	ret

000020a6 <_Z24reactConditionOfLineLeftv>:
}

void reactConditionOfLineLeft(){
	//////////Find the condition when line is left////////
	
	if(movingyback || movingyfront){
    20a6:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <movingyback>
    20aa:	81 11       	cpse	r24, r1
    20ac:	05 c0       	rjmp	.+10     	; 0x20b8 <_Z24reactConditionOfLineLeftv+0x12>
    20ae:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <movingyfront>
    20b2:	99 23       	and	r25, r25
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <_Z24reactConditionOfLineLeftv+0x12>
    20b6:	c3 c0       	rjmp	.+390    	; 0x223e <__stack+0x3f>
		if(lineTrackerData == 0 && previousLinetrackerData == 10 && !junctionY)
    20b8:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <lineTrackerData>
    20bc:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <lineTrackerData+0x1>
    20c0:	21 15       	cp	r18, r1
    20c2:	31 05       	cpc	r19, r1
    20c4:	19 f5       	brne	.+70     	; 0x210c <_Z24reactConditionOfLineLeftv+0x66>
    20c6:	40 91 7f 03 	lds	r20, 0x037F	; 0x80037f <previousLinetrackerData>
    20ca:	50 91 80 03 	lds	r21, 0x0380	; 0x800380 <previousLinetrackerData+0x1>
    20ce:	4a 30       	cpi	r20, 0x0A	; 10
    20d0:	51 05       	cpc	r21, r1
    20d2:	61 f4       	brne	.+24     	; 0x20ec <_Z24reactConditionOfLineLeftv+0x46>
    20d4:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <junctionY>
    20d8:	91 11       	cpse	r25, r1
    20da:	28 c0       	rjmp	.+80     	; 0x212c <_Z24reactConditionOfLineLeftv+0x86>
		{
			ltY.leftedgeleft = true;
    20dc:	ed e3       	ldi	r30, 0x3D	; 61
    20de:	f3 e0       	ldi	r31, 0x03	; 3
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	90 87       	std	Z+8, r25	; 0x08
			ltY.rightedgeleft = false;
    20e4:	11 86       	std	Z+9, r1	; 0x09
			lineMeet = false;
    20e6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <lineMeet>
    20ea:	90 c0       	rjmp	.+288    	; 0x220c <__stack+0xd>
		}
		else if(lineTrackerData == 0 && previousLinetrackerData == 80 && !junctionY)
    20ec:	40 35       	cpi	r20, 0x50	; 80
    20ee:	51 05       	cpc	r21, r1
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <_Z24reactConditionOfLineLeftv+0x4e>
    20f2:	96 c0       	rjmp	.+300    	; 0x2220 <__stack+0x21>
    20f4:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <junctionY>
    20f8:	91 11       	cpse	r25, r1
    20fa:	92 c0       	rjmp	.+292    	; 0x2220 <__stack+0x21>
		{
			ltY.rightedgeleft = true;
    20fc:	ed e3       	ldi	r30, 0x3D	; 61
    20fe:	f3 e0       	ldi	r31, 0x03	; 3
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	91 87       	std	Z+9, r25	; 0x09
			ltY.leftedgeleft = false;
    2104:	10 86       	std	Z+8, r1	; 0x08
			lineMeet = false;
    2106:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <lineMeet>
    210a:	7b c0       	rjmp	.+246    	; 0x2202 <__stack+0x3>
		}
		/////////////////////////////////////////////////////
		
		////If line left by linetracker find when line is meet
		if(ltY.rightedgeleft && lineTrackerData == 80){
    210c:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <ltY+0x9>
    2110:	99 23       	and	r25, r25
    2112:	61 f0       	breq	.+24     	; 0x212c <_Z24reactConditionOfLineLeftv+0x86>
    2114:	20 35       	cpi	r18, 0x50	; 80
    2116:	31 05       	cpc	r19, r1
    2118:	09 f0       	breq	.+2      	; 0x211c <_Z24reactConditionOfLineLeftv+0x76>
    211a:	87 c0       	rjmp	.+270    	; 0x222a <__stack+0x2b>
			lineMeet = true;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <lineMeet>
			ltY.rightedgeleft = false;
    2122:	ed e3       	ldi	r30, 0x3D	; 61
    2124:	f3 e0       	ldi	r31, 0x03	; 3
    2126:	11 86       	std	Z+9, r1	; 0x09
			ltY.leftedgeleft = false;
    2128:	10 86       	std	Z+8, r1	; 0x08
    212a:	08 95       	ret
		}
		else if(ltY.leftedgeleft && lineTrackerData == 10){
    212c:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ltY+0x8>
    2130:	99 23       	and	r25, r25
    2132:	09 f4       	brne	.+2      	; 0x2136 <_Z24reactConditionOfLineLeftv+0x90>
    2134:	66 c0       	rjmp	.+204    	; 0x2202 <__stack+0x3>
    2136:	2a 30       	cpi	r18, 0x0A	; 10
    2138:	31 05       	cpc	r19, r1
    213a:	09 f0       	breq	.+2      	; 0x213e <_Z24reactConditionOfLineLeftv+0x98>
    213c:	67 c0       	rjmp	.+206    	; 0x220c <__stack+0xd>
			lineMeet = true;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <lineMeet>
			ltY.leftedgeleft = false;
    2144:	ed e3       	ldi	r30, 0x3D	; 61
    2146:	f3 e0       	ldi	r31, 0x03	; 3
    2148:	10 86       	std	Z+8, r1	; 0x08
			ltY.rightedgeleft = false;
    214a:	11 86       	std	Z+9, r1	; 0x09
    214c:	08 95       	ret
		}
		///////////////////////////////////////////////////////
		
		////////// if edge is left and junction is detected //////
		if((ltY.leftedgeleft || ltY.rightedgeleft) && junctionY){
			if(movingyfront){
    214e:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <movingyfront>
    2152:	99 23       	and	r25, r25
    2154:	59 f0       	breq	.+22     	; 0x216c <_Z24reactConditionOfLineLeftv+0xc6>
				velocity_robot[0] = 0;		//x
    2156:	e7 ea       	ldi	r30, 0xA7	; 167
    2158:	f3 e0       	ldi	r31, 0x03	; 3
    215a:	11 82       	std	Z+1, r1	; 0x01
    215c:	10 82       	st	Z, r1
				velocity_robot[1] = 40;		//y
    215e:	88 e2       	ldi	r24, 0x28	; 40
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	93 83       	std	Z+3, r25	; 0x03
    2164:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    2166:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
    216a:	08 95       	ret
			}
			else if(movingyback){
    216c:	88 23       	and	r24, r24
    216e:	09 f4       	brne	.+2      	; 0x2172 <_Z24reactConditionOfLineLeftv+0xcc>
    2170:	66 c0       	rjmp	.+204    	; 0x223e <__stack+0x3f>
				velocity_robot[0] = 0;
    2172:	e7 ea       	ldi	r30, 0xA7	; 167
    2174:	f3 e0       	ldi	r31, 0x03	; 3
    2176:	11 82       	std	Z+1, r1	; 0x01
    2178:	10 82       	st	Z, r1
				velocity_robot[1] = -40;
    217a:	88 ed       	ldi	r24, 0xD8	; 216
    217c:	9f ef       	ldi	r25, 0xFF	; 255
    217e:	93 83       	std	Z+3, r25	; 0x03
    2180:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    2182:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
    2186:	08 95       	ret
			}
		}
		/////////////////////////////////////////////////////////
		else if(ltY.leftedgeleft){
			if(movingyfront){
    2188:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <movingyfront>
    218c:	99 23       	and	r25, r25
    218e:	69 f0       	breq	.+26     	; 0x21aa <_Z24reactConditionOfLineLeftv+0x104>
				velocity_robot[0] = -40;
    2190:	e7 ea       	ldi	r30, 0xA7	; 167
    2192:	f3 e0       	ldi	r31, 0x03	; 3
    2194:	88 ed       	ldi	r24, 0xD8	; 216
    2196:	9f ef       	ldi	r25, 0xFF	; 255
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
				velocity_robot[1] = 10;
    219c:	8a e0       	ldi	r24, 0x0A	; 10
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	93 83       	std	Z+3, r25	; 0x03
    21a2:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    21a4:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
    21a8:	08 95       	ret
			}
			else if(movingyback){
    21aa:	88 23       	and	r24, r24
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <_Z24reactConditionOfLineLeftv+0x10a>
    21ae:	47 c0       	rjmp	.+142    	; 0x223e <__stack+0x3f>
				velocity_robot[0] = -40;
    21b0:	e7 ea       	ldi	r30, 0xA7	; 167
    21b2:	f3 e0       	ldi	r31, 0x03	; 3
    21b4:	88 ed       	ldi	r24, 0xD8	; 216
    21b6:	9f ef       	ldi	r25, 0xFF	; 255
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	80 83       	st	Z, r24
				velocity_robot[1] = -10;
    21bc:	86 ef       	ldi	r24, 0xF6	; 246
    21be:	9f ef       	ldi	r25, 0xFF	; 255
    21c0:	93 83       	std	Z+3, r25	; 0x03
    21c2:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    21c4:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
    21c8:	08 95       	ret
			}
		}
		else if(ltY.rightedgeleft ){
			if(movingyfront){
				velocity_robot[0] = 40;
    21ca:	e7 ea       	ldi	r30, 0xA7	; 167
    21cc:	f3 e0       	ldi	r31, 0x03	; 3
    21ce:	88 e2       	ldi	r24, 0x28	; 40
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	91 83       	std	Z+1, r25	; 0x01
    21d4:	80 83       	st	Z, r24
				velocity_robot[1] = 10;
    21d6:	8a e0       	ldi	r24, 0x0A	; 10
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	93 83       	std	Z+3, r25	; 0x03
    21dc:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    21de:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
    21e2:	08 95       	ret
			}
			else if(movingyback){
    21e4:	88 23       	and	r24, r24
    21e6:	59 f1       	breq	.+86     	; 0x223e <__stack+0x3f>
				velocity_robot[0] = 40;
    21e8:	e7 ea       	ldi	r30, 0xA7	; 167
    21ea:	f3 e0       	ldi	r31, 0x03	; 3
    21ec:	88 e2       	ldi	r24, 0x28	; 40
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
				velocity_robot[1] = -10;
    21f4:	86 ef       	ldi	r24, 0xF6	; 246
    21f6:	9f ef       	ldi	r25, 0xFF	; 255
    21f8:	93 83       	std	Z+3, r25	; 0x03
    21fa:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    21fc:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
			}
		}
	}
}
    2200:	08 95       	ret
			ltY.rightedgeleft = false;
		}
		///////////////////////////////////////////////////////
		
		////////// if edge is left and junction is detected //////
		if((ltY.leftedgeleft || ltY.rightedgeleft) && junctionY){
    2202:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <ltY+0x9>
    2206:	91 11       	cpse	r25, r1
    2208:	06 c0       	rjmp	.+12     	; 0x2216 <__stack+0x17>
    220a:	08 95       	ret
    220c:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <junctionY>
    2210:	91 11       	cpse	r25, r1
    2212:	9d cf       	rjmp	.-198    	; 0x214e <_Z24reactConditionOfLineLeftv+0xa8>
    2214:	b9 cf       	rjmp	.-142    	; 0x2188 <_Z24reactConditionOfLineLeftv+0xe2>
    2216:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <junctionY>
    221a:	99 23       	and	r25, r25
    221c:	59 f0       	breq	.+22     	; 0x2234 <__stack+0x35>
    221e:	97 cf       	rjmp	.-210    	; 0x214e <_Z24reactConditionOfLineLeftv+0xa8>
		if(ltY.rightedgeleft && lineTrackerData == 80){
			lineMeet = true;
			ltY.rightedgeleft = false;
			ltY.leftedgeleft = false;
		}
		else if(ltY.leftedgeleft && lineTrackerData == 10){
    2220:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ltY+0x8>
    2224:	99 23       	and	r25, r25
    2226:	69 f3       	breq	.-38     	; 0x2202 <__stack+0x3>
    2228:	f1 cf       	rjmp	.-30     	; 0x220c <__stack+0xd>
    222a:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ltY+0x8>
    222e:	99 23       	and	r25, r25
    2230:	91 f3       	breq	.-28     	; 0x2216 <__stack+0x17>
    2232:	81 cf       	rjmp	.-254    	; 0x2136 <_Z24reactConditionOfLineLeftv+0x90>
				velocity_robot[1] = -10;
				calculateCompassPID();
			}
		}
		else if(ltY.rightedgeleft ){
			if(movingyfront){
    2234:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <movingyfront>
    2238:	99 23       	and	r25, r25
    223a:	a1 f2       	breq	.-88     	; 0x21e4 <_Z24reactConditionOfLineLeftv+0x13e>
    223c:	c6 cf       	rjmp	.-116    	; 0x21ca <_Z24reactConditionOfLineLeftv+0x124>
    223e:	08 95       	ret

00002240 <main>:
}

int main(void)
{
	////////////SET COMMUNICATION PINS AS INPUT AND PULL UP////////
	INPUT(SHUTTLECOCKPIN);
    2240:	ea e0       	ldi	r30, 0x0A	; 10
    2242:	f1 e0       	ldi	r31, 0x01	; 1
    2244:	80 81       	ld	r24, Z
    2246:	8f 7e       	andi	r24, 0xEF	; 239
    2248:	80 83       	st	Z, r24
	INPUT(ZONEPIN);
    224a:	80 81       	ld	r24, Z
    224c:	8f 7b       	andi	r24, 0xBF	; 191
    224e:	80 83       	st	Z, r24
 	SET(SHUTTLECOCKPIN);
    2250:	eb e0       	ldi	r30, 0x0B	; 11
    2252:	f1 e0       	ldi	r31, 0x01	; 1
    2254:	80 81       	ld	r24, Z
    2256:	80 61       	ori	r24, 0x10	; 16
    2258:	80 83       	st	Z, r24
 	SET(ZONEPIN);
    225a:	80 81       	ld	r24, Z
    225c:	80 64       	ori	r24, 0x40	; 64
    225e:	80 83       	st	Z, r24
	///////PULL DOWN RACK PIN 
	INPUT(RACKPIN);
    2260:	85 98       	cbi	0x10, 5	; 16
	CLEAR(RACKPIN);
    2262:	8d 98       	cbi	0x11, 5	; 17
	///SET PK1 AS OUTPUT TO SEND SIGNAL TO SLAVE TO BRAKE MOTOR 
	DDRK |= (1<<PK1);
    2264:	e7 e0       	ldi	r30, 0x07	; 7
    2266:	f1 e0       	ldi	r31, 0x01	; 1
    2268:	80 81       	ld	r24, Z
    226a:	82 60       	ori	r24, 0x02	; 2
    226c:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK1); 
    226e:	e8 e0       	ldi	r30, 0x08	; 8
    2270:	f1 e0       	ldi	r31, 0x01	; 1
    2272:	80 81       	ld	r24, Z
    2274:	8d 7f       	andi	r24, 0xFD	; 253
    2276:	80 83       	st	Z, r24
	/// INITIALIZE ALL THE UART
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    2278:	87 e6       	ldi	r24, 0x67	; 103
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	15 d1       	rcall	.+554    	; 0x24a8 <_Z10uart0_initj>
	uart2_init(UART_BAUD_SELECT(38400,F_CPU));
    227e:	89 e1       	ldi	r24, 0x19	; 25
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	08 d2       	rcall	.+1040   	; 0x2694 <_Z10uart2_initj>
	uart3_init(UART_BAUD_SELECT(38400,F_CPU));
    2284:	89 e1       	ldi	r24, 0x19	; 25
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	90 d2       	rcall	.+1312   	; 0x27aa <_Z10uart3_initj>
	//INITIALIZE EVERYTHING ELSE
 	initializeAll();
    228a:	0e 94 27 06 	call	0xc4e	; 0xc4e <_Z13initializeAllv>
// 			uart3_puts("\t");
// 			uart3_putint(get_Angle());
// 			uart3_puts("\r\n\n");
// 		}
		
		checkJunctionOfY();
    228e:	78 94       	sei
    2290:	91 de       	rcall	.-734    	; 0x1fb4 <_Z16checkJunctionOfYv>
		checkJunctionOfX();
    2292:	9b de       	rcall	.-714    	; 0x1fca <_Z16checkJunctionOfXv>
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z19getLineTrackerYdatav>
		//get linetracker data
		lineTrackerData = getLineTrackerYdata();
    2298:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <lineTrackerData+0x1>
    229c:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <lineTrackerData>
    22a0:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9get_Anglev>
		//get compass data
		compass_Angle = get_Angle();
    22a4:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <compass_Angle+0x1>
		//Change compass setpoint if necessary
		changeCompassSetpoint();
    22a8:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <compass_Angle>
		//call the gameplay function
		gorockthegamefield();
    22ac:	97 de       	rcall	.-722    	; 0x1fdc <_Z21changeCompassSetpointv>
    22ae:	d9 d8       	rcall	.-3662   	; 0x1462 <_Z18gorockthegamefieldv>
		//check for line left condition and react to it
		reactConditionOfLineLeft();
    22b0:	fa de       	rcall	.-524    	; 0x20a6 <_Z24reactConditionOfLineLeftv>
    22b2:	0e 94 5f 04 	call	0x8be	; 0x8be <_Z12calculatevelv>
		//calculate velocity of each motor and send to slave
		calculatevel();
    22b6:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <_ZL16linetracker_data>
		//set previous line tracker data
		previousLinetrackerData = linetracker_data;
    22ba:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <_ZL16linetracker_data+0x1>
    22be:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <previousLinetrackerData+0x1>
    22c2:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <previousLinetrackerData>
    22c6:	e4 cf       	rjmp	.-56     	; 0x2290 <main+0x50>

000022c8 <_GLOBAL__sub_I_compassPID>:
    22c8:	ee e5       	ldi	r30, 0x5E	; 94
};
////////////////////////////////////////////////////////////////////////////////


struct bodyPid{ 
	bodyPid():FirstData(true){};
    22ca:	f3 e0       	ldi	r31, 0x03	; 3
    22cc:	10 86       	std	Z+8, r1	; 0x08
    22ce:	11 86       	std	Z+9, r1	; 0x09
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	80 8b       	std	Z+16, r24	; 0x10
    22d4:	ed e3       	ldi	r30, 0x3D	; 61
    22d6:	f3 e0       	ldi	r31, 0x03	; 3
    22d8:	10 86       	std	Z+8, r1	; 0x08
    22da:	11 86       	std	Z+9, r1	; 0x09
    22dc:	80 8b       	std	Z+16, r24	; 0x10
    22de:	ec e1       	ldi	r30, 0x1C	; 28
    22e0:	f3 e0       	ldi	r31, 0x03	; 3
    22e2:	10 86       	std	Z+8, r1	; 0x08
    22e4:	11 86       	std	Z+9, r1	; 0x09
    22e6:	80 8b       	std	Z+16, r24	; 0x10
    22e8:	eb ef       	ldi	r30, 0xFB	; 251
    22ea:	f2 e0       	ldi	r31, 0x02	; 2
    22ec:	10 86       	std	Z+8, r1	; 0x08
    22ee:	11 86       	std	Z+9, r1	; 0x09
    22f0:	80 8b       	std	Z+16, r24	; 0x10
    22f2:	ea ed       	ldi	r30, 0xDA	; 218
    22f4:	f2 e0       	ldi	r31, 0x02	; 2
    22f6:	10 86       	std	Z+8, r1	; 0x08
    22f8:	11 86       	std	Z+9, r1	; 0x09
    22fa:	80 8b       	std	Z+16, r24	; 0x10
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    22fc:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    2300:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
			Init_encoder_interrupt();
    2304:	8c eb       	ldi	r24, 0xBC	; 188
    2306:	92 e0       	ldi	r25, 0x02	; 2
    2308:	0e 94 bc 00 	call	0x178	; 0x178 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    230c:	8c eb       	ldi	r24, 0xBC	; 188
    230e:	92 e0       	ldi	r25, 0x02	; 2
    2310:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    2314:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    2318:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
			Init_encoder_interrupt();
    231c:	84 eb       	ldi	r24, 0xB4	; 180
    231e:	92 e0       	ldi	r25, 0x02	; 2
    2320:	0e 94 bc 00 	call	0x178	; 0x178 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    2324:	84 eb       	ldi	r24, 0xB4	; 180
    2326:	92 e0       	ldi	r25, 0x02	; 2
    2328:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_ZN7encoder10Init_timerEv>
    232c:	08 95       	ret

0000232e <_Z8i2c_initv>:
uint8_t i2c_write_array(uint8_t *data, uint8_t count){
	while(count--){
		if(i2c_write(*data++) != 0)		return count;
	}
	return 0;
}
    232e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2332:	88 e4       	ldi	r24, 0x48	; 72
    2334:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2338:	08 95       	ret

0000233a <_Z9i2c_starth>:
    233a:	94 ea       	ldi	r25, 0xA4	; 164
    233c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2340:	ec eb       	ldi	r30, 0xBC	; 188
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	90 81       	ld	r25, Z
    2346:	99 23       	and	r25, r25
    2348:	ec f7       	brge	.-6      	; 0x2344 <_Z9i2c_starth+0xa>
    234a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    234e:	98 7f       	andi	r25, 0xF8	; 248
    2350:	98 30       	cpi	r25, 0x08	; 8
    2352:	11 f0       	breq	.+4      	; 0x2358 <_Z9i2c_starth+0x1e>
    2354:	90 31       	cpi	r25, 0x10	; 16
    2356:	a1 f4       	brne	.+40     	; 0x2380 <_Z9i2c_starth+0x46>
    2358:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    235c:	84 e8       	ldi	r24, 0x84	; 132
    235e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2362:	ec eb       	ldi	r30, 0xBC	; 188
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	88 23       	and	r24, r24
    236a:	ec f7       	brge	.-6      	; 0x2366 <_Z9i2c_starth+0x2c>
    236c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2370:	98 7f       	andi	r25, 0xF8	; 248
    2372:	98 31       	cpi	r25, 0x18	; 24
    2374:	39 f0       	breq	.+14     	; 0x2384 <_Z9i2c_starth+0x4a>
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 34       	cpi	r25, 0x40	; 64
    237a:	29 f4       	brne	.+10     	; 0x2386 <_Z9i2c_starth+0x4c>
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	08 95       	ret
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	08 95       	ret
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	08 95       	ret

00002388 <_Z13i2c_rep_starth>:
    2388:	d8 cf       	rjmp	.-80     	; 0x233a <_Z9i2c_starth>
    238a:	08 95       	ret

0000238c <_Z8i2c_stopv>:
    238c:	84 e9       	ldi	r24, 0x94	; 148
    238e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2392:	ec eb       	ldi	r30, 0xBC	; 188
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	84 fd       	sbrc	r24, 4
    239a:	fd cf       	rjmp	.-6      	; 0x2396 <_Z8i2c_stopv+0xa>
    239c:	08 95       	ret

0000239e <_Z9i2c_writeh>:
    239e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    23a2:	84 e8       	ldi	r24, 0x84	; 132
    23a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    23a8:	ec eb       	ldi	r30, 0xBC	; 188
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	88 23       	and	r24, r24
    23b0:	ec f7       	brge	.-6      	; 0x23ac <_Z9i2c_writeh+0xe>
    23b2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    23b6:	98 7f       	andi	r25, 0xF8	; 248
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	98 32       	cpi	r25, 0x28	; 40
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <_Z9i2c_writeh+0x22>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	08 95       	ret

000023c2 <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    23c2:	84 ec       	ldi	r24, 0xC4	; 196
    23c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));    
    23c8:	ec eb       	ldi	r30, 0xBC	; 188
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	88 23       	and	r24, r24
    23d0:	ec f7       	brge	.-6      	; 0x23cc <_Z11i2c_readAckv+0xa>

    return TWDR;
    23d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

}/* i2c_readAck */
    23d6:	08 95       	ret

000023d8 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    23d8:	84 e8       	ldi	r24, 0x84	; 132
    23da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
    23de:	ec eb       	ldi	r30, 0xBC	; 188
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	88 23       	and	r24, r24
    23e6:	ec f7       	brge	.-6      	; 0x23e2 <_Z11i2c_readNakv+0xa>
	
    return TWDR;
    23e8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

    23ec:	08 95       	ret

000023ee <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    23ee:	1f 92       	push	r1
    23f0:	0f 92       	push	r0
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	0f 92       	push	r0
    23f6:	11 24       	eor	r1, r1
    23f8:	0b b6       	in	r0, 0x3b	; 59
    23fa:	0f 92       	push	r0
    23fc:	2f 93       	push	r18
    23fe:	8f 93       	push	r24
    2400:	9f 93       	push	r25
    2402:	ef 93       	push	r30
    2404:	ff 93       	push	r31
    2406:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    240a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    240e:	88 71       	andi	r24, 0x18	; 24
    2410:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <_ZL12UART0_RxHead>
    2414:	ef 5f       	subi	r30, 0xFF	; 255
    2416:	ef 71       	andi	r30, 0x1F	; 31
    2418:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <_ZL12UART0_RxTail>
    241c:	e9 17       	cp	r30, r25
    241e:	39 f0       	breq	.+14     	; 0x242e <__vector_25+0x40>
    2420:	e0 93 93 04 	sts	0x0493, r30	; 0x800493 <_ZL12UART0_RxHead>
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	ea 56       	subi	r30, 0x6A	; 106
    2428:	fb 4f       	sbci	r31, 0xFB	; 251
    242a:	20 83       	st	Z, r18
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <__vector_25+0x42>
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZL17UART0_LastRxError>
    2434:	ff 91       	pop	r31
    2436:	ef 91       	pop	r30
    2438:	9f 91       	pop	r25
    243a:	8f 91       	pop	r24
    243c:	2f 91       	pop	r18
    243e:	0f 90       	pop	r0
    2440:	0b be       	out	0x3b, r0	; 59
    2442:	0f 90       	pop	r0
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	0f 90       	pop	r0
    2448:	1f 90       	pop	r1
    244a:	18 95       	reti

0000244c <__vector_26>:
    244c:	1f 92       	push	r1
    244e:	0f 92       	push	r0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	0f 92       	push	r0
    2454:	11 24       	eor	r1, r1
    2456:	0b b6       	in	r0, 0x3b	; 59
    2458:	0f 92       	push	r0
    245a:	8f 93       	push	r24
    245c:	9f 93       	push	r25
    245e:	ef 93       	push	r30
    2460:	ff 93       	push	r31
    2462:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <_ZL12UART0_TxHead>
    2466:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZL12UART0_TxTail>
    246a:	98 17       	cp	r25, r24
    246c:	69 f0       	breq	.+26     	; 0x2488 <__vector_26+0x3c>
    246e:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <_ZL12UART0_TxTail>
    2472:	ef 5f       	subi	r30, 0xFF	; 255
    2474:	ef 71       	andi	r30, 0x1F	; 31
    2476:	e0 93 94 04 	sts	0x0494, r30	; 0x800494 <_ZL12UART0_TxTail>
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	ea 54       	subi	r30, 0x4A	; 74
    247e:	fb 4f       	sbci	r31, 0xFB	; 251
    2480:	80 81       	ld	r24, Z
    2482:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2486:	05 c0       	rjmp	.+10     	; 0x2492 <__vector_26+0x46>
    2488:	e1 ec       	ldi	r30, 0xC1	; 193
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	8f 7d       	andi	r24, 0xDF	; 223
    2490:	80 83       	st	Z, r24
    2492:	ff 91       	pop	r31
    2494:	ef 91       	pop	r30
    2496:	9f 91       	pop	r25
    2498:	8f 91       	pop	r24
    249a:	0f 90       	pop	r0
    249c:	0b be       	out	0x3b, r0	; 59
    249e:	0f 90       	pop	r0
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	0f 90       	pop	r0
    24a4:	1f 90       	pop	r1
    24a6:	18 95       	reti

000024a8 <_Z10uart0_initj>:
    24a8:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZL12UART0_TxHead>
    24ac:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZL12UART0_TxTail>
    24b0:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZL12UART0_RxHead>
    24b4:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <_ZL12UART0_RxTail>
    24b8:	99 23       	and	r25, r25
    24ba:	24 f4       	brge	.+8      	; 0x24c4 <_Z10uart0_initj+0x1c>
    24bc:	22 e0       	ldi	r18, 0x02	; 2
    24be:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    24c2:	9f 77       	andi	r25, 0x7F	; 127
    24c4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    24c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    24cc:	88 e9       	ldi	r24, 0x98	; 152
    24ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    24d2:	86 e0       	ldi	r24, 0x06	; 6
    24d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    24d8:	08 95       	ret

000024da <_Z10uart0_putch>:
    24da:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <_ZL12UART0_TxHead>
    24de:	2f 5f       	subi	r18, 0xFF	; 255
    24e0:	2f 71       	andi	r18, 0x1F	; 31
    24e2:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <_ZL12UART0_TxTail>
    24e6:	29 17       	cp	r18, r25
    24e8:	e1 f3       	breq	.-8      	; 0x24e2 <_Z10uart0_putch+0x8>
    24ea:	e2 2f       	mov	r30, r18
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	ea 54       	subi	r30, 0x4A	; 74
    24f0:	fb 4f       	sbci	r31, 0xFB	; 251
    24f2:	80 83       	st	Z, r24
    24f4:	20 93 95 04 	sts	0x0495, r18	; 0x800495 <_ZL12UART0_TxHead>
    24f8:	e1 ec       	ldi	r30, 0xC1	; 193
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	80 62       	ori	r24, 0x20	; 32
    2500:	80 83       	st	Z, r24
    2502:	08 95       	ret

00002504 <_Z10uart0_putsPKc>:
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	ec 01       	movw	r28, r24
    250a:	88 81       	ld	r24, Y
    250c:	88 23       	and	r24, r24
    250e:	29 f0       	breq	.+10     	; 0x251a <_Z10uart0_putsPKc+0x16>
    2510:	21 96       	adiw	r28, 0x01	; 1
    2512:	e3 df       	rcall	.-58     	; 0x24da <_Z10uart0_putch>
    2514:	89 91       	ld	r24, Y+
    2516:	81 11       	cpse	r24, r1
    2518:	fc cf       	rjmp	.-8      	; 0x2512 <_Z10uart0_putsPKc+0xe>
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	08 95       	ret

00002520 <__vector_36>:
    2520:	1f 92       	push	r1
    2522:	0f 92       	push	r0
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	0f 92       	push	r0
    2528:	11 24       	eor	r1, r1
    252a:	0b b6       	in	r0, 0x3b	; 59
    252c:	0f 92       	push	r0
    252e:	2f 93       	push	r18
    2530:	8f 93       	push	r24
    2532:	9f 93       	push	r25
    2534:	ef 93       	push	r30
    2536:	ff 93       	push	r31
    2538:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    253c:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2540:	88 71       	andi	r24, 0x18	; 24
    2542:	e0 91 4e 04 	lds	r30, 0x044E	; 0x80044e <_ZL12UART1_RxHead>
    2546:	ef 5f       	subi	r30, 0xFF	; 255
    2548:	ef 71       	andi	r30, 0x1F	; 31
    254a:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <_ZL12UART1_RxTail>
    254e:	e9 17       	cp	r30, r25
    2550:	39 f0       	breq	.+14     	; 0x2560 <__vector_36+0x40>
    2552:	e0 93 4e 04 	sts	0x044E, r30	; 0x80044e <_ZL12UART1_RxHead>
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	ef 5a       	subi	r30, 0xAF	; 175
    255a:	fb 4f       	sbci	r31, 0xFB	; 251
    255c:	20 83       	st	Z, r18
    255e:	01 c0       	rjmp	.+2      	; 0x2562 <__vector_36+0x42>
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZL17UART1_LastRxError>
    2566:	ff 91       	pop	r31
    2568:	ef 91       	pop	r30
    256a:	9f 91       	pop	r25
    256c:	8f 91       	pop	r24
    256e:	2f 91       	pop	r18
    2570:	0f 90       	pop	r0
    2572:	0b be       	out	0x3b, r0	; 59
    2574:	0f 90       	pop	r0
    2576:	0f be       	out	0x3f, r0	; 63
    2578:	0f 90       	pop	r0
    257a:	1f 90       	pop	r1
    257c:	18 95       	reti

0000257e <__vector_37>:
    257e:	1f 92       	push	r1
    2580:	0f 92       	push	r0
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	0b b6       	in	r0, 0x3b	; 59
    258a:	0f 92       	push	r0
    258c:	8f 93       	push	r24
    258e:	9f 93       	push	r25
    2590:	ef 93       	push	r30
    2592:	ff 93       	push	r31
    2594:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZL12UART1_TxHead>
    2598:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZL12UART1_TxTail>
    259c:	98 17       	cp	r25, r24
    259e:	69 f0       	breq	.+26     	; 0x25ba <__vector_37+0x3c>
    25a0:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <_ZL12UART1_TxTail>
    25a4:	ef 5f       	subi	r30, 0xFF	; 255
    25a6:	ef 71       	andi	r30, 0x1F	; 31
    25a8:	e0 93 4f 04 	sts	0x044F, r30	; 0x80044f <_ZL12UART1_TxTail>
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	ef 58       	subi	r30, 0x8F	; 143
    25b0:	fb 4f       	sbci	r31, 0xFB	; 251
    25b2:	80 81       	ld	r24, Z
    25b4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    25b8:	05 c0       	rjmp	.+10     	; 0x25c4 <__vector_37+0x46>
    25ba:	e9 ec       	ldi	r30, 0xC9	; 201
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	8f 7d       	andi	r24, 0xDF	; 223
    25c2:	80 83       	st	Z, r24
    25c4:	ff 91       	pop	r31
    25c6:	ef 91       	pop	r30
    25c8:	9f 91       	pop	r25
    25ca:	8f 91       	pop	r24
    25cc:	0f 90       	pop	r0
    25ce:	0b be       	out	0x3b, r0	; 59
    25d0:	0f 90       	pop	r0
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	0f 90       	pop	r0
    25d6:	1f 90       	pop	r1
    25d8:	18 95       	reti

000025da <__vector_51>:
    25da:	1f 92       	push	r1
    25dc:	0f 92       	push	r0
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	0f 92       	push	r0
    25e2:	11 24       	eor	r1, r1
    25e4:	0b b6       	in	r0, 0x3b	; 59
    25e6:	0f 92       	push	r0
    25e8:	2f 93       	push	r18
    25ea:	8f 93       	push	r24
    25ec:	9f 93       	push	r25
    25ee:	ef 93       	push	r30
    25f0:	ff 93       	push	r31
    25f2:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    25f6:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    25fa:	88 71       	andi	r24, 0x18	; 24
    25fc:	e0 91 09 04 	lds	r30, 0x0409	; 0x800409 <_ZL12UART2_RxHead>
    2600:	ef 5f       	subi	r30, 0xFF	; 255
    2602:	ef 71       	andi	r30, 0x1F	; 31
    2604:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_ZL12UART2_RxTail>
    2608:	e9 17       	cp	r30, r25
    260a:	39 f0       	breq	.+14     	; 0x261a <__vector_51+0x40>
    260c:	e0 93 09 04 	sts	0x0409, r30	; 0x800409 <_ZL12UART2_RxHead>
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	e4 5f       	subi	r30, 0xF4	; 244
    2614:	fb 4f       	sbci	r31, 0xFB	; 251
    2616:	20 83       	st	Z, r18
    2618:	01 c0       	rjmp	.+2      	; 0x261c <__vector_51+0x42>
    261a:	82 e0       	ldi	r24, 0x02	; 2
    261c:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <_ZL17UART2_LastRxError>
    2620:	ff 91       	pop	r31
    2622:	ef 91       	pop	r30
    2624:	9f 91       	pop	r25
    2626:	8f 91       	pop	r24
    2628:	2f 91       	pop	r18
    262a:	0f 90       	pop	r0
    262c:	0b be       	out	0x3b, r0	; 59
    262e:	0f 90       	pop	r0
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	0f 90       	pop	r0
    2634:	1f 90       	pop	r1
    2636:	18 95       	reti

00002638 <__vector_52>:
    2638:	1f 92       	push	r1
    263a:	0f 92       	push	r0
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	0f 92       	push	r0
    2640:	11 24       	eor	r1, r1
    2642:	0b b6       	in	r0, 0x3b	; 59
    2644:	0f 92       	push	r0
    2646:	8f 93       	push	r24
    2648:	9f 93       	push	r25
    264a:	ef 93       	push	r30
    264c:	ff 93       	push	r31
    264e:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <_ZL12UART2_TxHead>
    2652:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZL12UART2_TxTail>
    2656:	98 17       	cp	r25, r24
    2658:	69 f0       	breq	.+26     	; 0x2674 <__vector_52+0x3c>
    265a:	e0 91 0a 04 	lds	r30, 0x040A	; 0x80040a <_ZL12UART2_TxTail>
    265e:	ef 5f       	subi	r30, 0xFF	; 255
    2660:	ef 71       	andi	r30, 0x1F	; 31
    2662:	e0 93 0a 04 	sts	0x040A, r30	; 0x80040a <_ZL12UART2_TxTail>
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	e4 5d       	subi	r30, 0xD4	; 212
    266a:	fb 4f       	sbci	r31, 0xFB	; 251
    266c:	80 81       	ld	r24, Z
    266e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2672:	05 c0       	rjmp	.+10     	; 0x267e <__vector_52+0x46>
    2674:	e1 ed       	ldi	r30, 0xD1	; 209
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	8f 7d       	andi	r24, 0xDF	; 223
    267c:	80 83       	st	Z, r24
    267e:	ff 91       	pop	r31
    2680:	ef 91       	pop	r30
    2682:	9f 91       	pop	r25
    2684:	8f 91       	pop	r24
    2686:	0f 90       	pop	r0
    2688:	0b be       	out	0x3b, r0	; 59
    268a:	0f 90       	pop	r0
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	0f 90       	pop	r0
    2690:	1f 90       	pop	r1
    2692:	18 95       	reti

00002694 <_Z10uart2_initj>:
    2694:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <_ZL12UART2_TxHead>
    2698:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_ZL12UART2_TxTail>
    269c:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_ZL12UART2_RxHead>
    26a0:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_ZL12UART2_RxTail>
    26a4:	99 23       	and	r25, r25
    26a6:	24 f4       	brge	.+8      	; 0x26b0 <_Z10uart2_initj+0x1c>
    26a8:	22 e0       	ldi	r18, 0x02	; 2
    26aa:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    26ae:	9f 77       	andi	r25, 0x7F	; 127
    26b0:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    26b4:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    26b8:	88 e9       	ldi	r24, 0x98	; 152
    26ba:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    26be:	86 e0       	ldi	r24, 0x06	; 6
    26c0:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    26c4:	08 95       	ret

000026c6 <_Z10uart2_putch>:
    26c6:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <_ZL12UART2_TxHead>
    26ca:	2f 5f       	subi	r18, 0xFF	; 255
    26cc:	2f 71       	andi	r18, 0x1F	; 31
    26ce:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZL12UART2_TxTail>
    26d2:	29 17       	cp	r18, r25
    26d4:	e1 f3       	breq	.-8      	; 0x26ce <_Z10uart2_putch+0x8>
    26d6:	e2 2f       	mov	r30, r18
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	e4 5d       	subi	r30, 0xD4	; 212
    26dc:	fb 4f       	sbci	r31, 0xFB	; 251
    26de:	80 83       	st	Z, r24
    26e0:	20 93 0b 04 	sts	0x040B, r18	; 0x80040b <_ZL12UART2_TxHead>
    26e4:	e1 ed       	ldi	r30, 0xD1	; 209
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	80 62       	ori	r24, 0x20	; 32
    26ec:	80 83       	st	Z, r24
    26ee:	08 95       	ret

000026f0 <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    26f0:	1f 92       	push	r1
    26f2:	0f 92       	push	r0
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	0f 92       	push	r0
    26f8:	11 24       	eor	r1, r1
    26fa:	0b b6       	in	r0, 0x3b	; 59
    26fc:	0f 92       	push	r0
    26fe:	2f 93       	push	r18
    2700:	8f 93       	push	r24
    2702:	9f 93       	push	r25
    2704:	ef 93       	push	r30
    2706:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    2708:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
    270c:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    2710:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    2712:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <_ZL12UART3_RxHead>
    2716:	ef 5f       	subi	r30, 0xFF	; 255
    2718:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    271a:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <_ZL12UART3_RxTail>
    271e:	e9 17       	cp	r30, r25
    2720:	39 f0       	breq	.+14     	; 0x2730 <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    2722:	e0 93 c4 03 	sts	0x03C4, r30	; 0x8003c4 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	e9 53       	subi	r30, 0x39	; 57
    272a:	fc 4f       	sbci	r31, 0xFC	; 252
    272c:	20 83       	st	Z, r18
    272e:	01 c0       	rjmp	.+2      	; 0x2732 <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2730:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    2732:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <_ZL17UART3_LastRxError>
}
    2736:	ff 91       	pop	r31
    2738:	ef 91       	pop	r30
    273a:	9f 91       	pop	r25
    273c:	8f 91       	pop	r24
    273e:	2f 91       	pop	r18
    2740:	0f 90       	pop	r0
    2742:	0b be       	out	0x3b, r0	; 59
    2744:	0f 90       	pop	r0
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	0f 90       	pop	r0
    274a:	1f 90       	pop	r1
    274c:	18 95       	reti

0000274e <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    274e:	1f 92       	push	r1
    2750:	0f 92       	push	r0
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	0f 92       	push	r0
    2756:	11 24       	eor	r1, r1
    2758:	0b b6       	in	r0, 0x3b	; 59
    275a:	0f 92       	push	r0
    275c:	8f 93       	push	r24
    275e:	9f 93       	push	r25
    2760:	ef 93       	push	r30
    2762:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    2764:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <_ZL12UART3_TxHead>
    2768:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <_ZL12UART3_TxTail>
    276c:	98 17       	cp	r25, r24
    276e:	69 f0       	breq	.+26     	; 0x278a <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    2770:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <_ZL12UART3_TxTail>
    2774:	ef 5f       	subi	r30, 0xFF	; 255
    2776:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    2778:	e0 93 c5 03 	sts	0x03C5, r30	; 0x8003c5 <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	e9 51       	subi	r30, 0x19	; 25
    2780:	fc 4f       	sbci	r31, 0xFC	; 252
    2782:	80 81       	ld	r24, Z
    2784:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2788:	05 c0       	rjmp	.+10     	; 0x2794 <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    278a:	e1 e3       	ldi	r30, 0x31	; 49
    278c:	f1 e0       	ldi	r31, 0x01	; 1
    278e:	80 81       	ld	r24, Z
    2790:	8f 7d       	andi	r24, 0xDF	; 223
    2792:	80 83       	st	Z, r24
	}
}
    2794:	ff 91       	pop	r31
    2796:	ef 91       	pop	r30
    2798:	9f 91       	pop	r25
    279a:	8f 91       	pop	r24
    279c:	0f 90       	pop	r0
    279e:	0b be       	out	0x3b, r0	; 59
    27a0:	0f 90       	pop	r0
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	0f 90       	pop	r0
    27a6:	1f 90       	pop	r1
    27a8:	18 95       	reti

000027aa <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    27aa:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <_ZL12UART3_TxHead>
	UART3_TxTail = 0;
    27ae:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <_ZL12UART3_TxTail>
	UART3_RxHead = 0;
    27b2:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <_ZL12UART3_RxHead>
	UART3_RxTail = 0;
    27b6:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <_ZL12UART3_RxTail>


	/* Set baud rate */
	if (baudrate & 0x8000)
    27ba:	99 23       	and	r25, r25
    27bc:	24 f4       	brge	.+8      	; 0x27c6 <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    27be:	26 e0       	ldi	r18, 0x06	; 6
    27c0:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
		baudrate &= ~0x8000;
    27c4:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    27c6:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	UBRR3L = (unsigned char)baudrate;
    27ca:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    27ce:	88 e9       	ldi	r24, 0x98	; 152
    27d0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    27d4:	86 e0       	ldi	r24, 0x06	; 6
    27d6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    27da:	08 95       	ret

000027dc <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    27dc:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <_ZL12UART3_RxHead>
    27e0:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <_ZL12UART3_RxTail>
    27e4:	98 17       	cp	r25, r24
    27e6:	91 f0       	breq	.+36     	; 0x280c <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    27e8:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <_ZL12UART3_RxTail>
    27ec:	ef 5f       	subi	r30, 0xFF	; 255
    27ee:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    27f0:	e0 93 c3 03 	sts	0x03C3, r30	; 0x8003c3 <_ZL12UART3_RxTail>

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	e9 53       	subi	r30, 0x39	; 57
    27f8:	fc 4f       	sbci	r31, 0xFC	; 252
    27fa:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    27fc:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <_ZL17UART3_LastRxError>
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	98 2f       	mov	r25, r24
    2804:	88 27       	eor	r24, r24
    2806:	82 0f       	add	r24, r18
    2808:	91 1d       	adc	r25, r1
    280a:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    2810:	08 95       	ret

00002812 <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    2812:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <_ZL12UART3_TxHead>
    2816:	2f 5f       	subi	r18, 0xFF	; 255
    2818:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    281a:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <_ZL12UART3_TxTail>
    281e:	29 17       	cp	r18, r25
    2820:	e1 f3       	breq	.-8      	; 0x281a <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    2822:	e2 2f       	mov	r30, r18
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	e9 51       	subi	r30, 0x19	; 25
    2828:	fc 4f       	sbci	r31, 0xFC	; 252
    282a:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    282c:	20 93 c6 03 	sts	0x03C6, r18	; 0x8003c6 <_ZL12UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    2830:	e1 e3       	ldi	r30, 0x31	; 49
    2832:	f1 e0       	ldi	r31, 0x01	; 1
    2834:	80 81       	ld	r24, Z
    2836:	80 62       	ori	r24, 0x20	; 32
    2838:	80 83       	st	Z, r24
    283a:	08 95       	ret

0000283c <__subsf3>:
    283c:	50 58       	subi	r21, 0x80	; 128

0000283e <__addsf3>:
    283e:	bb 27       	eor	r27, r27
    2840:	aa 27       	eor	r26, r26
    2842:	0e d0       	rcall	.+28     	; 0x2860 <__addsf3x>
    2844:	fc c1       	rjmp	.+1016   	; 0x2c3e <__fp_round>
    2846:	ed d1       	rcall	.+986    	; 0x2c22 <__fp_pscA>
    2848:	30 f0       	brcs	.+12     	; 0x2856 <__addsf3+0x18>
    284a:	f2 d1       	rcall	.+996    	; 0x2c30 <__fp_pscB>
    284c:	20 f0       	brcs	.+8      	; 0x2856 <__addsf3+0x18>
    284e:	31 f4       	brne	.+12     	; 0x285c <__addsf3+0x1e>
    2850:	9f 3f       	cpi	r25, 0xFF	; 255
    2852:	11 f4       	brne	.+4      	; 0x2858 <__addsf3+0x1a>
    2854:	1e f4       	brtc	.+6      	; 0x285c <__addsf3+0x1e>
    2856:	bd c1       	rjmp	.+890    	; 0x2bd2 <__fp_nan>
    2858:	0e f4       	brtc	.+2      	; 0x285c <__addsf3+0x1e>
    285a:	e0 95       	com	r30
    285c:	e7 fb       	bst	r30, 7
    285e:	b3 c1       	rjmp	.+870    	; 0x2bc6 <__fp_inf>

00002860 <__addsf3x>:
    2860:	e9 2f       	mov	r30, r25
    2862:	fe d1       	rcall	.+1020   	; 0x2c60 <__fp_split3>
    2864:	80 f3       	brcs	.-32     	; 0x2846 <__addsf3+0x8>
    2866:	ba 17       	cp	r27, r26
    2868:	62 07       	cpc	r22, r18
    286a:	73 07       	cpc	r23, r19
    286c:	84 07       	cpc	r24, r20
    286e:	95 07       	cpc	r25, r21
    2870:	18 f0       	brcs	.+6      	; 0x2878 <__addsf3x+0x18>
    2872:	71 f4       	brne	.+28     	; 0x2890 <__addsf3x+0x30>
    2874:	9e f5       	brtc	.+102    	; 0x28dc <__addsf3x+0x7c>
    2876:	16 c2       	rjmp	.+1068   	; 0x2ca4 <__fp_zero>
    2878:	0e f4       	brtc	.+2      	; 0x287c <__addsf3x+0x1c>
    287a:	e0 95       	com	r30
    287c:	0b 2e       	mov	r0, r27
    287e:	ba 2f       	mov	r27, r26
    2880:	a0 2d       	mov	r26, r0
    2882:	0b 01       	movw	r0, r22
    2884:	b9 01       	movw	r22, r18
    2886:	90 01       	movw	r18, r0
    2888:	0c 01       	movw	r0, r24
    288a:	ca 01       	movw	r24, r20
    288c:	a0 01       	movw	r20, r0
    288e:	11 24       	eor	r1, r1
    2890:	ff 27       	eor	r31, r31
    2892:	59 1b       	sub	r21, r25
    2894:	99 f0       	breq	.+38     	; 0x28bc <__addsf3x+0x5c>
    2896:	59 3f       	cpi	r21, 0xF9	; 249
    2898:	50 f4       	brcc	.+20     	; 0x28ae <__addsf3x+0x4e>
    289a:	50 3e       	cpi	r21, 0xE0	; 224
    289c:	68 f1       	brcs	.+90     	; 0x28f8 <__addsf3x+0x98>
    289e:	1a 16       	cp	r1, r26
    28a0:	f0 40       	sbci	r31, 0x00	; 0
    28a2:	a2 2f       	mov	r26, r18
    28a4:	23 2f       	mov	r18, r19
    28a6:	34 2f       	mov	r19, r20
    28a8:	44 27       	eor	r20, r20
    28aa:	58 5f       	subi	r21, 0xF8	; 248
    28ac:	f3 cf       	rjmp	.-26     	; 0x2894 <__addsf3x+0x34>
    28ae:	46 95       	lsr	r20
    28b0:	37 95       	ror	r19
    28b2:	27 95       	ror	r18
    28b4:	a7 95       	ror	r26
    28b6:	f0 40       	sbci	r31, 0x00	; 0
    28b8:	53 95       	inc	r21
    28ba:	c9 f7       	brne	.-14     	; 0x28ae <__addsf3x+0x4e>
    28bc:	7e f4       	brtc	.+30     	; 0x28dc <__addsf3x+0x7c>
    28be:	1f 16       	cp	r1, r31
    28c0:	ba 0b       	sbc	r27, r26
    28c2:	62 0b       	sbc	r22, r18
    28c4:	73 0b       	sbc	r23, r19
    28c6:	84 0b       	sbc	r24, r20
    28c8:	ba f0       	brmi	.+46     	; 0x28f8 <__addsf3x+0x98>
    28ca:	91 50       	subi	r25, 0x01	; 1
    28cc:	a1 f0       	breq	.+40     	; 0x28f6 <__addsf3x+0x96>
    28ce:	ff 0f       	add	r31, r31
    28d0:	bb 1f       	adc	r27, r27
    28d2:	66 1f       	adc	r22, r22
    28d4:	77 1f       	adc	r23, r23
    28d6:	88 1f       	adc	r24, r24
    28d8:	c2 f7       	brpl	.-16     	; 0x28ca <__addsf3x+0x6a>
    28da:	0e c0       	rjmp	.+28     	; 0x28f8 <__addsf3x+0x98>
    28dc:	ba 0f       	add	r27, r26
    28de:	62 1f       	adc	r22, r18
    28e0:	73 1f       	adc	r23, r19
    28e2:	84 1f       	adc	r24, r20
    28e4:	48 f4       	brcc	.+18     	; 0x28f8 <__addsf3x+0x98>
    28e6:	87 95       	ror	r24
    28e8:	77 95       	ror	r23
    28ea:	67 95       	ror	r22
    28ec:	b7 95       	ror	r27
    28ee:	f7 95       	ror	r31
    28f0:	9e 3f       	cpi	r25, 0xFE	; 254
    28f2:	08 f0       	brcs	.+2      	; 0x28f6 <__addsf3x+0x96>
    28f4:	b3 cf       	rjmp	.-154    	; 0x285c <__addsf3+0x1e>
    28f6:	93 95       	inc	r25
    28f8:	88 0f       	add	r24, r24
    28fa:	08 f0       	brcs	.+2      	; 0x28fe <__addsf3x+0x9e>
    28fc:	99 27       	eor	r25, r25
    28fe:	ee 0f       	add	r30, r30
    2900:	97 95       	ror	r25
    2902:	87 95       	ror	r24
    2904:	08 95       	ret
    2906:	8d d1       	rcall	.+794    	; 0x2c22 <__fp_pscA>
    2908:	58 f0       	brcs	.+22     	; 0x2920 <__addsf3x+0xc0>
    290a:	80 e8       	ldi	r24, 0x80	; 128
    290c:	91 e0       	ldi	r25, 0x01	; 1
    290e:	09 f4       	brne	.+2      	; 0x2912 <__addsf3x+0xb2>
    2910:	9e ef       	ldi	r25, 0xFE	; 254
    2912:	8e d1       	rcall	.+796    	; 0x2c30 <__fp_pscB>
    2914:	28 f0       	brcs	.+10     	; 0x2920 <__addsf3x+0xc0>
    2916:	40 e8       	ldi	r20, 0x80	; 128
    2918:	51 e0       	ldi	r21, 0x01	; 1
    291a:	59 f4       	brne	.+22     	; 0x2932 <atan2+0xe>
    291c:	5e ef       	ldi	r21, 0xFE	; 254
    291e:	09 c0       	rjmp	.+18     	; 0x2932 <atan2+0xe>
    2920:	58 c1       	rjmp	.+688    	; 0x2bd2 <__fp_nan>
    2922:	c0 c1       	rjmp	.+896    	; 0x2ca4 <__fp_zero>

00002924 <atan2>:
    2924:	e9 2f       	mov	r30, r25
    2926:	e0 78       	andi	r30, 0x80	; 128
    2928:	9b d1       	rcall	.+822    	; 0x2c60 <__fp_split3>
    292a:	68 f3       	brcs	.-38     	; 0x2906 <__addsf3x+0xa6>
    292c:	09 2e       	mov	r0, r25
    292e:	05 2a       	or	r0, r21
    2930:	c1 f3       	breq	.-16     	; 0x2922 <__addsf3x+0xc2>
    2932:	26 17       	cp	r18, r22
    2934:	37 07       	cpc	r19, r23
    2936:	48 07       	cpc	r20, r24
    2938:	59 07       	cpc	r21, r25
    293a:	38 f0       	brcs	.+14     	; 0x294a <atan2+0x26>
    293c:	0e 2e       	mov	r0, r30
    293e:	07 f8       	bld	r0, 7
    2940:	e0 25       	eor	r30, r0
    2942:	69 f0       	breq	.+26     	; 0x295e <atan2+0x3a>
    2944:	e0 25       	eor	r30, r0
    2946:	e0 64       	ori	r30, 0x40	; 64
    2948:	0a c0       	rjmp	.+20     	; 0x295e <atan2+0x3a>
    294a:	ef 63       	ori	r30, 0x3F	; 63
    294c:	07 f8       	bld	r0, 7
    294e:	00 94       	com	r0
    2950:	07 fa       	bst	r0, 7
    2952:	db 01       	movw	r26, r22
    2954:	b9 01       	movw	r22, r18
    2956:	9d 01       	movw	r18, r26
    2958:	dc 01       	movw	r26, r24
    295a:	ca 01       	movw	r24, r20
    295c:	ad 01       	movw	r20, r26
    295e:	ef 93       	push	r30
    2960:	47 d0       	rcall	.+142    	; 0x29f0 <__divsf3_pse>
    2962:	6d d1       	rcall	.+730    	; 0x2c3e <__fp_round>
    2964:	0a d0       	rcall	.+20     	; 0x297a <atan>
    2966:	5f 91       	pop	r21
    2968:	55 23       	and	r21, r21
    296a:	31 f0       	breq	.+12     	; 0x2978 <atan2+0x54>
    296c:	2b ed       	ldi	r18, 0xDB	; 219
    296e:	3f e0       	ldi	r19, 0x0F	; 15
    2970:	49 e4       	ldi	r20, 0x49	; 73
    2972:	50 fd       	sbrc	r21, 0
    2974:	49 ec       	ldi	r20, 0xC9	; 201
    2976:	63 cf       	rjmp	.-314    	; 0x283e <__addsf3>
    2978:	08 95       	ret

0000297a <atan>:
    297a:	df 93       	push	r29
    297c:	dd 27       	eor	r29, r29
    297e:	b9 2f       	mov	r27, r25
    2980:	bf 77       	andi	r27, 0x7F	; 127
    2982:	40 e8       	ldi	r20, 0x80	; 128
    2984:	5f e3       	ldi	r21, 0x3F	; 63
    2986:	16 16       	cp	r1, r22
    2988:	17 06       	cpc	r1, r23
    298a:	48 07       	cpc	r20, r24
    298c:	5b 07       	cpc	r21, r27
    298e:	10 f4       	brcc	.+4      	; 0x2994 <atan+0x1a>
    2990:	d9 2f       	mov	r29, r25
    2992:	93 d1       	rcall	.+806    	; 0x2cba <inverse>
    2994:	9f 93       	push	r25
    2996:	8f 93       	push	r24
    2998:	7f 93       	push	r23
    299a:	6f 93       	push	r22
    299c:	f8 d1       	rcall	.+1008   	; 0x2d8e <square>
    299e:	e4 ee       	ldi	r30, 0xE4	; 228
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	1a d1       	rcall	.+564    	; 0x2bd8 <__fp_powser>
    29a4:	4c d1       	rcall	.+664    	; 0x2c3e <__fp_round>
    29a6:	2f 91       	pop	r18
    29a8:	3f 91       	pop	r19
    29aa:	4f 91       	pop	r20
    29ac:	5f 91       	pop	r21
    29ae:	98 d1       	rcall	.+816    	; 0x2ce0 <__mulsf3x>
    29b0:	dd 23       	and	r29, r29
    29b2:	49 f0       	breq	.+18     	; 0x29c6 <atan+0x4c>
    29b4:	90 58       	subi	r25, 0x80	; 128
    29b6:	a2 ea       	ldi	r26, 0xA2	; 162
    29b8:	2a ed       	ldi	r18, 0xDA	; 218
    29ba:	3f e0       	ldi	r19, 0x0F	; 15
    29bc:	49 ec       	ldi	r20, 0xC9	; 201
    29be:	5f e3       	ldi	r21, 0x3F	; 63
    29c0:	d0 78       	andi	r29, 0x80	; 128
    29c2:	5d 27       	eor	r21, r29
    29c4:	4d df       	rcall	.-358    	; 0x2860 <__addsf3x>
    29c6:	df 91       	pop	r29
    29c8:	3a c1       	rjmp	.+628    	; 0x2c3e <__fp_round>

000029ca <__cmpsf2>:
    29ca:	d9 d0       	rcall	.+434    	; 0x2b7e <__fp_cmp>
    29cc:	08 f4       	brcc	.+2      	; 0x29d0 <__cmpsf2+0x6>
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	08 95       	ret

000029d2 <__divsf3>:
    29d2:	0c d0       	rcall	.+24     	; 0x29ec <__divsf3x>
    29d4:	34 c1       	rjmp	.+616    	; 0x2c3e <__fp_round>
    29d6:	2c d1       	rcall	.+600    	; 0x2c30 <__fp_pscB>
    29d8:	40 f0       	brcs	.+16     	; 0x29ea <__divsf3+0x18>
    29da:	23 d1       	rcall	.+582    	; 0x2c22 <__fp_pscA>
    29dc:	30 f0       	brcs	.+12     	; 0x29ea <__divsf3+0x18>
    29de:	21 f4       	brne	.+8      	; 0x29e8 <__divsf3+0x16>
    29e0:	5f 3f       	cpi	r21, 0xFF	; 255
    29e2:	19 f0       	breq	.+6      	; 0x29ea <__divsf3+0x18>
    29e4:	f0 c0       	rjmp	.+480    	; 0x2bc6 <__fp_inf>
    29e6:	51 11       	cpse	r21, r1
    29e8:	5e c1       	rjmp	.+700    	; 0x2ca6 <__fp_szero>
    29ea:	f3 c0       	rjmp	.+486    	; 0x2bd2 <__fp_nan>

000029ec <__divsf3x>:
    29ec:	39 d1       	rcall	.+626    	; 0x2c60 <__fp_split3>
    29ee:	98 f3       	brcs	.-26     	; 0x29d6 <__divsf3+0x4>

000029f0 <__divsf3_pse>:
    29f0:	99 23       	and	r25, r25
    29f2:	c9 f3       	breq	.-14     	; 0x29e6 <__divsf3+0x14>
    29f4:	55 23       	and	r21, r21
    29f6:	b1 f3       	breq	.-20     	; 0x29e4 <__divsf3+0x12>
    29f8:	95 1b       	sub	r25, r21
    29fa:	55 0b       	sbc	r21, r21
    29fc:	bb 27       	eor	r27, r27
    29fe:	aa 27       	eor	r26, r26
    2a00:	62 17       	cp	r22, r18
    2a02:	73 07       	cpc	r23, r19
    2a04:	84 07       	cpc	r24, r20
    2a06:	38 f0       	brcs	.+14     	; 0x2a16 <__divsf3_pse+0x26>
    2a08:	9f 5f       	subi	r25, 0xFF	; 255
    2a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0c:	22 0f       	add	r18, r18
    2a0e:	33 1f       	adc	r19, r19
    2a10:	44 1f       	adc	r20, r20
    2a12:	aa 1f       	adc	r26, r26
    2a14:	a9 f3       	breq	.-22     	; 0x2a00 <__divsf3_pse+0x10>
    2a16:	33 d0       	rcall	.+102    	; 0x2a7e <__divsf3_pse+0x8e>
    2a18:	0e 2e       	mov	r0, r30
    2a1a:	3a f0       	brmi	.+14     	; 0x2a2a <__divsf3_pse+0x3a>
    2a1c:	e0 e8       	ldi	r30, 0x80	; 128
    2a1e:	30 d0       	rcall	.+96     	; 0x2a80 <__divsf3_pse+0x90>
    2a20:	91 50       	subi	r25, 0x01	; 1
    2a22:	50 40       	sbci	r21, 0x00	; 0
    2a24:	e6 95       	lsr	r30
    2a26:	00 1c       	adc	r0, r0
    2a28:	ca f7       	brpl	.-14     	; 0x2a1c <__divsf3_pse+0x2c>
    2a2a:	29 d0       	rcall	.+82     	; 0x2a7e <__divsf3_pse+0x8e>
    2a2c:	fe 2f       	mov	r31, r30
    2a2e:	27 d0       	rcall	.+78     	; 0x2a7e <__divsf3_pse+0x8e>
    2a30:	66 0f       	add	r22, r22
    2a32:	77 1f       	adc	r23, r23
    2a34:	88 1f       	adc	r24, r24
    2a36:	bb 1f       	adc	r27, r27
    2a38:	26 17       	cp	r18, r22
    2a3a:	37 07       	cpc	r19, r23
    2a3c:	48 07       	cpc	r20, r24
    2a3e:	ab 07       	cpc	r26, r27
    2a40:	b0 e8       	ldi	r27, 0x80	; 128
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <__divsf3_pse+0x56>
    2a44:	bb 0b       	sbc	r27, r27
    2a46:	80 2d       	mov	r24, r0
    2a48:	bf 01       	movw	r22, r30
    2a4a:	ff 27       	eor	r31, r31
    2a4c:	93 58       	subi	r25, 0x83	; 131
    2a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a50:	2a f0       	brmi	.+10     	; 0x2a5c <__divsf3_pse+0x6c>
    2a52:	9e 3f       	cpi	r25, 0xFE	; 254
    2a54:	51 05       	cpc	r21, r1
    2a56:	68 f0       	brcs	.+26     	; 0x2a72 <__divsf3_pse+0x82>
    2a58:	b6 c0       	rjmp	.+364    	; 0x2bc6 <__fp_inf>
    2a5a:	25 c1       	rjmp	.+586    	; 0x2ca6 <__fp_szero>
    2a5c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a5e:	ec f3       	brlt	.-6      	; 0x2a5a <__divsf3_pse+0x6a>
    2a60:	98 3e       	cpi	r25, 0xE8	; 232
    2a62:	dc f3       	brlt	.-10     	; 0x2a5a <__divsf3_pse+0x6a>
    2a64:	86 95       	lsr	r24
    2a66:	77 95       	ror	r23
    2a68:	67 95       	ror	r22
    2a6a:	b7 95       	ror	r27
    2a6c:	f7 95       	ror	r31
    2a6e:	9f 5f       	subi	r25, 0xFF	; 255
    2a70:	c9 f7       	brne	.-14     	; 0x2a64 <__divsf3_pse+0x74>
    2a72:	88 0f       	add	r24, r24
    2a74:	91 1d       	adc	r25, r1
    2a76:	96 95       	lsr	r25
    2a78:	87 95       	ror	r24
    2a7a:	97 f9       	bld	r25, 7
    2a7c:	08 95       	ret
    2a7e:	e1 e0       	ldi	r30, 0x01	; 1
    2a80:	66 0f       	add	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	88 1f       	adc	r24, r24
    2a86:	bb 1f       	adc	r27, r27
    2a88:	62 17       	cp	r22, r18
    2a8a:	73 07       	cpc	r23, r19
    2a8c:	84 07       	cpc	r24, r20
    2a8e:	ba 07       	cpc	r27, r26
    2a90:	20 f0       	brcs	.+8      	; 0x2a9a <__divsf3_pse+0xaa>
    2a92:	62 1b       	sub	r22, r18
    2a94:	73 0b       	sbc	r23, r19
    2a96:	84 0b       	sbc	r24, r20
    2a98:	ba 0b       	sbc	r27, r26
    2a9a:	ee 1f       	adc	r30, r30
    2a9c:	88 f7       	brcc	.-30     	; 0x2a80 <__divsf3_pse+0x90>
    2a9e:	e0 95       	com	r30
    2aa0:	08 95       	ret

00002aa2 <__fixsfsi>:
    2aa2:	04 d0       	rcall	.+8      	; 0x2aac <__fixunssfsi>
    2aa4:	68 94       	set
    2aa6:	b1 11       	cpse	r27, r1
    2aa8:	fe c0       	rjmp	.+508    	; 0x2ca6 <__fp_szero>
    2aaa:	08 95       	ret

00002aac <__fixunssfsi>:
    2aac:	e1 d0       	rcall	.+450    	; 0x2c70 <__fp_splitA>
    2aae:	88 f0       	brcs	.+34     	; 0x2ad2 <__fixunssfsi+0x26>
    2ab0:	9f 57       	subi	r25, 0x7F	; 127
    2ab2:	90 f0       	brcs	.+36     	; 0x2ad8 <__fixunssfsi+0x2c>
    2ab4:	b9 2f       	mov	r27, r25
    2ab6:	99 27       	eor	r25, r25
    2ab8:	b7 51       	subi	r27, 0x17	; 23
    2aba:	a0 f0       	brcs	.+40     	; 0x2ae4 <__fixunssfsi+0x38>
    2abc:	d1 f0       	breq	.+52     	; 0x2af2 <__fixunssfsi+0x46>
    2abe:	66 0f       	add	r22, r22
    2ac0:	77 1f       	adc	r23, r23
    2ac2:	88 1f       	adc	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	1a f0       	brmi	.+6      	; 0x2ace <__fixunssfsi+0x22>
    2ac8:	ba 95       	dec	r27
    2aca:	c9 f7       	brne	.-14     	; 0x2abe <__fixunssfsi+0x12>
    2acc:	12 c0       	rjmp	.+36     	; 0x2af2 <__fixunssfsi+0x46>
    2ace:	b1 30       	cpi	r27, 0x01	; 1
    2ad0:	81 f0       	breq	.+32     	; 0x2af2 <__fixunssfsi+0x46>
    2ad2:	e8 d0       	rcall	.+464    	; 0x2ca4 <__fp_zero>
    2ad4:	b1 e0       	ldi	r27, 0x01	; 1
    2ad6:	08 95       	ret
    2ad8:	e5 c0       	rjmp	.+458    	; 0x2ca4 <__fp_zero>
    2ada:	67 2f       	mov	r22, r23
    2adc:	78 2f       	mov	r23, r24
    2ade:	88 27       	eor	r24, r24
    2ae0:	b8 5f       	subi	r27, 0xF8	; 248
    2ae2:	39 f0       	breq	.+14     	; 0x2af2 <__fixunssfsi+0x46>
    2ae4:	b9 3f       	cpi	r27, 0xF9	; 249
    2ae6:	cc f3       	brlt	.-14     	; 0x2ada <__fixunssfsi+0x2e>
    2ae8:	86 95       	lsr	r24
    2aea:	77 95       	ror	r23
    2aec:	67 95       	ror	r22
    2aee:	b3 95       	inc	r27
    2af0:	d9 f7       	brne	.-10     	; 0x2ae8 <__fixunssfsi+0x3c>
    2af2:	3e f4       	brtc	.+14     	; 0x2b02 <__fixunssfsi+0x56>
    2af4:	90 95       	com	r25
    2af6:	80 95       	com	r24
    2af8:	70 95       	com	r23
    2afa:	61 95       	neg	r22
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	8f 4f       	sbci	r24, 0xFF	; 255
    2b00:	9f 4f       	sbci	r25, 0xFF	; 255
    2b02:	08 95       	ret

00002b04 <__floatunsisf>:
    2b04:	e8 94       	clt
    2b06:	09 c0       	rjmp	.+18     	; 0x2b1a <__floatsisf+0x12>

00002b08 <__floatsisf>:
    2b08:	97 fb       	bst	r25, 7
    2b0a:	3e f4       	brtc	.+14     	; 0x2b1a <__floatsisf+0x12>
    2b0c:	90 95       	com	r25
    2b0e:	80 95       	com	r24
    2b10:	70 95       	com	r23
    2b12:	61 95       	neg	r22
    2b14:	7f 4f       	sbci	r23, 0xFF	; 255
    2b16:	8f 4f       	sbci	r24, 0xFF	; 255
    2b18:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1a:	99 23       	and	r25, r25
    2b1c:	a9 f0       	breq	.+42     	; 0x2b48 <__floatsisf+0x40>
    2b1e:	f9 2f       	mov	r31, r25
    2b20:	96 e9       	ldi	r25, 0x96	; 150
    2b22:	bb 27       	eor	r27, r27
    2b24:	93 95       	inc	r25
    2b26:	f6 95       	lsr	r31
    2b28:	87 95       	ror	r24
    2b2a:	77 95       	ror	r23
    2b2c:	67 95       	ror	r22
    2b2e:	b7 95       	ror	r27
    2b30:	f1 11       	cpse	r31, r1
    2b32:	f8 cf       	rjmp	.-16     	; 0x2b24 <__floatsisf+0x1c>
    2b34:	fa f4       	brpl	.+62     	; 0x2b74 <__floatsisf+0x6c>
    2b36:	bb 0f       	add	r27, r27
    2b38:	11 f4       	brne	.+4      	; 0x2b3e <__floatsisf+0x36>
    2b3a:	60 ff       	sbrs	r22, 0
    2b3c:	1b c0       	rjmp	.+54     	; 0x2b74 <__floatsisf+0x6c>
    2b3e:	6f 5f       	subi	r22, 0xFF	; 255
    2b40:	7f 4f       	sbci	r23, 0xFF	; 255
    2b42:	8f 4f       	sbci	r24, 0xFF	; 255
    2b44:	9f 4f       	sbci	r25, 0xFF	; 255
    2b46:	16 c0       	rjmp	.+44     	; 0x2b74 <__floatsisf+0x6c>
    2b48:	88 23       	and	r24, r24
    2b4a:	11 f0       	breq	.+4      	; 0x2b50 <__floatsisf+0x48>
    2b4c:	96 e9       	ldi	r25, 0x96	; 150
    2b4e:	11 c0       	rjmp	.+34     	; 0x2b72 <__floatsisf+0x6a>
    2b50:	77 23       	and	r23, r23
    2b52:	21 f0       	breq	.+8      	; 0x2b5c <__floatsisf+0x54>
    2b54:	9e e8       	ldi	r25, 0x8E	; 142
    2b56:	87 2f       	mov	r24, r23
    2b58:	76 2f       	mov	r23, r22
    2b5a:	05 c0       	rjmp	.+10     	; 0x2b66 <__floatsisf+0x5e>
    2b5c:	66 23       	and	r22, r22
    2b5e:	71 f0       	breq	.+28     	; 0x2b7c <__floatsisf+0x74>
    2b60:	96 e8       	ldi	r25, 0x86	; 134
    2b62:	86 2f       	mov	r24, r22
    2b64:	70 e0       	ldi	r23, 0x00	; 0
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	2a f0       	brmi	.+10     	; 0x2b74 <__floatsisf+0x6c>
    2b6a:	9a 95       	dec	r25
    2b6c:	66 0f       	add	r22, r22
    2b6e:	77 1f       	adc	r23, r23
    2b70:	88 1f       	adc	r24, r24
    2b72:	da f7       	brpl	.-10     	; 0x2b6a <__floatsisf+0x62>
    2b74:	88 0f       	add	r24, r24
    2b76:	96 95       	lsr	r25
    2b78:	87 95       	ror	r24
    2b7a:	97 f9       	bld	r25, 7
    2b7c:	08 95       	ret

00002b7e <__fp_cmp>:
    2b7e:	99 0f       	add	r25, r25
    2b80:	00 08       	sbc	r0, r0
    2b82:	55 0f       	add	r21, r21
    2b84:	aa 0b       	sbc	r26, r26
    2b86:	e0 e8       	ldi	r30, 0x80	; 128
    2b88:	fe ef       	ldi	r31, 0xFE	; 254
    2b8a:	16 16       	cp	r1, r22
    2b8c:	17 06       	cpc	r1, r23
    2b8e:	e8 07       	cpc	r30, r24
    2b90:	f9 07       	cpc	r31, r25
    2b92:	c0 f0       	brcs	.+48     	; 0x2bc4 <__fp_cmp+0x46>
    2b94:	12 16       	cp	r1, r18
    2b96:	13 06       	cpc	r1, r19
    2b98:	e4 07       	cpc	r30, r20
    2b9a:	f5 07       	cpc	r31, r21
    2b9c:	98 f0       	brcs	.+38     	; 0x2bc4 <__fp_cmp+0x46>
    2b9e:	62 1b       	sub	r22, r18
    2ba0:	73 0b       	sbc	r23, r19
    2ba2:	84 0b       	sbc	r24, r20
    2ba4:	95 0b       	sbc	r25, r21
    2ba6:	39 f4       	brne	.+14     	; 0x2bb6 <__fp_cmp+0x38>
    2ba8:	0a 26       	eor	r0, r26
    2baa:	61 f0       	breq	.+24     	; 0x2bc4 <__fp_cmp+0x46>
    2bac:	23 2b       	or	r18, r19
    2bae:	24 2b       	or	r18, r20
    2bb0:	25 2b       	or	r18, r21
    2bb2:	21 f4       	brne	.+8      	; 0x2bbc <__fp_cmp+0x3e>
    2bb4:	08 95       	ret
    2bb6:	0a 26       	eor	r0, r26
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <__fp_cmp+0x3e>
    2bba:	a1 40       	sbci	r26, 0x01	; 1
    2bbc:	a6 95       	lsr	r26
    2bbe:	8f ef       	ldi	r24, 0xFF	; 255
    2bc0:	81 1d       	adc	r24, r1
    2bc2:	81 1d       	adc	r24, r1
    2bc4:	08 95       	ret

00002bc6 <__fp_inf>:
    2bc6:	97 f9       	bld	r25, 7
    2bc8:	9f 67       	ori	r25, 0x7F	; 127
    2bca:	80 e8       	ldi	r24, 0x80	; 128
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	08 95       	ret

00002bd2 <__fp_nan>:
    2bd2:	9f ef       	ldi	r25, 0xFF	; 255
    2bd4:	80 ec       	ldi	r24, 0xC0	; 192
    2bd6:	08 95       	ret

00002bd8 <__fp_powser>:
    2bd8:	df 93       	push	r29
    2bda:	cf 93       	push	r28
    2bdc:	1f 93       	push	r17
    2bde:	0f 93       	push	r16
    2be0:	ff 92       	push	r15
    2be2:	ef 92       	push	r14
    2be4:	df 92       	push	r13
    2be6:	7b 01       	movw	r14, r22
    2be8:	8c 01       	movw	r16, r24
    2bea:	68 94       	set
    2bec:	05 c0       	rjmp	.+10     	; 0x2bf8 <__fp_powser+0x20>
    2bee:	da 2e       	mov	r13, r26
    2bf0:	ef 01       	movw	r28, r30
    2bf2:	76 d0       	rcall	.+236    	; 0x2ce0 <__mulsf3x>
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e8 94       	clt
    2bf8:	a5 91       	lpm	r26, Z+
    2bfa:	25 91       	lpm	r18, Z+
    2bfc:	35 91       	lpm	r19, Z+
    2bfe:	45 91       	lpm	r20, Z+
    2c00:	55 91       	lpm	r21, Z+
    2c02:	ae f3       	brts	.-22     	; 0x2bee <__fp_powser+0x16>
    2c04:	ef 01       	movw	r28, r30
    2c06:	2c de       	rcall	.-936    	; 0x2860 <__addsf3x>
    2c08:	fe 01       	movw	r30, r28
    2c0a:	97 01       	movw	r18, r14
    2c0c:	a8 01       	movw	r20, r16
    2c0e:	da 94       	dec	r13
    2c10:	79 f7       	brne	.-34     	; 0x2bf0 <__fp_powser+0x18>
    2c12:	df 90       	pop	r13
    2c14:	ef 90       	pop	r14
    2c16:	ff 90       	pop	r15
    2c18:	0f 91       	pop	r16
    2c1a:	1f 91       	pop	r17
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	08 95       	ret

00002c22 <__fp_pscA>:
    2c22:	00 24       	eor	r0, r0
    2c24:	0a 94       	dec	r0
    2c26:	16 16       	cp	r1, r22
    2c28:	17 06       	cpc	r1, r23
    2c2a:	18 06       	cpc	r1, r24
    2c2c:	09 06       	cpc	r0, r25
    2c2e:	08 95       	ret

00002c30 <__fp_pscB>:
    2c30:	00 24       	eor	r0, r0
    2c32:	0a 94       	dec	r0
    2c34:	12 16       	cp	r1, r18
    2c36:	13 06       	cpc	r1, r19
    2c38:	14 06       	cpc	r1, r20
    2c3a:	05 06       	cpc	r0, r21
    2c3c:	08 95       	ret

00002c3e <__fp_round>:
    2c3e:	09 2e       	mov	r0, r25
    2c40:	03 94       	inc	r0
    2c42:	00 0c       	add	r0, r0
    2c44:	11 f4       	brne	.+4      	; 0x2c4a <__fp_round+0xc>
    2c46:	88 23       	and	r24, r24
    2c48:	52 f0       	brmi	.+20     	; 0x2c5e <__fp_round+0x20>
    2c4a:	bb 0f       	add	r27, r27
    2c4c:	40 f4       	brcc	.+16     	; 0x2c5e <__fp_round+0x20>
    2c4e:	bf 2b       	or	r27, r31
    2c50:	11 f4       	brne	.+4      	; 0x2c56 <__fp_round+0x18>
    2c52:	60 ff       	sbrs	r22, 0
    2c54:	04 c0       	rjmp	.+8      	; 0x2c5e <__fp_round+0x20>
    2c56:	6f 5f       	subi	r22, 0xFF	; 255
    2c58:	7f 4f       	sbci	r23, 0xFF	; 255
    2c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5e:	08 95       	ret

00002c60 <__fp_split3>:
    2c60:	57 fd       	sbrc	r21, 7
    2c62:	90 58       	subi	r25, 0x80	; 128
    2c64:	44 0f       	add	r20, r20
    2c66:	55 1f       	adc	r21, r21
    2c68:	59 f0       	breq	.+22     	; 0x2c80 <__fp_splitA+0x10>
    2c6a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c6c:	71 f0       	breq	.+28     	; 0x2c8a <__fp_splitA+0x1a>
    2c6e:	47 95       	ror	r20

00002c70 <__fp_splitA>:
    2c70:	88 0f       	add	r24, r24
    2c72:	97 fb       	bst	r25, 7
    2c74:	99 1f       	adc	r25, r25
    2c76:	61 f0       	breq	.+24     	; 0x2c90 <__fp_splitA+0x20>
    2c78:	9f 3f       	cpi	r25, 0xFF	; 255
    2c7a:	79 f0       	breq	.+30     	; 0x2c9a <__fp_splitA+0x2a>
    2c7c:	87 95       	ror	r24
    2c7e:	08 95       	ret
    2c80:	12 16       	cp	r1, r18
    2c82:	13 06       	cpc	r1, r19
    2c84:	14 06       	cpc	r1, r20
    2c86:	55 1f       	adc	r21, r21
    2c88:	f2 cf       	rjmp	.-28     	; 0x2c6e <__fp_split3+0xe>
    2c8a:	46 95       	lsr	r20
    2c8c:	f1 df       	rcall	.-30     	; 0x2c70 <__fp_splitA>
    2c8e:	08 c0       	rjmp	.+16     	; 0x2ca0 <__fp_splitA+0x30>
    2c90:	16 16       	cp	r1, r22
    2c92:	17 06       	cpc	r1, r23
    2c94:	18 06       	cpc	r1, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	f1 cf       	rjmp	.-30     	; 0x2c7c <__fp_splitA+0xc>
    2c9a:	86 95       	lsr	r24
    2c9c:	71 05       	cpc	r23, r1
    2c9e:	61 05       	cpc	r22, r1
    2ca0:	08 94       	sec
    2ca2:	08 95       	ret

00002ca4 <__fp_zero>:
    2ca4:	e8 94       	clt

00002ca6 <__fp_szero>:
    2ca6:	bb 27       	eor	r27, r27
    2ca8:	66 27       	eor	r22, r22
    2caa:	77 27       	eor	r23, r23
    2cac:	cb 01       	movw	r24, r22
    2cae:	97 f9       	bld	r25, 7
    2cb0:	08 95       	ret

00002cb2 <__gesf2>:
    2cb2:	65 df       	rcall	.-310    	; 0x2b7e <__fp_cmp>
    2cb4:	08 f4       	brcc	.+2      	; 0x2cb8 <__gesf2+0x6>
    2cb6:	8f ef       	ldi	r24, 0xFF	; 255
    2cb8:	08 95       	ret

00002cba <inverse>:
    2cba:	9b 01       	movw	r18, r22
    2cbc:	ac 01       	movw	r20, r24
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	70 e0       	ldi	r23, 0x00	; 0
    2cc2:	80 e8       	ldi	r24, 0x80	; 128
    2cc4:	9f e3       	ldi	r25, 0x3F	; 63
    2cc6:	85 ce       	rjmp	.-758    	; 0x29d2 <__divsf3>

00002cc8 <__mulsf3>:
    2cc8:	0b d0       	rcall	.+22     	; 0x2ce0 <__mulsf3x>
    2cca:	b9 cf       	rjmp	.-142    	; 0x2c3e <__fp_round>
    2ccc:	aa df       	rcall	.-172    	; 0x2c22 <__fp_pscA>
    2cce:	28 f0       	brcs	.+10     	; 0x2cda <__mulsf3+0x12>
    2cd0:	af df       	rcall	.-162    	; 0x2c30 <__fp_pscB>
    2cd2:	18 f0       	brcs	.+6      	; 0x2cda <__mulsf3+0x12>
    2cd4:	95 23       	and	r25, r21
    2cd6:	09 f0       	breq	.+2      	; 0x2cda <__mulsf3+0x12>
    2cd8:	76 cf       	rjmp	.-276    	; 0x2bc6 <__fp_inf>
    2cda:	7b cf       	rjmp	.-266    	; 0x2bd2 <__fp_nan>
    2cdc:	11 24       	eor	r1, r1
    2cde:	e3 cf       	rjmp	.-58     	; 0x2ca6 <__fp_szero>

00002ce0 <__mulsf3x>:
    2ce0:	bf df       	rcall	.-130    	; 0x2c60 <__fp_split3>
    2ce2:	a0 f3       	brcs	.-24     	; 0x2ccc <__mulsf3+0x4>

00002ce4 <__mulsf3_pse>:
    2ce4:	95 9f       	mul	r25, r21
    2ce6:	d1 f3       	breq	.-12     	; 0x2cdc <__mulsf3+0x14>
    2ce8:	95 0f       	add	r25, r21
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	55 1f       	adc	r21, r21
    2cee:	62 9f       	mul	r22, r18
    2cf0:	f0 01       	movw	r30, r0
    2cf2:	72 9f       	mul	r23, r18
    2cf4:	bb 27       	eor	r27, r27
    2cf6:	f0 0d       	add	r31, r0
    2cf8:	b1 1d       	adc	r27, r1
    2cfa:	63 9f       	mul	r22, r19
    2cfc:	aa 27       	eor	r26, r26
    2cfe:	f0 0d       	add	r31, r0
    2d00:	b1 1d       	adc	r27, r1
    2d02:	aa 1f       	adc	r26, r26
    2d04:	64 9f       	mul	r22, r20
    2d06:	66 27       	eor	r22, r22
    2d08:	b0 0d       	add	r27, r0
    2d0a:	a1 1d       	adc	r26, r1
    2d0c:	66 1f       	adc	r22, r22
    2d0e:	82 9f       	mul	r24, r18
    2d10:	22 27       	eor	r18, r18
    2d12:	b0 0d       	add	r27, r0
    2d14:	a1 1d       	adc	r26, r1
    2d16:	62 1f       	adc	r22, r18
    2d18:	73 9f       	mul	r23, r19
    2d1a:	b0 0d       	add	r27, r0
    2d1c:	a1 1d       	adc	r26, r1
    2d1e:	62 1f       	adc	r22, r18
    2d20:	83 9f       	mul	r24, r19
    2d22:	a0 0d       	add	r26, r0
    2d24:	61 1d       	adc	r22, r1
    2d26:	22 1f       	adc	r18, r18
    2d28:	74 9f       	mul	r23, r20
    2d2a:	33 27       	eor	r19, r19
    2d2c:	a0 0d       	add	r26, r0
    2d2e:	61 1d       	adc	r22, r1
    2d30:	23 1f       	adc	r18, r19
    2d32:	84 9f       	mul	r24, r20
    2d34:	60 0d       	add	r22, r0
    2d36:	21 1d       	adc	r18, r1
    2d38:	82 2f       	mov	r24, r18
    2d3a:	76 2f       	mov	r23, r22
    2d3c:	6a 2f       	mov	r22, r26
    2d3e:	11 24       	eor	r1, r1
    2d40:	9f 57       	subi	r25, 0x7F	; 127
    2d42:	50 40       	sbci	r21, 0x00	; 0
    2d44:	8a f0       	brmi	.+34     	; 0x2d68 <__mulsf3_pse+0x84>
    2d46:	e1 f0       	breq	.+56     	; 0x2d80 <__mulsf3_pse+0x9c>
    2d48:	88 23       	and	r24, r24
    2d4a:	4a f0       	brmi	.+18     	; 0x2d5e <__mulsf3_pse+0x7a>
    2d4c:	ee 0f       	add	r30, r30
    2d4e:	ff 1f       	adc	r31, r31
    2d50:	bb 1f       	adc	r27, r27
    2d52:	66 1f       	adc	r22, r22
    2d54:	77 1f       	adc	r23, r23
    2d56:	88 1f       	adc	r24, r24
    2d58:	91 50       	subi	r25, 0x01	; 1
    2d5a:	50 40       	sbci	r21, 0x00	; 0
    2d5c:	a9 f7       	brne	.-22     	; 0x2d48 <__mulsf3_pse+0x64>
    2d5e:	9e 3f       	cpi	r25, 0xFE	; 254
    2d60:	51 05       	cpc	r21, r1
    2d62:	70 f0       	brcs	.+28     	; 0x2d80 <__mulsf3_pse+0x9c>
    2d64:	30 cf       	rjmp	.-416    	; 0x2bc6 <__fp_inf>
    2d66:	9f cf       	rjmp	.-194    	; 0x2ca6 <__fp_szero>
    2d68:	5f 3f       	cpi	r21, 0xFF	; 255
    2d6a:	ec f3       	brlt	.-6      	; 0x2d66 <__mulsf3_pse+0x82>
    2d6c:	98 3e       	cpi	r25, 0xE8	; 232
    2d6e:	dc f3       	brlt	.-10     	; 0x2d66 <__mulsf3_pse+0x82>
    2d70:	86 95       	lsr	r24
    2d72:	77 95       	ror	r23
    2d74:	67 95       	ror	r22
    2d76:	b7 95       	ror	r27
    2d78:	f7 95       	ror	r31
    2d7a:	e7 95       	ror	r30
    2d7c:	9f 5f       	subi	r25, 0xFF	; 255
    2d7e:	c1 f7       	brne	.-16     	; 0x2d70 <__mulsf3_pse+0x8c>
    2d80:	fe 2b       	or	r31, r30
    2d82:	88 0f       	add	r24, r24
    2d84:	91 1d       	adc	r25, r1
    2d86:	96 95       	lsr	r25
    2d88:	87 95       	ror	r24
    2d8a:	97 f9       	bld	r25, 7
    2d8c:	08 95       	ret

00002d8e <square>:
    2d8e:	9b 01       	movw	r18, r22
    2d90:	ac 01       	movw	r20, r24
    2d92:	9a cf       	rjmp	.-204    	; 0x2cc8 <__mulsf3>

00002d94 <__divmodhi4>:
    2d94:	97 fb       	bst	r25, 7
    2d96:	07 2e       	mov	r0, r23
    2d98:	16 f4       	brtc	.+4      	; 0x2d9e <__divmodhi4+0xa>
    2d9a:	00 94       	com	r0
    2d9c:	06 d0       	rcall	.+12     	; 0x2daa <__divmodhi4_neg1>
    2d9e:	77 fd       	sbrc	r23, 7
    2da0:	08 d0       	rcall	.+16     	; 0x2db2 <__divmodhi4_neg2>
    2da2:	1a d0       	rcall	.+52     	; 0x2dd8 <__udivmodhi4>
    2da4:	07 fc       	sbrc	r0, 7
    2da6:	05 d0       	rcall	.+10     	; 0x2db2 <__divmodhi4_neg2>
    2da8:	3e f4       	brtc	.+14     	; 0x2db8 <__divmodhi4_exit>

00002daa <__divmodhi4_neg1>:
    2daa:	90 95       	com	r25
    2dac:	81 95       	neg	r24
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	08 95       	ret

00002db2 <__divmodhi4_neg2>:
    2db2:	70 95       	com	r23
    2db4:	61 95       	neg	r22
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255

00002db8 <__divmodhi4_exit>:
    2db8:	08 95       	ret

00002dba <__umulhisi3>:
    2dba:	a2 9f       	mul	r26, r18
    2dbc:	b0 01       	movw	r22, r0
    2dbe:	b3 9f       	mul	r27, r19
    2dc0:	c0 01       	movw	r24, r0
    2dc2:	a3 9f       	mul	r26, r19
    2dc4:	70 0d       	add	r23, r0
    2dc6:	81 1d       	adc	r24, r1
    2dc8:	11 24       	eor	r1, r1
    2dca:	91 1d       	adc	r25, r1
    2dcc:	b2 9f       	mul	r27, r18
    2dce:	70 0d       	add	r23, r0
    2dd0:	81 1d       	adc	r24, r1
    2dd2:	11 24       	eor	r1, r1
    2dd4:	91 1d       	adc	r25, r1
    2dd6:	08 95       	ret

00002dd8 <__udivmodhi4>:
    2dd8:	aa 1b       	sub	r26, r26
    2dda:	bb 1b       	sub	r27, r27
    2ddc:	51 e1       	ldi	r21, 0x11	; 17
    2dde:	07 c0       	rjmp	.+14     	; 0x2dee <__udivmodhi4_ep>

00002de0 <__udivmodhi4_loop>:
    2de0:	aa 1f       	adc	r26, r26
    2de2:	bb 1f       	adc	r27, r27
    2de4:	a6 17       	cp	r26, r22
    2de6:	b7 07       	cpc	r27, r23
    2de8:	10 f0       	brcs	.+4      	; 0x2dee <__udivmodhi4_ep>
    2dea:	a6 1b       	sub	r26, r22
    2dec:	b7 0b       	sbc	r27, r23

00002dee <__udivmodhi4_ep>:
    2dee:	88 1f       	adc	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	5a 95       	dec	r21
    2df4:	a9 f7       	brne	.-22     	; 0x2de0 <__udivmodhi4_loop>
    2df6:	80 95       	com	r24
    2df8:	90 95       	com	r25
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	08 95       	ret

00002e00 <__tablejump2__>:
    2e00:	ee 0f       	add	r30, r30
    2e02:	ff 1f       	adc	r31, r31
    2e04:	88 1f       	adc	r24, r24
    2e06:	8b bf       	out	0x3b, r24	; 59
    2e08:	07 90       	elpm	r0, Z+
    2e0a:	f6 91       	elpm	r31, Z
    2e0c:	e0 2d       	mov	r30, r0
    2e0e:	19 94       	eijmp

00002e10 <_exit>:
    2e10:	f8 94       	cli

00002e12 <__stop_program>:
    2e12:	ff cf       	rjmp	.-2      	; 0x2e12 <__stop_program>
