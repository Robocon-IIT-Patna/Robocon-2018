
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800200  00002e90  00002f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022c  008002aa  008002aa  00002fce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002fce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003000  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00003040  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040ab  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001459  00000000  00000000  000073eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002444  00000000  00000000  00008844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad0  00000000  00000000  0000ac88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019ba  00000000  00000000  0000b758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023cc  00000000  00000000  0000d112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000f4de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	b8 c0       	rjmp	.+368    	; 0x176 <__bad_interrupt>
       6:	00 00       	nop
       8:	b6 c0       	rjmp	.+364    	; 0x176 <__bad_interrupt>
       a:	00 00       	nop
       c:	e6 c0       	rjmp	.+460    	; 0x1da <__vector_3>
       e:	00 00       	nop
      10:	b2 c0       	rjmp	.+356    	; 0x176 <__bad_interrupt>
      12:	00 00       	nop
      14:	b0 c0       	rjmp	.+352    	; 0x176 <__bad_interrupt>
      16:	00 00       	nop
      18:	07 c1       	rjmp	.+526    	; 0x228 <__vector_6>
      1a:	00 00       	nop
      1c:	ac c0       	rjmp	.+344    	; 0x176 <__bad_interrupt>
      1e:	00 00       	nop
      20:	aa c0       	rjmp	.+340    	; 0x176 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__vector_9>
      28:	a6 c0       	rjmp	.+332    	; 0x176 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 a7 0f 	jmp	0x1f4e	; 0x1f4e <__vector_11>
      30:	a2 c0       	rjmp	.+324    	; 0x176 <__bad_interrupt>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__bad_interrupt>
      36:	00 00       	nop
      38:	9e c0       	rjmp	.+316    	; 0x176 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9c c0       	rjmp	.+312    	; 0x176 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__bad_interrupt>
      42:	00 00       	nop
      44:	98 c0       	rjmp	.+304    	; 0x176 <__bad_interrupt>
      46:	00 00       	nop
      48:	96 c0       	rjmp	.+300    	; 0x176 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	94 c0       	rjmp	.+296    	; 0x176 <__bad_interrupt>
      4e:	00 00       	nop
      50:	92 c0       	rjmp	.+292    	; 0x176 <__bad_interrupt>
      52:	00 00       	nop
      54:	90 c0       	rjmp	.+288    	; 0x176 <__bad_interrupt>
      56:	00 00       	nop
      58:	8e c0       	rjmp	.+284    	; 0x176 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c c1       	rjmp	.+536    	; 0x276 <__vector_23>
      5e:	00 00       	nop
      60:	8a c0       	rjmp	.+276    	; 0x176 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 35 12 	jmp	0x246a	; 0x246a <__vector_25>
      68:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__vector_26>
      6c:	84 c0       	rjmp	.+264    	; 0x176 <__bad_interrupt>
      6e:	00 00       	nop
      70:	82 c0       	rjmp	.+260    	; 0x176 <__bad_interrupt>
      72:	00 00       	nop
      74:	80 c0       	rjmp	.+256    	; 0x176 <__bad_interrupt>
      76:	00 00       	nop
      78:	7e c0       	rjmp	.+252    	; 0x176 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7c c0       	rjmp	.+248    	; 0x176 <__bad_interrupt>
      7e:	00 00       	nop
      80:	7a c0       	rjmp	.+244    	; 0x176 <__bad_interrupt>
      82:	00 00       	nop
      84:	78 c0       	rjmp	.+240    	; 0x176 <__bad_interrupt>
      86:	00 00       	nop
      88:	76 c0       	rjmp	.+236    	; 0x176 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	74 c0       	rjmp	.+232    	; 0x176 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__vector_36>
      94:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__vector_37>
      98:	6e c0       	rjmp	.+220    	; 0x176 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6c c0       	rjmp	.+216    	; 0x176 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	6a c0       	rjmp	.+212    	; 0x176 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	68 c0       	rjmp	.+208    	; 0x176 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	66 c0       	rjmp	.+204    	; 0x176 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	64 c0       	rjmp	.+200    	; 0x176 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	62 c0       	rjmp	.+196    	; 0x176 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	60 c0       	rjmp	.+192    	; 0x176 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5e c0       	rjmp	.+188    	; 0x176 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5c c0       	rjmp	.+184    	; 0x176 <__bad_interrupt>
      be:	00 00       	nop
      c0:	5a c0       	rjmp	.+180    	; 0x176 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	58 c0       	rjmp	.+176    	; 0x176 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	56 c0       	rjmp	.+172    	; 0x176 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__vector_51>
      d0:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__vector_52>
      d4:	50 c0       	rjmp	.+160    	; 0x176 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__vector_54>
      dc:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__vector_55>
      e0:	4a c0       	rjmp	.+148    	; 0x176 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_start>:
     112:	a2 11       	cpse	r26, r2

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d1 e2       	ldi	r29, 0x21	; 33
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	0c bf       	out	0x3c, r16	; 60

00000124 <__do_copy_data>:
     124:	12 e0       	ldi	r17, 0x02	; 2
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	e0 e9       	ldi	r30, 0x90	; 144
     12c:	fe e2       	ldi	r31, 0x2E	; 46
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	aa 3a       	cpi	r26, 0xAA	; 170
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	24 e0       	ldi	r18, 0x04	; 4
     140:	aa ea       	ldi	r26, 0xAA	; 170
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a6 3d       	cpi	r26, 0xD6	; 214
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>

0000014e <__do_global_ctors>:
     14e:	10 e0       	ldi	r17, 0x00	; 0
     150:	ca e8       	ldi	r28, 0x8A	; 138
     152:	d0 e0       	ldi	r29, 0x00	; 0
     154:	00 e0       	ldi	r16, 0x00	; 0
     156:	06 c0       	rjmp	.+12     	; 0x164 <__do_global_ctors+0x16>
     158:	21 97       	sbiw	r28, 0x01	; 1
     15a:	01 09       	sbc	r16, r1
     15c:	80 2f       	mov	r24, r16
     15e:	fe 01       	movw	r30, r28
     160:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__tablejump2__>
     164:	c9 38       	cpi	r28, 0x89	; 137
     166:	d1 07       	cpc	r29, r17
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	08 07       	cpc	r16, r24
     16c:	a9 f7       	brne	.-22     	; 0x158 <__do_global_ctors+0xa>
     16e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <main>
     172:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <_exit>

00000176 <__bad_interrupt>:
     176:	44 cf       	rjmp	.-376    	; 0x0 <__vectors>

00000178 <_ZN7encoder22Init_encoder_interruptEv>:
volatile bool PidUpdateFlagDriveY = true;


void encoder::Init_encoder_interrupt()
{
	sei();
     178:	78 94       	sei
	EICRA = 0b00110000;
     17a:	80 e3       	ldi	r24, 0x30	; 48
     17c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EICRB = 0b00001100;
     180:	8c e0       	ldi	r24, 0x0C	; 12
     182:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	EIMSK |=  (1<<INT2) |(1<<INT5);
     186:	8d b3       	in	r24, 0x1d	; 29
     188:	84 62       	ori	r24, 0x24	; 36
     18a:	8d bb       	out	0x1d, r24	; 29
     18c:	08 95       	ret

0000018e <_ZN7encoder10Init_timerEv>:
}

void encoder::Init_timer()	//FOR SPEED TUNING OF 4 MOTORS
{
	sei();
     18e:	78 94       	sei
	TCCR0B |= (1<<CS02) | (1<<CS00);
     190:	85 b5       	in	r24, 0x25	; 37
     192:	85 60       	ori	r24, 0x05	; 5
     194:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
     19c:	08 95       	ret

0000019e <_ZN7encoder11getdistanceEv>:
}
float encoder::getdistance()
	{
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	ec 01       	movw	r28, r24
	distance = (3.1415 * encoderdiameter * count_encoder)/(encoderPPR) ; 
     1a4:	68 81       	ld	r22, Y
     1a6:	79 81       	ldd	r23, Y+1	; 0x01
     1a8:	07 2e       	mov	r0, r23
     1aa:	00 0c       	add	r0, r0
     1ac:	88 0b       	sbc	r24, r24
     1ae:	99 0b       	sbc	r25, r25
     1b0:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     1b4:	2e ef       	ldi	r18, 0xFE	; 254
     1b6:	34 e3       	ldi	r19, 0x34	; 52
     1b8:	46 e3       	ldi	r20, 0x36	; 54
     1ba:	53 e4       	ldi	r21, 0x43	; 67
     1bc:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	48 e4       	ldi	r20, 0x48	; 72
     1c6:	53 e4       	ldi	r21, 0x43	; 67
     1c8:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__divsf3>
     1cc:	6c 83       	std	Y+4, r22	; 0x04
     1ce:	7d 83       	std	Y+5, r23	; 0x05
     1d0:	8e 83       	std	Y+6, r24	; 0x06
     1d2:	9f 83       	std	Y+7, r25	; 0x07
	return distance;
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <__vector_3>:

ISR(INT2_vect)	//for x -axis encoder
{
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
     1e4:	0b b6       	in	r0, 0x3b	; 59
     1e6:	0f 92       	push	r0
     1e8:	8f 93       	push	r24
     1ea:	9f 93       	push	r25
     1ec:	ef 93       	push	r30
     1ee:	ff 93       	push	r31
	if((bit_is_set(PINA,PA0)))
     1f0:	00 9b       	sbis	0x00, 0	; 0
     1f2:	08 c0       	rjmp	.+16     	; 0x204 <__vector_3+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     1f4:	ec eb       	ldi	r30, 0xBC	; 188
     1f6:	f2 e0       	ldi	r31, 0x02	; 2
     1f8:	80 81       	ld	r24, Z
     1fa:	91 81       	ldd	r25, Z+1	; 0x01
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	91 83       	std	Z+1, r25	; 0x01
     200:	80 83       	st	Z, r24
     202:	07 c0       	rjmp	.+14     	; 0x212 <__vector_3+0x38>
		inline void dcr_count(){count_encoder--;};
     204:	ec eb       	ldi	r30, 0xBC	; 188
     206:	f2 e0       	ldi	r31, 0x02	; 2
     208:	80 81       	ld	r24, Z
     20a:	91 81       	ldd	r25, Z+1	; 0x01
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	91 83       	std	Z+1, r25	; 0x01
     210:	80 83       	st	Z, r24
	{
		encoderX.inc_count();
	}
	else
		encoderX.dcr_count();
}
     212:	ff 91       	pop	r31
     214:	ef 91       	pop	r30
     216:	9f 91       	pop	r25
     218:	8f 91       	pop	r24
     21a:	0f 90       	pop	r0
     21c:	0b be       	out	0x3b, r0	; 59
     21e:	0f 90       	pop	r0
     220:	0f be       	out	0x3f, r0	; 63
     222:	0f 90       	pop	r0
     224:	1f 90       	pop	r1
     226:	18 95       	reti

00000228 <__vector_6>:

ISR(INT5_vect)	//for y-axis encoder
{
     228:	1f 92       	push	r1
     22a:	0f 92       	push	r0
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	0f 92       	push	r0
     230:	11 24       	eor	r1, r1
     232:	0b b6       	in	r0, 0x3b	; 59
     234:	0f 92       	push	r0
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	ef 93       	push	r30
     23c:	ff 93       	push	r31
	if((bit_is_set(PINA,PA5)))
     23e:	05 9b       	sbis	0x00, 5	; 0
     240:	08 c0       	rjmp	.+16     	; 0x252 <__vector_6+0x2a>
			Init_encoder_interrupt();
			Init_timer();
		}
		void Init_encoder_interrupt();
		void Init_timer();
		inline void inc_count(){count_encoder++;};
     242:	e4 eb       	ldi	r30, 0xB4	; 180
     244:	f2 e0       	ldi	r31, 0x02	; 2
     246:	80 81       	ld	r24, Z
     248:	91 81       	ldd	r25, Z+1	; 0x01
     24a:	01 96       	adiw	r24, 0x01	; 1
     24c:	91 83       	std	Z+1, r25	; 0x01
     24e:	80 83       	st	Z, r24
     250:	07 c0       	rjmp	.+14     	; 0x260 <__vector_6+0x38>
		inline void dcr_count(){count_encoder--;};
     252:	e4 eb       	ldi	r30, 0xB4	; 180
     254:	f2 e0       	ldi	r31, 0x02	; 2
     256:	80 81       	ld	r24, Z
     258:	91 81       	ldd	r25, Z+1	; 0x01
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	91 83       	std	Z+1, r25	; 0x01
     25e:	80 83       	st	Z, r24
	{
		encoderY.inc_count();
	}
	else
		encoderY.dcr_count();
}
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	9f 91       	pop	r25
     266:	8f 91       	pop	r24
     268:	0f 90       	pop	r0
     26a:	0b be       	out	0x3b, r0	; 59
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	8f 93       	push	r24
	PidUpdateFlagCompass = true;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <PidUpdateFlagCompass>
	PidUpdateFlagLinetracker = true;
     288:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <PidUpdateFlagLinetracker>
 
	PidUpdateFlagDriveX = true;
     28c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <PidUpdateFlagDriveX>
	PidUpdateFlagDriveY = true;
     290:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <PidUpdateFlagDriveY>
	
     294:	8f 91       	pop	r24
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <_Z13init_QMC5883Lv>:
int16_t getoffset_X(void){
	return X_offset;
}
int16_t getoffset_Y(void){
	return Y_offset;
}
     2a0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <_Z8i2c_initv>
     2a4:	8a e1       	ldi	r24, 0x1A	; 26
     2a6:	0e 94 db 11 	call	0x23b6	; 0x23b6 <_Z9i2c_starth>
     2aa:	8b e0       	ldi	r24, 0x0B	; 11
     2ac:	0e 94 0d 12 	call	0x241a	; 0x241a <_Z9i2c_writeh>
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0e 94 0d 12 	call	0x241a	; 0x241a <_Z9i2c_writeh>
     2b6:	0e 94 04 12 	call	0x2408	; 0x2408 <_Z8i2c_stopv>
     2ba:	8a e1       	ldi	r24, 0x1A	; 26
     2bc:	0e 94 db 11 	call	0x23b6	; 0x23b6 <_Z9i2c_starth>
     2c0:	89 e0       	ldi	r24, 0x09	; 9
     2c2:	0e 94 0d 12 	call	0x241a	; 0x241a <_Z9i2c_writeh>
     2c6:	81 e1       	ldi	r24, 0x11	; 17
     2c8:	0e 94 0d 12 	call	0x241a	; 0x241a <_Z9i2c_writeh>
     2cc:	0c 94 04 12 	jmp	0x2408	; 0x2408 <_Z8i2c_stopv>
     2d0:	08 95       	ret

000002d2 <_Z12read_Compassv>:
     2d2:	8a e1       	ldi	r24, 0x1A	; 26
     2d4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <_Z9i2c_starth>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 0d 12 	call	0x241a	; 0x241a <_Z9i2c_writeh>
     2de:	0e 94 04 12 	call	0x2408	; 0x2408 <_Z8i2c_stopv>
     2e2:	8b e1       	ldi	r24, 0x1B	; 27
     2e4:	0e 94 02 12 	call	0x2404	; 0x2404 <_Z13i2c_rep_starth>
     2e8:	0e 94 1f 12 	call	0x243e	; 0x243e <_Z11i2c_readAckv>
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <raw_x+0x1>
     2f2:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <raw_x>
     2f6:	0e 94 1f 12 	call	0x243e	; 0x243e <_Z11i2c_readAckv>
     2fa:	20 91 bf 03 	lds	r18, 0x03BF	; 0x8003bf <raw_x>
     2fe:	30 91 c0 03 	lds	r19, 0x03C0	; 0x8003c0 <raw_x+0x1>
     302:	38 2b       	or	r19, r24
     304:	30 93 c0 03 	sts	0x03C0, r19	; 0x8003c0 <raw_x+0x1>
     308:	20 93 bf 03 	sts	0x03BF, r18	; 0x8003bf <raw_x>
     30c:	0e 94 1f 12 	call	0x243e	; 0x243e <_Z11i2c_readAckv>
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	90 93 be 03 	sts	0x03BE, r25	; 0x8003be <raw_y+0x1>
     316:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <raw_y>
     31a:	0e 94 1f 12 	call	0x243e	; 0x243e <_Z11i2c_readAckv>
     31e:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <raw_y>
     322:	30 91 be 03 	lds	r19, 0x03BE	; 0x8003be <raw_y+0x1>
     326:	38 2b       	or	r19, r24
     328:	30 93 be 03 	sts	0x03BE, r19	; 0x8003be <raw_y+0x1>
     32c:	20 93 bd 03 	sts	0x03BD, r18	; 0x8003bd <raw_y>
     330:	0e 94 1f 12 	call	0x243e	; 0x243e <_Z11i2c_readAckv>
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <raw_z+0x1>
     33a:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <raw_z>
     33e:	0e 94 2a 12 	call	0x2454	; 0x2454 <_Z11i2c_readNakv>
     342:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <raw_z>
     346:	30 91 bc 03 	lds	r19, 0x03BC	; 0x8003bc <raw_z+0x1>
     34a:	38 2b       	or	r19, r24
     34c:	30 93 bc 03 	sts	0x03BC, r19	; 0x8003bc <raw_z+0x1>
     350:	20 93 bb 03 	sts	0x03BB, r18	; 0x8003bb <raw_z>
     354:	0c 94 04 12 	jmp	0x2408	; 0x2408 <_Z8i2c_stopv>
     358:	08 95       	ret

0000035a <_Z9get_Anglev>:

uint16_t get_Angle(){
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
	read_Compass();
     366:	b5 df       	rcall	.-150    	; 0x2d2 <_Z12read_Compassv>
	raw_x = raw_x - X_offset;
     368:	60 91 bf 03 	lds	r22, 0x03BF	; 0x8003bf <raw_x>
     36c:	70 91 c0 03 	lds	r23, 0x03C0	; 0x8003c0 <raw_x+0x1>
     370:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <X_offset>
     374:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <X_offset+0x1>
     378:	68 1b       	sub	r22, r24
     37a:	79 0b       	sbc	r23, r25
     37c:	70 93 c0 03 	sts	0x03C0, r23	; 0x8003c0 <raw_x+0x1>
     380:	60 93 bf 03 	sts	0x03BF, r22	; 0x8003bf <raw_x>
	raw_y = raw_y - Y_offset;
     384:	c0 91 bd 03 	lds	r28, 0x03BD	; 0x8003bd <raw_y>
     388:	d0 91 be 03 	lds	r29, 0x03BE	; 0x8003be <raw_y+0x1>
     38c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <Y_offset>
     390:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <Y_offset+0x1>
     394:	c8 1b       	sub	r28, r24
     396:	d9 0b       	sbc	r29, r25
     398:	d0 93 be 03 	sts	0x03BE, r29	; 0x8003be <raw_y+0x1>
     39c:	c0 93 bd 03 	sts	0x03BD, r28	; 0x8003bd <raw_y>
	Angle = (atan2((double)raw_y,(double)raw_x)* 180 / 3.14159265 +180.0);
     3a0:	07 2e       	mov	r0, r23
     3a2:	00 0c       	add	r0, r0
     3a4:	88 0b       	sbc	r24, r24
     3a6:	99 0b       	sbc	r25, r25
     3a8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     3ac:	6b 01       	movw	r12, r22
     3ae:	7c 01       	movw	r14, r24
     3b0:	be 01       	movw	r22, r28
     3b2:	dd 0f       	add	r29, r29
     3b4:	88 0b       	sbc	r24, r24
     3b6:	99 0b       	sbc	r25, r25
     3b8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     3bc:	a7 01       	movw	r20, r14
     3be:	96 01       	movw	r18, r12
     3c0:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <atan2>
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	44 e3       	ldi	r20, 0x34	; 52
     3ca:	53 e4       	ldi	r21, 0x43	; 67
     3cc:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     3d0:	2b ed       	ldi	r18, 0xDB	; 219
     3d2:	3f e0       	ldi	r19, 0x0F	; 15
     3d4:	49 e4       	ldi	r20, 0x49	; 73
     3d6:	50 e4       	ldi	r21, 0x40	; 64
     3d8:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__divsf3>
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	44 e3       	ldi	r20, 0x34	; 52
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     3e8:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixunssfsi>
     3ec:	70 93 ba 03 	sts	0x03BA, r23	; 0x8003ba <Angle+0x1>
     3f0:	60 93 b9 03 	sts	0x03B9, r22	; 0x8003b9 <Angle>
	return Angle;
}
     3f4:	cb 01       	movw	r24, r22
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	ff 90       	pop	r15
     3fc:	ef 90       	pop	r14
     3fe:	df 90       	pop	r13
     400:	cf 90       	pop	r12
     402:	08 95       	ret

00000404 <_Z10BrakeMotorv>:
inline void linetrackerXjunctionWatchOff();
inline void linetrackerYjunctionWatchOff();
////////////////////////////////////////////////////

void BrakeMotor(){
	PORTK ^= (1<<PK1);
     404:	e8 e0       	ldi	r30, 0x08	; 8
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	90 81       	ld	r25, Z
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	89 27       	eor	r24, r25
     40e:	80 83       	st	Z, r24
     410:	08 95       	ret

00000412 <_Z15sendDataToSlavev>:
}

void sendDataToSlave(void){
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
//	uart0_puts("a");
// 	I2C_Start(0x20);
// 	I2C_Write_byte_array(bufferMotorSpeed,4);
// 	I2C_Stop();
uart2_putc(START_BYTE);
     416:	8f e7       	ldi	r24, 0x7F	; 127
     418:	0e 94 a1 13 	call	0x2742	; 0x2742 <_Z10uart2_putch>
//_delay_ms(1);
uart2_putc(bufferMotorSpeed[0]);
     41c:	c5 eb       	ldi	r28, 0xB5	; 181
     41e:	d3 e0       	ldi	r29, 0x03	; 3
     420:	88 81       	ld	r24, Y
     422:	0e 94 a1 13 	call	0x2742	; 0x2742 <_Z10uart2_putch>
//_delay_ms(1);
uart2_putc(bufferMotorSpeed[1]);
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	0e 94 a1 13 	call	0x2742	; 0x2742 <_Z10uart2_putch>
//_delay_ms(1);
uart2_putc(bufferMotorSpeed[2]);
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	0e 94 a1 13 	call	0x2742	; 0x2742 <_Z10uart2_putch>
//_delay_ms(1);
uart2_putc(bufferMotorSpeed[3]);
     432:	8b 81       	ldd	r24, Y+3	; 0x03
     434:	0e 94 a1 13 	call	0x2742	; 0x2742 <_Z10uart2_putch>
/*_delay_ms(1);*/
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <_Z19getLineTrackerYdatav>:

int getLineTrackerYdata(void){
     43e:	4f 92       	push	r4
     440:	5f 92       	push	r5
     442:	6f 92       	push	r6
     444:	7f 92       	push	r7
     446:	af 92       	push	r10
     448:	bf 92       	push	r11
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	0f 2e       	mov	r0, r31
     45c:	fa e9       	ldi	r31, 0x9A	; 154
     45e:	ef 2e       	mov	r14, r31
     460:	f2 e0       	ldi	r31, 0x02	; 2
     462:	ff 2e       	mov	r15, r31
     464:	f0 2d       	mov	r31, r0
     466:	03 e8       	ldi	r16, 0x83	; 131
     468:	13 e0       	ldi	r17, 0x03	; 3
	for(int i = 0; i <= 7; i++){
     46a:	c0 e0       	ldi	r28, 0x00	; 0
     46c:	d0 e0       	ldi	r29, 0x00	; 0
		if(bit_is_set(PINC,i)){
			lineBit[i] = 1;
     46e:	cc 24       	eor	r12, r12
     470:	c3 94       	inc	r12
     472:	d1 2c       	mov	r13, r1
/*_delay_ms(1);*/
}

int getLineTrackerYdata(void){
	for(int i = 0; i <= 7; i++){
		if(bit_is_set(PINC,i)){
     474:	86 b1       	in	r24, 0x06	; 6
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0c 2e       	mov	r0, r28
     47a:	02 c0       	rjmp	.+4      	; 0x480 <_Z19getLineTrackerYdatav+0x42>
     47c:	95 95       	asr	r25
     47e:	87 95       	ror	r24
     480:	0a 94       	dec	r0
     482:	e2 f7       	brpl	.-8      	; 0x47c <_Z19getLineTrackerYdatav+0x3e>
     484:	80 ff       	sbrs	r24, 0
     486:	10 c0       	rjmp	.+32     	; 0x4a8 <_Z19getLineTrackerYdatav+0x6a>
			lineBit[i] = 1;
     488:	f8 01       	movw	r30, r16
     48a:	d1 82       	std	Z+1, r13	; 0x01
     48c:	c0 82       	st	Z, r12
			linestate |= (1<<i);
     48e:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <_ZL9linestate>
     492:	c6 01       	movw	r24, r12
     494:	0c 2e       	mov	r0, r28
     496:	02 c0       	rjmp	.+4      	; 0x49c <_Z19getLineTrackerYdatav+0x5e>
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	0a 94       	dec	r0
     49e:	e2 f7       	brpl	.-8      	; 0x498 <_Z19getLineTrackerYdatav+0x5a>
     4a0:	82 2b       	or	r24, r18
     4a2:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <_ZL9linestate>
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <_Z19getLineTrackerYdatav+0x70>
		}
		else{
			lineBit[i] = 0;
     4a8:	f8 01       	movw	r30, r16
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	10 82       	st	Z, r1
		}
		totalSum += weight[i]*lineBit[i];
     4ae:	f7 01       	movw	r30, r14
     4b0:	81 91       	ld	r24, Z+
     4b2:	91 91       	ld	r25, Z+
     4b4:	7f 01       	movw	r14, r30
     4b6:	f8 01       	movw	r30, r16
     4b8:	a1 90       	ld	r10, Z+
     4ba:	b1 90       	ld	r11, Z+
     4bc:	8f 01       	movw	r16, r30
     4be:	8a 9d       	mul	r24, r10
     4c0:	b0 01       	movw	r22, r0
     4c2:	8b 9d       	mul	r24, r11
     4c4:	70 0d       	add	r23, r0
     4c6:	9a 9d       	mul	r25, r10
     4c8:	70 0d       	add	r23, r0
     4ca:	11 24       	eor	r1, r1
     4cc:	07 2e       	mov	r0, r23
     4ce:	00 0c       	add	r0, r0
     4d0:	88 0b       	sbc	r24, r24
     4d2:	99 0b       	sbc	r25, r25
     4d4:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     4d8:	20 91 97 03 	lds	r18, 0x0397	; 0x800397 <_ZL8totalSum>
     4dc:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <_ZL8totalSum+0x1>
     4e0:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <_ZL8totalSum+0x2>
     4e4:	50 91 9a 03 	lds	r21, 0x039A	; 0x80039a <_ZL8totalSum+0x3>
     4e8:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     4ec:	2b 01       	movw	r4, r22
     4ee:	3c 01       	movw	r6, r24
     4f0:	60 93 97 03 	sts	0x0397, r22	; 0x800397 <_ZL8totalSum>
     4f4:	70 93 98 03 	sts	0x0398, r23	; 0x800398 <_ZL8totalSum+0x1>
     4f8:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <_ZL8totalSum+0x2>
     4fc:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <_ZL8totalSum+0x3>
		totalLine += lineBit[i];
     500:	b5 01       	movw	r22, r10
     502:	bb 0c       	add	r11, r11
     504:	88 0b       	sbc	r24, r24
     506:	99 0b       	sbc	r25, r25
     508:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     50c:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <_ZL9totalLine>
     510:	30 91 94 03 	lds	r19, 0x0394	; 0x800394 <_ZL9totalLine+0x1>
     514:	40 91 95 03 	lds	r20, 0x0395	; 0x800395 <_ZL9totalLine+0x2>
     518:	50 91 96 03 	lds	r21, 0x0396	; 0x800396 <_ZL9totalLine+0x3>
     51c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     520:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <_ZL9totalLine>
     524:	70 93 94 03 	sts	0x0394, r23	; 0x800394 <_ZL9totalLine+0x1>
     528:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <_ZL9totalLine+0x2>
     52c:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <_ZL9totalLine+0x3>
uart2_putc(bufferMotorSpeed[3]);
/*_delay_ms(1);*/
}

int getLineTrackerYdata(void){
	for(int i = 0; i <= 7; i++){
     530:	21 96       	adiw	r28, 0x01	; 1
     532:	c8 30       	cpi	r28, 0x08	; 8
     534:	d1 05       	cpc	r29, r1
     536:	09 f0       	breq	.+2      	; 0x53a <_Z19getLineTrackerYdatav+0xfc>
     538:	9d cf       	rjmp	.-198    	; 0x474 <_Z19getLineTrackerYdatav+0x36>
			lineBit[i] = 0;
		}
		totalSum += weight[i]*lineBit[i];
		totalLine += lineBit[i];
	}
	linetracker_data = totalSum/totalLine;
     53a:	9b 01       	movw	r18, r22
     53c:	ac 01       	movw	r20, r24
     53e:	c3 01       	movw	r24, r6
     540:	b2 01       	movw	r22, r4
     542:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__divsf3>
     546:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     54a:	70 93 9c 03 	sts	0x039C, r23	; 0x80039c <_ZL16linetracker_data+0x1>
     54e:	60 93 9b 03 	sts	0x039B, r22	; 0x80039b <_ZL16linetracker_data>
	totalSum = 0;
     552:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <_ZL8totalSum>
     556:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <_ZL8totalSum+0x1>
     55a:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <_ZL8totalSum+0x2>
     55e:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <_ZL8totalSum+0x3>
	totalLine = 0;
     562:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <_ZL9totalLine>
     566:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <_ZL9totalLine+0x1>
     56a:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <_ZL9totalLine+0x2>
     56e:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <_ZL9totalLine+0x3>
	return linetracker_data;
}
     572:	cb 01       	movw	r24, r22
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	bf 90       	pop	r11
     586:	af 90       	pop	r10
     588:	7f 90       	pop	r7
     58a:	6f 90       	pop	r6
     58c:	5f 90       	pop	r5
     58e:	4f 90       	pop	r4
     590:	08 95       	ret

00000592 <_Z19calculateCompassPIDv>:
	PCMSK2 &= ~(1<<PCINT16);
}


void calculateCompassPID(void)
{
     592:	2f 92       	push	r2
     594:	3f 92       	push	r3
     596:	4f 92       	push	r4
     598:	5f 92       	push	r5
     59a:	6f 92       	push	r6
     59c:	7f 92       	push	r7
     59e:	8f 92       	push	r8
     5a0:	9f 92       	push	r9
     5a2:	af 92       	push	r10
     5a4:	bf 92       	push	r11
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <_Z19calculateCompassPIDv+0x26>
     5b8:	1f 92       	push	r1
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
	if(PidUpdateFlagCompass && compassPID)
     5be:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PidUpdateFlagCompass>
     5c2:	88 23       	and	r24, r24
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <_Z19calculateCompassPIDv+0x36>
     5c6:	1c c1       	rjmp	.+568    	; 0x800 <_Z19calculateCompassPIDv+0x26e>
     5c8:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <compassPID>
     5cc:	88 23       	and	r24, r24
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <_Z19calculateCompassPIDv+0x40>
     5d0:	1b c1       	rjmp	.+566    	; 0x808 <_Z19calculateCompassPIDv+0x276>
	{
		
		compass.input = get_Angle();
     5d2:	c3 de       	rcall	.-634    	; 0x35a <_Z9get_Anglev>
     5d4:	8c 01       	movw	r16, r24
     5d6:	ec e1       	ldi	r30, 0x1C	; 28
     5d8:	f3 e0       	ldi	r31, 0x03	; 3
     5da:	91 83       	std	Z+1, r25	; 0x01
     5dc:	80 83       	st	Z, r24
		
		
		compass.error = compass.SETPOINT	-	compass.input;
     5de:	86 85       	ldd	r24, Z+14	; 0x0e
     5e0:	97 85       	ldd	r25, Z+15	; 0x0f
     5e2:	80 1b       	sub	r24, r16
     5e4:	91 0b       	sbc	r25, r17

		if (compass.error > 180)
     5e6:	85 3b       	cpi	r24, 0xB5	; 181
     5e8:	91 05       	cpc	r25, r1
     5ea:	3c f0       	brlt	.+14     	; 0x5fa <_Z19calculateCompassPIDv+0x68>
		{
			compass.error = compass.error - 360;
     5ec:	88 56       	subi	r24, 0x68	; 104
     5ee:	91 40       	sbci	r25, 0x01	; 1
     5f0:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <compass+0x3>
     5f4:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <compass+0x2>
     5f8:	0f c0       	rjmp	.+30     	; 0x618 <_Z19calculateCompassPIDv+0x86>
		}
		else if (compass.error < -180)
     5fa:	8c 34       	cpi	r24, 0x4C	; 76
     5fc:	2f ef       	ldi	r18, 0xFF	; 255
     5fe:	92 07       	cpc	r25, r18
     600:	2c f0       	brlt	.+10     	; 0x60c <_Z19calculateCompassPIDv+0x7a>
	{
		
		compass.input = get_Angle();
		
		
		compass.error = compass.SETPOINT	-	compass.input;
     602:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <compass+0x3>
     606:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <compass+0x2>
     60a:	06 c0       	rjmp	.+12     	; 0x618 <_Z19calculateCompassPIDv+0x86>
		{
			compass.error = compass.error - 360;
		}
		else if (compass.error < -180)
		{
			compass.error = compass.error + 360;
     60c:	88 59       	subi	r24, 0x98	; 152
     60e:	9e 4f       	sbci	r25, 0xFE	; 254
     610:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <compass+0x3>
     614:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <compass+0x2>
		}
	
		compass.Iterm += compass.ki*compass.error;
     618:	20 90 1e 03 	lds	r2, 0x031E	; 0x80031e <compass+0x2>
     61c:	30 90 1f 03 	lds	r3, 0x031F	; 0x80031f <compass+0x3>
     620:	b1 01       	movw	r22, r2
     622:	03 2c       	mov	r0, r3
     624:	00 0c       	add	r0, r0
     626:	88 0b       	sbc	r24, r24
     628:	99 0b       	sbc	r25, r25
     62a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     62e:	4b 01       	movw	r8, r22
     630:	5c 01       	movw	r10, r24
     632:	20 91 35 03 	lds	r18, 0x0335	; 0x800335 <compass+0x19>
     636:	30 91 36 03 	lds	r19, 0x0336	; 0x800336 <compass+0x1a>
     63a:	40 91 37 03 	lds	r20, 0x0337	; 0x800337 <compass+0x1b>
     63e:	50 91 38 03 	lds	r21, 0x0338	; 0x800338 <compass+0x1c>
     642:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     646:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <compass+0xa>
     64a:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <compass+0xb>
     64e:	40 91 28 03 	lds	r20, 0x0328	; 0x800328 <compass+0xc>
     652:	50 91 29 03 	lds	r21, 0x0329	; 0x800329 <compass+0xd>
     656:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     65a:	6b 01       	movw	r12, r22
     65c:	7c 01       	movw	r14, r24
     65e:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <compass+0xa>
     662:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <compass+0xb>
     666:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <compass+0xc>
     66a:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <compass+0xd>

		if (abs(compass.Iterm) > 0.1*compass.Max_output)
     66e:	60 91 2d 03 	lds	r22, 0x032D	; 0x80032d <compass+0x11>
     672:	70 91 2e 03 	lds	r23, 0x032E	; 0x80032e <compass+0x12>
     676:	07 2e       	mov	r0, r23
     678:	00 0c       	add	r0, r0
     67a:	88 0b       	sbc	r24, r24
     67c:	99 0b       	sbc	r25, r25
     67e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d ec       	ldi	r18, 0xCD	; 205
     68c:	3c ec       	ldi	r19, 0xCC	; 204
     68e:	4c ec       	ldi	r20, 0xCC	; 204
     690:	5d e3       	ldi	r21, 0x3D	; 61
     692:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     696:	2b 01       	movw	r4, r22
     698:	3c 01       	movw	r6, r24
     69a:	c7 01       	movw	r24, r14
     69c:	b6 01       	movw	r22, r12
     69e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     6a2:	9b 01       	movw	r18, r22
     6a4:	77 23       	and	r23, r23
     6a6:	24 f4       	brge	.+8      	; 0x6b0 <_Z19calculateCompassPIDv+0x11e>
     6a8:	22 27       	eor	r18, r18
     6aa:	33 27       	eor	r19, r19
     6ac:	26 1b       	sub	r18, r22
     6ae:	37 0b       	sbc	r19, r23
     6b0:	b9 01       	movw	r22, r18
     6b2:	33 0f       	add	r19, r19
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     6bc:	a3 01       	movw	r20, r6
     6be:	92 01       	movw	r18, r4
     6c0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__gesf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	24 f5       	brge	.+72     	; 0x710 <_Z19calculateCompassPIDv+0x17e>
		{
			if(compass.Iterm > 0)
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	a9 01       	movw	r20, r18
     6ce:	c7 01       	movw	r24, r14
     6d0:	b6 01       	movw	r22, r12
     6d2:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__gesf2>
     6d6:	18 16       	cp	r1, r24
     6d8:	4c f4       	brge	.+18     	; 0x6ec <_Z19calculateCompassPIDv+0x15a>
				compass.Iterm = 0.1*compass.Max_output;
     6da:	40 92 26 03 	sts	0x0326, r4	; 0x800326 <compass+0xa>
     6de:	50 92 27 03 	sts	0x0327, r5	; 0x800327 <compass+0xb>
     6e2:	60 92 28 03 	sts	0x0328, r6	; 0x800328 <compass+0xc>
     6e6:	70 92 29 03 	sts	0x0329, r7	; 0x800329 <compass+0xd>
     6ea:	12 c0       	rjmp	.+36     	; 0x710 <_Z19calculateCompassPIDv+0x17e>
			else
				compass.Iterm = -0.1*compass.Max_output;
     6ec:	2d ec       	ldi	r18, 0xCD	; 205
     6ee:	3c ec       	ldi	r19, 0xCC	; 204
     6f0:	4c ec       	ldi	r20, 0xCC	; 204
     6f2:	5d eb       	ldi	r21, 0xBD	; 189
     6f4:	69 81       	ldd	r22, Y+1	; 0x01
     6f6:	7a 81       	ldd	r23, Y+2	; 0x02
     6f8:	8b 81       	ldd	r24, Y+3	; 0x03
     6fa:	9c 81       	ldd	r25, Y+4	; 0x04
     6fc:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     700:	60 93 26 03 	sts	0x0326, r22	; 0x800326 <compass+0xa>
     704:	70 93 27 03 	sts	0x0327, r23	; 0x800327 <compass+0xb>
     708:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <compass+0xc>
     70c:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <compass+0xd>
		}
		
		if (abs(compass.error) > 2 )
     710:	c1 01       	movw	r24, r2
     712:	99 23       	and	r25, r25
     714:	24 f4       	brge	.+8      	; 0x71e <_Z19calculateCompassPIDv+0x18c>
     716:	88 27       	eor	r24, r24
     718:	99 27       	eor	r25, r25
     71a:	82 19       	sub	r24, r2
     71c:	93 09       	sbc	r25, r3
     71e:	03 97       	sbiw	r24, 0x03	; 3
     720:	e4 f1       	brlt	.+120    	; 0x79a <_Z19calculateCompassPIDv+0x208>
		{
			compass.output = compass.kp*compass.error	-	compass.kd*(compass.input-compass.prevInput)	+	compass.Iterm;
     722:	20 91 31 03 	lds	r18, 0x0331	; 0x800331 <compass+0x15>
     726:	30 91 32 03 	lds	r19, 0x0332	; 0x800332 <compass+0x16>
     72a:	40 91 33 03 	lds	r20, 0x0333	; 0x800333 <compass+0x17>
     72e:	50 91 34 03 	lds	r21, 0x0334	; 0x800334 <compass+0x18>
     732:	c5 01       	movw	r24, r10
     734:	b4 01       	movw	r22, r8
     736:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     73a:	6b 01       	movw	r12, r22
     73c:	7c 01       	movw	r14, r24
     73e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <compass+0x4>
     742:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <compass+0x5>
     746:	b8 01       	movw	r22, r16
     748:	68 1b       	sub	r22, r24
     74a:	79 0b       	sbc	r23, r25
     74c:	07 2e       	mov	r0, r23
     74e:	00 0c       	add	r0, r0
     750:	88 0b       	sbc	r24, r24
     752:	99 0b       	sbc	r25, r25
     754:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     758:	20 91 39 03 	lds	r18, 0x0339	; 0x800339 <compass+0x1d>
     75c:	30 91 3a 03 	lds	r19, 0x033A	; 0x80033a <compass+0x1e>
     760:	40 91 3b 03 	lds	r20, 0x033B	; 0x80033b <compass+0x1f>
     764:	50 91 3c 03 	lds	r21, 0x033C	; 0x80033c <compass+0x20>
     768:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     76c:	9b 01       	movw	r18, r22
     76e:	ac 01       	movw	r20, r24
     770:	c7 01       	movw	r24, r14
     772:	b6 01       	movw	r22, r12
     774:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__subsf3>
     778:	20 91 26 03 	lds	r18, 0x0326	; 0x800326 <compass+0xa>
     77c:	30 91 27 03 	lds	r19, 0x0327	; 0x800327 <compass+0xb>
     780:	40 91 28 03 	lds	r20, 0x0328	; 0x800328 <compass+0xc>
     784:	50 91 29 03 	lds	r21, 0x0329	; 0x800329 <compass+0xd>
     788:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     78c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     790:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <compass+0x7>
     794:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <compass+0x6>
     798:	08 c0       	rjmp	.+16     	; 0x7aa <_Z19calculateCompassPIDv+0x218>
		}
		else
		{
			compass.Iterm = 0;
     79a:	ec e1       	ldi	r30, 0x1C	; 28
     79c:	f3 e0       	ldi	r31, 0x03	; 3
     79e:	12 86       	std	Z+10, r1	; 0x0a
     7a0:	13 86       	std	Z+11, r1	; 0x0b
     7a2:	14 86       	std	Z+12, r1	; 0x0c
     7a4:	15 86       	std	Z+13, r1	; 0x0d
			compass.output = 0;
     7a6:	17 82       	std	Z+7, r1	; 0x07
     7a8:	16 82       	std	Z+6, r1	; 0x06
		}
			
		compass.prevInput = compass.input;
     7aa:	ec e1       	ldi	r30, 0x1C	; 28
     7ac:	f3 e0       	ldi	r31, 0x03	; 3
     7ae:	80 81       	ld	r24, Z
     7b0:	91 81       	ldd	r25, Z+1	; 0x01
     7b2:	95 83       	std	Z+5, r25	; 0x05
     7b4:	84 83       	std	Z+4, r24	; 0x04
		//uart0_puts("\tprevInput= ");
		//uart0_putint(compass.prevInput);
		
		if (abs(compass.output) > compass.Max_output)
     7b6:	86 81       	ldd	r24, Z+6	; 0x06
     7b8:	97 81       	ldd	r25, Z+7	; 0x07
     7ba:	21 89       	ldd	r18, Z+17	; 0x11
     7bc:	32 89       	ldd	r19, Z+18	; 0x12
     7be:	ac 01       	movw	r20, r24
     7c0:	99 23       	and	r25, r25
     7c2:	24 f4       	brge	.+8      	; 0x7cc <_Z19calculateCompassPIDv+0x23a>
     7c4:	44 27       	eor	r20, r20
     7c6:	55 27       	eor	r21, r21
     7c8:	48 1b       	sub	r20, r24
     7ca:	59 0b       	sbc	r21, r25
     7cc:	24 17       	cp	r18, r20
     7ce:	35 07       	cpc	r19, r21
     7d0:	54 f4       	brge	.+20     	; 0x7e6 <_Z19calculateCompassPIDv+0x254>
		{
			compass.output = (compass.output > compass.Max_output) ?	compass.Max_output : -compass.Max_output;
     7d2:	28 17       	cp	r18, r24
     7d4:	39 07       	cpc	r19, r25
     7d6:	1c f0       	brlt	.+6      	; 0x7de <_Z19calculateCompassPIDv+0x24c>
     7d8:	31 95       	neg	r19
     7da:	21 95       	neg	r18
     7dc:	31 09       	sbc	r19, r1
     7de:	30 93 23 03 	sts	0x0323, r19	; 0x800323 <compass+0x7>
     7e2:	20 93 22 03 	sts	0x0322, r18	; 0x800322 <compass+0x6>
		}

		velocity_robot[2] = -compass.output;
     7e6:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <compass+0x6>
     7ea:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <compass+0x7>
     7ee:	91 95       	neg	r25
     7f0:	81 95       	neg	r24
     7f2:	91 09       	sbc	r25, r1
     7f4:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <velocity_robot+0x5>
     7f8:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <velocity_robot+0x4>
		
		PidUpdateFlagCompass = false;
     7fc:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <PidUpdateFlagCompass>
	}
	
	if(!compassPID){
     800:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <compassPID>
     804:	81 11       	cpse	r24, r1
     806:	04 c0       	rjmp	.+8      	; 0x810 <_Z19calculateCompassPIDv+0x27e>
		velocity_robot[2] = 0;
     808:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <velocity_robot+0x5>
     80c:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <velocity_robot+0x4>
	}
}
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	bf 90       	pop	r11
     82a:	af 90       	pop	r10
     82c:	9f 90       	pop	r9
     82e:	8f 90       	pop	r8
     830:	7f 90       	pop	r7
     832:	6f 90       	pop	r6
     834:	5f 90       	pop	r5
     836:	4f 90       	pop	r4
     838:	3f 90       	pop	r3
     83a:	2f 90       	pop	r2
     83c:	08 95       	ret

0000083e <_Z12Stable_Robotv>:

bool Stable_Robot(void)
{
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	c4 e6       	ldi	r28, 0x64	; 100
	uint16_t _angle = 0;
     84a:	e1 2c       	mov	r14, r1
     84c:	f1 2c       	mov	r15, r1
	uint16_t _get_angle = 0;
	for (uint8_t i = 0; i< 100; i++)
	{
		_get_angle = get_Angle();
		if(_get_angle<(compass.SETPOINT+1) && _get_angle>(compass.SETPOINT-1))
     84e:	0c e1       	ldi	r16, 0x1C	; 28
     850:	13 e0       	ldi	r17, 0x03	; 3
{
	uint16_t _angle = 0;
	uint16_t _get_angle = 0;
	for (uint8_t i = 0; i< 100; i++)
	{
		_get_angle = get_Angle();
     852:	83 dd       	rcall	.-1274   	; 0x35a <_Z9get_Anglev>
		if(_get_angle<(compass.SETPOINT+1) && _get_angle>(compass.SETPOINT-1))
     854:	f8 01       	movw	r30, r16
     856:	46 85       	ldd	r20, Z+14	; 0x0e
     858:	57 85       	ldd	r21, Z+15	; 0x0f
     85a:	9a 01       	movw	r18, r20
     85c:	2f 5f       	subi	r18, 0xFF	; 255
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	82 17       	cp	r24, r18
     862:	93 07       	cpc	r25, r19
     864:	40 f4       	brcc	.+16     	; 0x876 <_Z12Stable_Robotv+0x38>
     866:	41 50       	subi	r20, 0x01	; 1
     868:	51 09       	sbc	r21, r1
     86a:	48 17       	cp	r20, r24
     86c:	59 07       	cpc	r21, r25
		{ _angle += get_Angle();}
     86e:	18 f4       	brcc	.+6      	; 0x876 <_Z12Stable_Robotv+0x38>
     870:	74 dd       	rcall	.-1304   	; 0x35a <_Z9get_Anglev>
     872:	e8 0e       	add	r14, r24
     874:	f9 1e       	adc	r15, r25
     876:	c1 50       	subi	r28, 0x01	; 1

bool Stable_Robot(void)
{
	uint16_t _angle = 0;
	uint16_t _get_angle = 0;
	for (uint8_t i = 0; i< 100; i++)
     878:	61 f7       	brne	.-40     	; 0x852 <_Z12Stable_Robotv+0x14>
		_get_angle = get_Angle();
		if(_get_angle<(compass.SETPOINT+1) && _get_angle>(compass.SETPOINT-1))
		{ _angle += get_Angle();}
	}
	_angle= _angle/100;
	if (abs(compass.SETPOINT - _angle) <=2) return 1;
     87a:	97 01       	movw	r18, r14
     87c:	36 95       	lsr	r19
     87e:	27 95       	ror	r18
     880:	36 95       	lsr	r19
     882:	27 95       	ror	r18
     884:	ab e7       	ldi	r26, 0x7B	; 123
     886:	b4 e1       	ldi	r27, 0x14	; 20
     888:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__umulhisi3>
     88c:	96 95       	lsr	r25
     88e:	87 95       	ror	r24
     890:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <compass+0xe>
     894:	30 91 2b 03 	lds	r19, 0x032B	; 0x80032b <compass+0xf>
     898:	28 1b       	sub	r18, r24
     89a:	39 0b       	sbc	r19, r25
     89c:	2e 3f       	cpi	r18, 0xFE	; 254
     89e:	ff ef       	ldi	r31, 0xFF	; 255
     8a0:	3f 07       	cpc	r19, r31
     8a2:	34 f0       	brlt	.+12     	; 0x8b0 <_Z12Stable_Robotv+0x72>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	23 30       	cpi	r18, 0x03	; 3
     8a8:	31 05       	cpc	r19, r1
     8aa:	1c f0       	brlt	.+6      	; 0x8b2 <_Z12Stable_Robotv+0x74>
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <_Z12Stable_Robotv+0x74>
	else return 0;
     8b0:	80 e0       	ldi	r24, 0x00	; 0
}
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	08 95       	ret

000008be <_Z12calculatevelv>:


void calculatevel()	//use matrix to find setpoint of individual motor and store in bufferMotorSpeed and send to slave
{
     8be:	2f 92       	push	r2
     8c0:	3f 92       	push	r3
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	8f 92       	push	r8
     8cc:	9f 92       	push	r9
     8ce:	af 92       	push	r10
     8d0:	bf 92       	push	r11
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <_Z12calculatevelv+0x26>
     8e4:	1f 92       	push	r1
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	0f 2e       	mov	r0, r31
     8ec:	fd ea       	ldi	r31, 0xAD	; 173
     8ee:	cf 2e       	mov	r12, r31
     8f0:	f3 e0       	ldi	r31, 0x03	; 3
     8f2:	df 2e       	mov	r13, r31
     8f4:	f0 2d       	mov	r31, r0
     8f6:	0f 2e       	mov	r0, r31
     8f8:	f9 e0       	ldi	r31, 0x09	; 9
     8fa:	4f 2e       	mov	r4, r31
     8fc:	f2 e0       	ldi	r31, 0x02	; 2
     8fe:	5f 2e       	mov	r5, r31
     900:	f0 2d       	mov	r31, r0
     902:	0f 2e       	mov	r0, r31
     904:	f5 eb       	ldi	r31, 0xB5	; 181
     906:	2f 2e       	mov	r2, r31
     908:	f3 e0       	ldi	r31, 0x03	; 3
     90a:	3f 2e       	mov	r3, r31
     90c:	f0 2d       	mov	r31, r0
     90e:	0f 2e       	mov	r0, r31
     910:	fd ea       	ldi	r31, 0xAD	; 173
     912:	6f 2e       	mov	r6, r31
     914:	f3 e0       	ldi	r31, 0x03	; 3
     916:	7f 2e       	mov	r7, r31
     918:	f0 2d       	mov	r31, r0
     91a:	da 82       	std	Y+2, r13	; 0x02
     91c:	c9 82       	std	Y+1, r12	; 0x01
     91e:	07 ea       	ldi	r16, 0xA7	; 167
     920:	13 e0       	ldi	r17, 0x03	; 3
     922:	72 01       	movw	r14, r4
     924:	1b 82       	std	Y+3, r1	; 0x03
     926:	1c 82       	std	Y+4, r1	; 0x04
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
		for(int j=0;j<3;j++)
		{
			velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
     928:	d8 01       	movw	r26, r16
     92a:	6d 91       	ld	r22, X+
     92c:	7d 91       	ld	r23, X+
     92e:	8d 01       	movw	r16, r26
     930:	f7 01       	movw	r30, r14
     932:	81 90       	ld	r8, Z+
     934:	91 90       	ld	r9, Z+
     936:	a1 90       	ld	r10, Z+
     938:	b1 90       	ld	r11, Z+
     93a:	7f 01       	movw	r14, r30
     93c:	07 2e       	mov	r0, r23
     93e:	00 0c       	add	r0, r0
     940:	88 0b       	sbc	r24, r24
     942:	99 0b       	sbc	r25, r25
     944:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     948:	a5 01       	movw	r20, r10
     94a:	94 01       	movw	r18, r8
     94c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     950:	4b 01       	movw	r8, r22
     952:	5c 01       	movw	r10, r24
     954:	2b 81       	ldd	r18, Y+3	; 0x03
     956:	3c 81       	ldd	r19, Y+4	; 0x04
     958:	b9 01       	movw	r22, r18
     95a:	33 0f       	add	r19, r19
     95c:	88 0b       	sbc	r24, r24
     95e:	99 0b       	sbc	r25, r25
     960:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	c5 01       	movw	r24, r10
     96a:	b4 01       	movw	r22, r8
     96c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     970:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     974:	7c 83       	std	Y+4, r23	; 0x04
     976:	6b 83       	std	Y+3, r22	; 0x03
void calculatevel()	//use matrix to find setpoint of individual motor and store in bufferMotorSpeed and send to slave
{
	for(int i=0;i<4;i++)
	{
		velocity_motor[i] = 0;
		for(int j=0;j<3;j++)
     978:	06 15       	cp	r16, r6
     97a:	17 05       	cpc	r17, r7
     97c:	a9 f6       	brne	.-86     	; 0x928 <_Z12calculatevelv+0x6a>
     97e:	a9 81       	ldd	r26, Y+1	; 0x01
     980:	ba 81       	ldd	r27, Y+2	; 0x02
     982:	6d 93       	st	X+, r22
     984:	7c 93       	st	X, r23
     986:	f2 e0       	ldi	r31, 0x02	; 2
     988:	cf 0e       	add	r12, r31
     98a:	d1 1c       	adc	r13, r1
     98c:	2c e0       	ldi	r18, 0x0C	; 12
     98e:	42 0e       	add	r4, r18
     990:	51 1c       	adc	r5, r1
}


void calculatevel()	//use matrix to find setpoint of individual motor and store in bufferMotorSpeed and send to slave
{
	for(int i=0;i<4;i++)
     992:	c2 14       	cp	r12, r2
     994:	d3 04       	cpc	r13, r3
     996:	09 f6       	brne	.-126    	; 0x91a <_Z12calculatevelv+0x5c>
		{
			velocity_motor[i] += velocity_robot[j] * coupling_matrix[i][j];
			
		}
	}
	bufferMotorSpeed[0] = ((velocity_motor[0]) * 23)/249;	  
     998:	e5 eb       	ldi	r30, 0xB5	; 181
     99a:	f3 e0       	ldi	r31, 0x03	; 3
     99c:	ad ea       	ldi	r26, 0xAD	; 173
     99e:	b3 e0       	ldi	r27, 0x03	; 3
     9a0:	2d 91       	ld	r18, X+
     9a2:	3c 91       	ld	r19, X
     9a4:	47 e1       	ldi	r20, 0x17	; 23
     9a6:	42 9f       	mul	r20, r18
     9a8:	c0 01       	movw	r24, r0
     9aa:	43 9f       	mul	r20, r19
     9ac:	90 0d       	add	r25, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	29 ef       	ldi	r18, 0xF9	; 249
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	b9 01       	movw	r22, r18
     9b6:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__divmodhi4>
     9ba:	60 83       	st	Z, r22
	bufferMotorSpeed[1] = ((velocity_motor[1]) * 23)/249;	  
     9bc:	60 91 af 03 	lds	r22, 0x03AF	; 0x8003af <velocity_motor+0x2>
     9c0:	70 91 b0 03 	lds	r23, 0x03B0	; 0x8003b0 <velocity_motor+0x3>
     9c4:	46 9f       	mul	r20, r22
     9c6:	c0 01       	movw	r24, r0
     9c8:	47 9f       	mul	r20, r23
     9ca:	90 0d       	add	r25, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	b9 01       	movw	r22, r18
     9d0:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__divmodhi4>
     9d4:	61 83       	std	Z+1, r22	; 0x01
	bufferMotorSpeed[2] = ((velocity_motor[2]) * 23)/249;	  
     9d6:	60 91 b1 03 	lds	r22, 0x03B1	; 0x8003b1 <velocity_motor+0x4>
     9da:	70 91 b2 03 	lds	r23, 0x03B2	; 0x8003b2 <velocity_motor+0x5>
     9de:	46 9f       	mul	r20, r22
     9e0:	c0 01       	movw	r24, r0
     9e2:	47 9f       	mul	r20, r23
     9e4:	90 0d       	add	r25, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	b9 01       	movw	r22, r18
     9ea:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__divmodhi4>
     9ee:	62 83       	std	Z+2, r22	; 0x02
	bufferMotorSpeed[3] = ((velocity_motor[3]) * 23)/249 ;
     9f0:	60 91 b3 03 	lds	r22, 0x03B3	; 0x8003b3 <velocity_motor+0x6>
     9f4:	70 91 b4 03 	lds	r23, 0x03B4	; 0x8003b4 <velocity_motor+0x7>
     9f8:	46 9f       	mul	r20, r22
     9fa:	c0 01       	movw	r24, r0
     9fc:	47 9f       	mul	r20, r23
     9fe:	90 0d       	add	r25, r0
     a00:	11 24       	eor	r1, r1
     a02:	b9 01       	movw	r22, r18
     a04:	0e 94 08 17 	call	0x2e10	; 0x2e10 <__divmodhi4>
     a08:	63 83       	std	Z+3, r22	; 0x03
	
	sendDataToSlave();  
     a0a:	03 dd       	rcall	.-1530   	; 0x412 <_Z15sendDataToSlavev>
}		
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
     a2c:	7f 90       	pop	r7
     a2e:	6f 90       	pop	r6
     a30:	5f 90       	pop	r5
     a32:	4f 90       	pop	r4
     a34:	3f 90       	pop	r3
     a36:	2f 90       	pop	r2
     a38:	08 95       	ret

00000a3a <_Z24calculateLineTrackerYPidv>:



void calculateLineTrackerYPid()
{
     a3a:	8f 92       	push	r8
     a3c:	9f 92       	push	r9
     a3e:	af 92       	push	r10
     a40:	bf 92       	push	r11
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
 	if(ltY.FirstData && getLineTrackerYdata() != 0){
     a52:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <ltY+0x10>
     a56:	88 23       	and	r24, r24
     a58:	51 f0       	breq	.+20     	; 0xa6e <_Z24calculateLineTrackerYPidv+0x34>
     a5a:	f1 dc       	rcall	.-1566   	; 0x43e <_Z19getLineTrackerYdatav>
     a5c:	89 2b       	or	r24, r25
     a5e:	39 f0       	breq	.+14     	; 0xa6e <_Z24calculateLineTrackerYPidv+0x34>
 		ltY.prevInput = getLineTrackerYdata();
     a60:	ee dc       	rcall	.-1572   	; 0x43e <_Z19getLineTrackerYdatav>
     a62:	ed e3       	ldi	r30, 0x3D	; 61
     a64:	f3 e0       	ldi	r31, 0x03	; 3
     a66:	95 83       	std	Z+5, r25	; 0x05
     a68:	84 83       	std	Z+4, r24	; 0x04
     a6a:	10 8a       	std	Z+16, r1	; 0x10
 		ltY.FirstData = false;
     a6c:	db c0       	rjmp	.+438    	; 0xc24 <_Z24calculateLineTrackerYPidv+0x1ea>
     a6e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <PidUpdateFlagLinetracker>
 	}
	else if(PidUpdateFlagLinetracker && linetrackerPID){
     a72:	88 23       	and	r24, r24
     a74:	09 f4       	brne	.+2      	; 0xa78 <_Z24calculateLineTrackerYPidv+0x3e>
     a76:	d6 c0       	rjmp	.+428    	; 0xc24 <_Z24calculateLineTrackerYPidv+0x1ea>
     a78:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <linetrackerPID>
     a7c:	88 23       	and	r24, r24
     a7e:	09 f4       	brne	.+2      	; 0xa82 <_Z24calculateLineTrackerYPidv+0x48>
     a80:	d5 c0       	rjmp	.+426    	; 0xc2c <_Z24calculateLineTrackerYPidv+0x1f2>
		ltY.input = getLineTrackerYdata();
     a82:	dd dc       	rcall	.-1606   	; 0x43e <_Z19getLineTrackerYdatav>
     a84:	ec 01       	movw	r28, r24
     a86:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <ltY+0x1>
     a8a:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <ltY>
     a8e:	89 2b       	or	r24, r25
		//if linetracker input is not zero///
		if(ltY.input != 0 && lineMeet){
     a90:	09 f4       	brne	.+2      	; 0xa94 <_Z24calculateLineTrackerYPidv+0x5a>
     a92:	c6 c0       	rjmp	.+396    	; 0xc20 <_Z24calculateLineTrackerYPidv+0x1e6>
     a94:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <lineMeet>
     a98:	88 23       	and	r24, r24
     a9a:	09 f4       	brne	.+2      	; 0xa9e <_Z24calculateLineTrackerYPidv+0x64>
     a9c:	c1 c0       	rjmp	.+386    	; 0xc20 <_Z24calculateLineTrackerYPidv+0x1e6>
     a9e:	ed e3       	ldi	r30, 0x3D	; 61
			//uart0_puts("calculating\n");
			ltY.error = ltY.SETPOINT - ltY.input;
     aa0:	f3 e0       	ldi	r31, 0x03	; 3
     aa2:	66 85       	ldd	r22, Z+14	; 0x0e
     aa4:	77 85       	ldd	r23, Z+15	; 0x0f
     aa6:	6c 1b       	sub	r22, r28
     aa8:	7d 0b       	sbc	r23, r29
     aaa:	73 83       	std	Z+3, r23	; 0x03
     aac:	62 83       	std	Z+2, r22	; 0x02
     aae:	61 15       	cp	r22, r1
			if((ltY.error) == 0)
     ab0:	71 05       	cpc	r23, r1
     ab2:	31 f4       	brne	.+12     	; 0xac0 <_Z24calculateLineTrackerYPidv+0x86>
     ab4:	12 86       	std	Z+10, r1	; 0x0a
			{
				ltY.Iterm = 0;
     ab6:	13 86       	std	Z+11, r1	; 0x0b
     ab8:	14 86       	std	Z+12, r1	; 0x0c
     aba:	15 86       	std	Z+13, r1	; 0x0d
     abc:	d5 83       	std	Z+5, r29	; 0x05
			}
			if(ltY.error == 0)
				ltY.prevInput = ltY.input;
     abe:	c4 83       	std	Z+4, r28	; 0x04
     ac0:	07 2e       	mov	r0, r23
			ltY.Iterm += ltY.ki * ltY.error;
     ac2:	00 0c       	add	r0, r0
     ac4:	88 0b       	sbc	r24, r24
     ac6:	99 0b       	sbc	r25, r25
     ac8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     acc:	4b 01       	movw	r8, r22
     ace:	5c 01       	movw	r10, r24
     ad0:	0d e3       	ldi	r16, 0x3D	; 61
     ad2:	13 e0       	ldi	r17, 0x03	; 3
     ad4:	f8 01       	movw	r30, r16
     ad6:	21 8d       	ldd	r18, Z+25	; 0x19
     ad8:	32 8d       	ldd	r19, Z+26	; 0x1a
     ada:	43 8d       	ldd	r20, Z+27	; 0x1b
     adc:	54 8d       	ldd	r21, Z+28	; 0x1c
     ade:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     ae2:	f8 01       	movw	r30, r16
     ae4:	22 85       	ldd	r18, Z+10	; 0x0a
     ae6:	33 85       	ldd	r19, Z+11	; 0x0b
     ae8:	44 85       	ldd	r20, Z+12	; 0x0c
     aea:	55 85       	ldd	r21, Z+13	; 0x0d
     aec:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     af0:	6b 01       	movw	r12, r22
     af2:	7c 01       	movw	r14, r24
     af4:	f8 01       	movw	r30, r16
     af6:	62 87       	std	Z+10, r22	; 0x0a
     af8:	73 87       	std	Z+11, r23	; 0x0b
     afa:	84 87       	std	Z+12, r24	; 0x0c
     afc:	95 87       	std	Z+13, r25	; 0x0d
     afe:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
			if(abs(ltY.Iterm) > 10){
     b02:	9b 01       	movw	r18, r22
     b04:	77 23       	and	r23, r23
     b06:	24 f4       	brge	.+8      	; 0xb10 <_Z24calculateLineTrackerYPidv+0xd6>
     b08:	22 27       	eor	r18, r18
     b0a:	33 27       	eor	r19, r19
     b0c:	26 1b       	sub	r18, r22
     b0e:	37 0b       	sbc	r19, r23
     b10:	2b 30       	cpi	r18, 0x0B	; 11
     b12:	31 05       	cpc	r19, r1
     b14:	5c f1       	brlt	.+86     	; 0xb6c <_Z24calculateLineTrackerYPidv+0x132>
     b16:	20 e0       	ldi	r18, 0x00	; 0
				if(ltY.Iterm > 0)	ltY.Iterm = 5;
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	a9 01       	movw	r20, r18
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__gesf2>
     b24:	18 16       	cp	r1, r24
     b26:	6c f4       	brge	.+26     	; 0xb42 <_Z24calculateLineTrackerYPidv+0x108>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 ea       	ldi	r26, 0xA0	; 160
     b2e:	b0 e4       	ldi	r27, 0x40	; 64
     b30:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <ltY+0xa>
     b34:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <ltY+0xb>
     b38:	a0 93 49 03 	sts	0x0349, r26	; 0x800349 <ltY+0xc>
     b3c:	b0 93 4a 03 	sts	0x034A, r27	; 0x80034a <ltY+0xd>
     b40:	15 c0       	rjmp	.+42     	; 0xb6c <_Z24calculateLineTrackerYPidv+0x132>
     b42:	20 e0       	ldi	r18, 0x00	; 0
				else if(ltY.Iterm < 0)	ltY.Iterm = -5;
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	a9 01       	movw	r20, r18
     b48:	c7 01       	movw	r24, r14
     b4a:	b6 01       	movw	r22, r12
     b4c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__cmpsf2>
     b50:	88 23       	and	r24, r24
     b52:	64 f4       	brge	.+24     	; 0xb6c <_Z24calculateLineTrackerYPidv+0x132>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 ea       	ldi	r26, 0xA0	; 160
     b5a:	b0 ec       	ldi	r27, 0xC0	; 192
     b5c:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <ltY+0xa>
     b60:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <ltY+0xb>
     b64:	a0 93 49 03 	sts	0x0349, r26	; 0x800349 <ltY+0xc>
     b68:	b0 93 4a 03 	sts	0x034A, r27	; 0x80034a <ltY+0xd>
     b6c:	0d e3       	ldi	r16, 0x3D	; 61
			}
			ltY.output = ltY.kp * ltY.error + ltY.Iterm - ltY.kd *(ltY.input - ltY.prevInput);
     b6e:	13 e0       	ldi	r17, 0x03	; 3
     b70:	f8 01       	movw	r30, r16
     b72:	25 89       	ldd	r18, Z+21	; 0x15
     b74:	36 89       	ldd	r19, Z+22	; 0x16
     b76:	47 89       	ldd	r20, Z+23	; 0x17
     b78:	50 8d       	ldd	r21, Z+24	; 0x18
     b7a:	c5 01       	movw	r24, r10
     b7c:	b4 01       	movw	r22, r8
     b7e:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     b82:	f8 01       	movw	r30, r16
     b84:	22 85       	ldd	r18, Z+10	; 0x0a
     b86:	33 85       	ldd	r19, Z+11	; 0x0b
     b88:	44 85       	ldd	r20, Z+12	; 0x0c
     b8a:	55 85       	ldd	r21, Z+13	; 0x0d
     b8c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     b90:	6b 01       	movw	r12, r22
     b92:	7c 01       	movw	r14, r24
     b94:	f8 01       	movw	r30, r16
     b96:	84 81       	ldd	r24, Z+4	; 0x04
     b98:	95 81       	ldd	r25, Z+5	; 0x05
     b9a:	be 01       	movw	r22, r28
     b9c:	68 1b       	sub	r22, r24
     b9e:	79 0b       	sbc	r23, r25
     ba0:	07 2e       	mov	r0, r23
     ba2:	00 0c       	add	r0, r0
     ba4:	88 0b       	sbc	r24, r24
     ba6:	99 0b       	sbc	r25, r25
     ba8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     bac:	f8 01       	movw	r30, r16
     bae:	25 8d       	ldd	r18, Z+29	; 0x1d
     bb0:	36 8d       	ldd	r19, Z+30	; 0x1e
     bb2:	47 8d       	ldd	r20, Z+31	; 0x1f
     bb4:	50 a1       	ldd	r21, Z+32	; 0x20
     bb6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     bba:	9b 01       	movw	r18, r22
     bbc:	ac 01       	movw	r20, r24
     bbe:	c7 01       	movw	r24, r14
     bc0:	b6 01       	movw	r22, r12
     bc2:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__subsf3>
     bc6:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     bca:	9b 01       	movw	r18, r22
     bcc:	f8 01       	movw	r30, r16
     bce:	77 83       	std	Z+7, r23	; 0x07
     bd0:	66 83       	std	Z+6, r22	; 0x06
     bd2:	d5 83       	std	Z+5, r29	; 0x05
			ltY.prevInput = ltY.input;
     bd4:	c4 83       	std	Z+4, r28	; 0x04
     bd6:	ab 01       	movw	r20, r22
			if (abs(ltY.output) > 40)
     bd8:	77 23       	and	r23, r23
     bda:	24 f4       	brge	.+8      	; 0xbe4 <_Z24calculateLineTrackerYPidv+0x1aa>
     bdc:	44 27       	eor	r20, r20
     bde:	55 27       	eor	r21, r21
     be0:	46 1b       	sub	r20, r22
     be2:	57 0b       	sbc	r21, r23
     be4:	49 32       	cpi	r20, 0x29	; 41
     be6:	51 05       	cpc	r21, r1
     be8:	84 f0       	brlt	.+32     	; 0xc0a <_Z24calculateLineTrackerYPidv+0x1d0>
     bea:	12 16       	cp	r1, r18
			{
				if (ltY.output > 0){ltY.output = 40;}
     bec:	13 06       	cpc	r1, r19
     bee:	3c f4       	brge	.+14     	; 0xbfe <_Z24calculateLineTrackerYPidv+0x1c4>
     bf0:	88 e2       	ldi	r24, 0x28	; 40
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <ltY+0x7>
     bf8:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <ltY+0x6>
     bfc:	06 c0       	rjmp	.+12     	; 0xc0a <_Z24calculateLineTrackerYPidv+0x1d0>
     bfe:	88 ed       	ldi	r24, 0xD8	; 216
				else{ltY.output = -40;}
     c00:	9f ef       	ldi	r25, 0xFF	; 255
     c02:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <ltY+0x7>
     c06:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <ltY+0x6>
     c0a:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <ltY+0x6>
			}
			velocity_robot[0] = -ltY.output;
     c0e:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <ltY+0x7>
     c12:	91 95       	neg	r25
     c14:	81 95       	neg	r24
     c16:	91 09       	sbc	r25, r1
     c18:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <velocity_robot+0x1>
     c1c:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <velocity_robot>
     c20:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <PidUpdateFlagLinetracker>
		}

		PidUpdateFlagLinetracker = false;
     c24:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <linetrackerPID>
		
	}
	if(!linetrackerPID)
     c28:	81 11       	cpse	r24, r1
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <_Z24calculateLineTrackerYPidv+0x1fa>
     c2c:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <velocity_robot+0x1>
		velocity_robot[0] = 0;
     c30:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <velocity_robot>
     c34:	df 91       	pop	r29
	
}
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	8f 90       	pop	r8
     c4c:	08 95       	ret

00000c4e <_Z13initializeAllv>:
     c4e:	cf 93       	push	r28



void initializeAll()
{
     c50:	df 93       	push	r29
		ki = i;
		kd = d;
	}
	void Set_Max_Min_Output (int Max_dum, int Min_dum)
	{
		Max_output = Max_dum;
     c52:	cc e1       	ldi	r28, 0x1C	; 28
     c54:	d3 e0       	ldi	r29, 0x03	; 3
     c56:	88 e2       	ldi	r24, 0x28	; 40
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	9a 8b       	std	Y+18, r25	; 0x12
     c5c:	89 8b       	std	Y+17, r24	; 0x11
		Min_output = Min_dum;
     c5e:	1c 8a       	std	Y+20, r1	; 0x14
     c60:	1b 8a       	std	Y+19, r1	; 0x13
void initializeAll()
{
	
	compass.Set_Max_Min_Output(40,0);	
	
	ltY.SETPOINT = 45;
     c62:	ed e3       	ldi	r30, 0x3D	; 61
     c64:	f3 e0       	ldi	r31, 0x03	; 3
     c66:	8d e2       	ldi	r24, 0x2D	; 45
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	97 87       	std	Z+15, r25	; 0x0f
     c6c:	86 87       	std	Z+14, r24	; 0x0e
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	a0 e0       	ldi	r26, 0x00	; 0
     c74:	b0 e4       	ldi	r27, 0x40	; 64
     c76:	8d 8b       	std	Y+21, r24	; 0x15
     c78:	9e 8b       	std	Y+22, r25	; 0x16
     c7a:	af 8b       	std	Y+23, r26	; 0x17
     c7c:	b8 8f       	std	Y+24, r27	; 0x18
		ki = i;
     c7e:	19 8e       	std	Y+25, r1	; 0x19
     c80:	1a 8e       	std	Y+26, r1	; 0x1a
     c82:	1b 8e       	std	Y+27, r1	; 0x1b
     c84:	1c 8e       	std	Y+28, r1	; 0x1c
		kd = d;
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a8 ef       	ldi	r26, 0xF8	; 248
     c8c:	b1 e4       	ldi	r27, 0x41	; 65
     c8e:	8d 8f       	std	Y+29, r24	; 0x1d
     c90:	9e 8f       	std	Y+30, r25	; 0x1e
     c92:	af 8f       	std	Y+31, r26	; 0x1f
     c94:	b8 a3       	std	Y+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
     c96:	81 ee       	ldi	r24, 0xE1	; 225
     c98:	9a e7       	ldi	r25, 0x7A	; 122
     c9a:	a4 e1       	ldi	r26, 0x14	; 20
     c9c:	bf e3       	ldi	r27, 0x3F	; 63
     c9e:	85 8b       	std	Z+21, r24	; 0x15
     ca0:	96 8b       	std	Z+22, r25	; 0x16
     ca2:	a7 8b       	std	Z+23, r26	; 0x17
     ca4:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
     ca6:	8d ec       	ldi	r24, 0xCD	; 205
     ca8:	9c ec       	ldi	r25, 0xCC	; 204
     caa:	ac e4       	ldi	r26, 0x4C	; 76
     cac:	bd e3       	ldi	r27, 0x3D	; 61
     cae:	81 8f       	std	Z+25, r24	; 0x19
     cb0:	92 8f       	std	Z+26, r25	; 0x1a
     cb2:	a3 8f       	std	Z+27, r26	; 0x1b
     cb4:	b4 8f       	std	Z+28, r27	; 0x1c
		kd = d;
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a9 eb       	ldi	r26, 0xB9	; 185
     cbc:	b3 e4       	ldi	r27, 0x43	; 67
     cbe:	85 8f       	std	Z+29, r24	; 0x1d
     cc0:	96 8f       	std	Z+30, r25	; 0x1e
     cc2:	a7 8f       	std	Z+31, r26	; 0x1f
     cc4:	b0 a3       	std	Z+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
     cc6:	eb ef       	ldi	r30, 0xFB	; 251
     cc8:	f2 e0       	ldi	r31, 0x02	; 2
     cca:	4a e9       	ldi	r20, 0x9A	; 154
     ccc:	59 e9       	ldi	r21, 0x99	; 153
     cce:	69 e1       	ldi	r22, 0x19	; 25
     cd0:	7e e3       	ldi	r23, 0x3E	; 62
     cd2:	45 8b       	std	Z+21, r20	; 0x15
     cd4:	56 8b       	std	Z+22, r21	; 0x16
     cd6:	67 8b       	std	Z+23, r22	; 0x17
     cd8:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
     cda:	11 8e       	std	Z+25, r1	; 0x19
     cdc:	12 8e       	std	Z+26, r1	; 0x1a
     cde:	13 8e       	std	Z+27, r1	; 0x1b
     ce0:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 ec       	ldi	r26, 0xC0	; 192
     ce8:	bf e3       	ldi	r27, 0x3F	; 63
     cea:	85 8f       	std	Z+29, r24	; 0x1d
     cec:	96 8f       	std	Z+30, r25	; 0x1e
     cee:	a7 8f       	std	Z+31, r26	; 0x1f
     cf0:	b0 a3       	std	Z+32, r27	; 0x20
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
     cf2:	ea ed       	ldi	r30, 0xDA	; 218
     cf4:	f2 e0       	ldi	r31, 0x02	; 2
     cf6:	45 8b       	std	Z+21, r20	; 0x15
     cf8:	56 8b       	std	Z+22, r21	; 0x16
     cfa:	67 8b       	std	Z+23, r22	; 0x17
     cfc:	70 8f       	std	Z+24, r23	; 0x18
		ki = i;
     cfe:	11 8e       	std	Z+25, r1	; 0x19
     d00:	12 8e       	std	Z+26, r1	; 0x1a
     d02:	13 8e       	std	Z+27, r1	; 0x1b
     d04:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
     d06:	85 8f       	std	Z+29, r24	; 0x1d
     d08:	96 8f       	std	Z+30, r25	; 0x1e
     d0a:	a7 8f       	std	Z+31, r26	; 0x1f
     d0c:	b0 a3       	std	Z+32, r27	; 0x20
	ltY.SETPOINT = 45;
	compass.setPid(2,0,31);//2,0,31);//4,0.09,18);	//5.5, 0, 500 , 2.1,0.04,32
	ltY.setPid(0.58,0.05,370);//0.58,0.05,370);
	driveX.setPid(0.15,0,1.5);		
	driveY.setPid(0.15,0,1.5);
	init_QMC5883L();
     d0e:	c8 da       	rcall	.-2672   	; 0x2a0 <_Z13init_QMC5883Lv>
	
	if (compass.FirstData)
     d10:	88 89       	ldd	r24, Y+16	; 0x10
     d12:	88 23       	and	r24, r24
	{
		initialCompassAngle = get_Angle();
     d14:	41 f0       	breq	.+16     	; 0xd26 <_Z13initializeAllv+0xd8>
     d16:	21 db       	rcall	.-2494   	; 0x35a <_Z9get_Anglev>
     d18:	90 93 a2 03 	sts	0x03A2, r25	; 0x8003a2 <initialCompassAngle+0x1>
     d1c:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <initialCompassAngle>
		compass.FirstData = false;
     d20:	18 8a       	std	Y+16, r1	; 0x10
		compass.SETPOINT = initialCompassAngle;
     d22:	9f 87       	std	Y+15, r25	; 0x0f
     d24:	8e 87       	std	Y+14, r24	; 0x0e
	}
	
	
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <_Z4movxiihh>:

void movx(int distance_setpoint, int direction, uint8_t maxSpeed_u8, uint8_t minSpeed_u8){
     d2c:	2f 92       	push	r2
     d2e:	3f 92       	push	r3
     d30:	4f 92       	push	r4
     d32:	5f 92       	push	r5
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	1c 01       	movw	r2, r24
     d52:	6b 01       	movw	r12, r22
     d54:	04 2f       	mov	r16, r20
     d56:	12 2f       	mov	r17, r18
	//compass.setPid(2.1,0.04,32);
	distanceX = abs(encoderX.getdistance());
     d58:	8c eb       	ldi	r24, 0xBC	; 188
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	20 da       	rcall	.-3008   	; 0x19e <_ZN7encoder11getdistanceEv>
     d5e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     d62:	ab 01       	movw	r20, r22
     d64:	77 23       	and	r23, r23
     d66:	24 f4       	brge	.+8      	; 0xd70 <_Z4movxiihh+0x44>
     d68:	44 27       	eor	r20, r20
     d6a:	55 27       	eor	r21, r21
     d6c:	46 1b       	sub	r20, r22
     d6e:	57 0b       	sbc	r21, r23
     d70:	ea 01       	movw	r28, r20
     d72:	50 93 a6 03 	sts	0x03A6, r21	; 0x8003a6 <distanceX+0x1>
     d76:	40 93 a5 03 	sts	0x03A5, r20	; 0x8003a5 <distanceX>
	driveX.SETPOINT = distance_setpoint;
     d7a:	30 92 0a 03 	sts	0x030A, r3	; 0x80030a <driveX+0xf>
     d7e:	20 92 09 03 	sts	0x0309, r2	; 0x800309 <driveX+0xe>
	if(PidUpdateFlagDriveX)
     d82:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <PidUpdateFlagDriveX>
     d86:	22 23       	and	r18, r18
     d88:	09 f4       	brne	.+2      	; 0xd8c <_Z4movxiihh+0x60>
     d8a:	29 c1       	rjmp	.+594    	; 0xfde <_Z4movxiihh+0x2b2>
	{
		movingx = true;
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	20 93 a0 03 	sts	0x03A0, r18	; 0x8003a0 <movingx>
		movingyfront = false;
     d92:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <movingyfront>
		movingyback = false;
     d96:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
		driveX.input = distanceX;
     d9a:	50 93 fc 02 	sts	0x02FC, r21	; 0x8002fc <driveX+0x1>
     d9e:	40 93 fb 02 	sts	0x02FB, r20	; 0x8002fb <driveX>
		PidUpdateFlagDriveX = false;
     da2:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <PidUpdateFlagDriveX>
		if(distanceX >= 200){
     da6:	48 3c       	cpi	r20, 0xC8	; 200
     da8:	51 05       	cpc	r21, r1
     daa:	0c f4       	brge	.+2      	; 0xdae <_Z4movxiihh+0x82>
     dac:	ee c0       	rjmp	.+476    	; 0xf8a <_Z4movxiihh+0x25e>
			driveX.error = driveX.SETPOINT - driveX.input;
     dae:	24 1a       	sub	r2, r20
     db0:	35 0a       	sbc	r3, r21
     db2:	0f 2e       	mov	r0, r31
     db4:	fb ef       	ldi	r31, 0xFB	; 251
     db6:	ef 2e       	mov	r14, r31
     db8:	f2 e0       	ldi	r31, 0x02	; 2
     dba:	ff 2e       	mov	r15, r31
     dbc:	f0 2d       	mov	r31, r0
     dbe:	f7 01       	movw	r30, r14
     dc0:	33 82       	std	Z+3, r3	; 0x03
     dc2:	22 82       	std	Z+2, r2	; 0x02
			driveX.Iterm += driveX.ki * driveX.error;
     dc4:	b1 01       	movw	r22, r2
     dc6:	03 2c       	mov	r0, r3
     dc8:	00 0c       	add	r0, r0
     dca:	88 0b       	sbc	r24, r24
     dcc:	99 0b       	sbc	r25, r25
     dce:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     dd2:	4b 01       	movw	r8, r22
     dd4:	5c 01       	movw	r10, r24
     dd6:	f7 01       	movw	r30, r14
     dd8:	21 8d       	ldd	r18, Z+25	; 0x19
     dda:	32 8d       	ldd	r19, Z+26	; 0x1a
     ddc:	43 8d       	ldd	r20, Z+27	; 0x1b
     dde:	54 8d       	ldd	r21, Z+28	; 0x1c
     de0:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     de4:	f7 01       	movw	r30, r14
     de6:	22 85       	ldd	r18, Z+10	; 0x0a
     de8:	33 85       	ldd	r19, Z+11	; 0x0b
     dea:	44 85       	ldd	r20, Z+12	; 0x0c
     dec:	55 85       	ldd	r21, Z+13	; 0x0d
     dee:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     df2:	2b 01       	movw	r4, r22
     df4:	3c 01       	movw	r6, r24
     df6:	f7 01       	movw	r30, r14
     df8:	62 87       	std	Z+10, r22	; 0x0a
     dfa:	73 87       	std	Z+11, r23	; 0x0b
     dfc:	84 87       	std	Z+12, r24	; 0x0c
     dfe:	95 87       	std	Z+13, r25	; 0x0d
			if(driveX.FirstData){
     e00:	80 89       	ldd	r24, Z+16	; 0x10
     e02:	88 23       	and	r24, r24
     e04:	19 f0       	breq	.+6      	; 0xe0c <_Z4movxiihh+0xe0>
				driveX.prevInput = driveX.input;
     e06:	d5 83       	std	Z+5, r29	; 0x05
     e08:	c4 83       	std	Z+4, r28	; 0x04
				driveX.FirstData = false;
     e0a:	10 8a       	std	Z+16, r1	; 0x10
			}
			if(abs(driveX.Iterm) > 10){
     e0c:	c3 01       	movw	r24, r6
     e0e:	b2 01       	movw	r22, r4
     e10:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     e14:	9b 01       	movw	r18, r22
     e16:	77 23       	and	r23, r23
     e18:	24 f4       	brge	.+8      	; 0xe22 <_Z4movxiihh+0xf6>
     e1a:	22 27       	eor	r18, r18
     e1c:	33 27       	eor	r19, r19
     e1e:	26 1b       	sub	r18, r22
     e20:	37 0b       	sbc	r19, r23
     e22:	2b 30       	cpi	r18, 0x0B	; 11
     e24:	31 05       	cpc	r19, r1
     e26:	5c f1       	brlt	.+86     	; 0xe7e <_Z4movxiihh+0x152>
				if(driveX.Iterm > 0)	driveX.Iterm = 10;
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	a9 01       	movw	r20, r18
     e2e:	c3 01       	movw	r24, r6
     e30:	b2 01       	movw	r22, r4
     e32:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__gesf2>
     e36:	18 16       	cp	r1, r24
     e38:	6c f4       	brge	.+26     	; 0xe54 <_Z4movxiihh+0x128>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	a0 e2       	ldi	r26, 0x20	; 32
     e40:	b1 e4       	ldi	r27, 0x41	; 65
     e42:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <driveX+0xa>
     e46:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <driveX+0xb>
     e4a:	a0 93 07 03 	sts	0x0307, r26	; 0x800307 <driveX+0xc>
     e4e:	b0 93 08 03 	sts	0x0308, r27	; 0x800308 <driveX+0xd>
     e52:	15 c0       	rjmp	.+42     	; 0xe7e <_Z4movxiihh+0x152>
				if(driveX.Iterm < 0)	driveX.Iterm = -10;
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	a9 01       	movw	r20, r18
     e5a:	c3 01       	movw	r24, r6
     e5c:	b2 01       	movw	r22, r4
     e5e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__cmpsf2>
     e62:	88 23       	and	r24, r24
     e64:	64 f4       	brge	.+24     	; 0xe7e <_Z4movxiihh+0x152>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e2       	ldi	r26, 0x20	; 32
     e6c:	b1 ec       	ldi	r27, 0xC1	; 193
     e6e:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <driveX+0xa>
     e72:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <driveX+0xb>
     e76:	a0 93 07 03 	sts	0x0307, r26	; 0x800307 <driveX+0xc>
     e7a:	b0 93 08 03 	sts	0x0308, r27	; 0x800308 <driveX+0xd>
			}
			if((driveX.error) > 0){
     e7e:	12 14       	cp	r1, r2
     e80:	13 04       	cpc	r1, r3
     e82:	bc f5       	brge	.+110    	; 0xef2 <_Z4movxiihh+0x1c6>
				driveX.output = driveX.kp * driveX.error + driveX.Iterm - driveX.kd*(driveX.input - driveX.prevInput);
     e84:	0f 2e       	mov	r0, r31
     e86:	fb ef       	ldi	r31, 0xFB	; 251
     e88:	ef 2e       	mov	r14, r31
     e8a:	f2 e0       	ldi	r31, 0x02	; 2
     e8c:	ff 2e       	mov	r15, r31
     e8e:	f0 2d       	mov	r31, r0
     e90:	f7 01       	movw	r30, r14
     e92:	25 89       	ldd	r18, Z+21	; 0x15
     e94:	36 89       	ldd	r19, Z+22	; 0x16
     e96:	47 89       	ldd	r20, Z+23	; 0x17
     e98:	50 8d       	ldd	r21, Z+24	; 0x18
     e9a:	c5 01       	movw	r24, r10
     e9c:	b4 01       	movw	r22, r8
     e9e:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     ea2:	f7 01       	movw	r30, r14
     ea4:	22 85       	ldd	r18, Z+10	; 0x0a
     ea6:	33 85       	ldd	r19, Z+11	; 0x0b
     ea8:	44 85       	ldd	r20, Z+12	; 0x0c
     eaa:	55 85       	ldd	r21, Z+13	; 0x0d
     eac:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     eb0:	4b 01       	movw	r8, r22
     eb2:	5c 01       	movw	r10, r24
     eb4:	f7 01       	movw	r30, r14
     eb6:	84 81       	ldd	r24, Z+4	; 0x04
     eb8:	95 81       	ldd	r25, Z+5	; 0x05
     eba:	be 01       	movw	r22, r28
     ebc:	68 1b       	sub	r22, r24
     ebe:	79 0b       	sbc	r23, r25
     ec0:	07 2e       	mov	r0, r23
     ec2:	00 0c       	add	r0, r0
     ec4:	88 0b       	sbc	r24, r24
     ec6:	99 0b       	sbc	r25, r25
     ec8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     ecc:	f7 01       	movw	r30, r14
     ece:	25 8d       	ldd	r18, Z+29	; 0x1d
     ed0:	36 8d       	ldd	r19, Z+30	; 0x1e
     ed2:	47 8d       	ldd	r20, Z+31	; 0x1f
     ed4:	50 a1       	ldd	r21, Z+32	; 0x20
     ed6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     eda:	9b 01       	movw	r18, r22
     edc:	ac 01       	movw	r20, r24
     ede:	c5 01       	movw	r24, r10
     ee0:	b4 01       	movw	r22, r8
     ee2:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__subsf3>
     ee6:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     eea:	f7 01       	movw	r30, r14
     eec:	77 83       	std	Z+7, r23	; 0x07
     eee:	66 83       	std	Z+6, r22	; 0x06
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <_Z4movxiihh+0x1ce>
			}
			else{
				driveX.output = 0;
     ef2:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <driveX+0x7>
     ef6:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <driveX+0x6>
			}
			driveX.prevInput = driveX.input;
     efa:	eb ef       	ldi	r30, 0xFB	; 251
     efc:	f2 e0       	ldi	r31, 0x02	; 2
     efe:	d5 83       	std	Z+5, r29	; 0x05
     f00:	c4 83       	std	Z+4, r28	; 0x04
			//////////////////////////////////////////////////////
			if(abs(driveX.output) > maxSpeed_u8){
     f02:	26 81       	ldd	r18, Z+6	; 0x06
     f04:	37 81       	ldd	r19, Z+7	; 0x07
     f06:	80 2f       	mov	r24, r16
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a9 01       	movw	r20, r18
     f0c:	33 23       	and	r19, r19
     f0e:	24 f4       	brge	.+8      	; 0xf18 <_Z4movxiihh+0x1ec>
     f10:	44 27       	eor	r20, r20
     f12:	55 27       	eor	r21, r21
     f14:	42 1b       	sub	r20, r18
     f16:	53 0b       	sbc	r21, r19
     f18:	84 17       	cp	r24, r20
     f1a:	95 07       	cpc	r25, r21
     f1c:	7c f4       	brge	.+30     	; 0xf3c <_Z4movxiihh+0x210>
				if(driveX.output >0)	driveX.output =maxSpeed_u8;	//150
     f1e:	12 16       	cp	r1, r18
     f20:	13 06       	cpc	r1, r19
     f22:	2c f4       	brge	.+10     	; 0xf2e <_Z4movxiihh+0x202>
     f24:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <driveX+0x7>
     f28:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <driveX+0x6>
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <_Z4movxiihh+0x210>
				else						driveX.output = -maxSpeed_u8;	//150
     f2e:	91 95       	neg	r25
     f30:	81 95       	neg	r24
     f32:	91 09       	sbc	r25, r1
     f34:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <driveX+0x7>
     f38:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <driveX+0x6>
			}
 			if(abs(driveX.output) < minSpeed_u8){
     f3c:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <driveX+0x6>
     f40:	30 91 02 03 	lds	r19, 0x0302	; 0x800302 <driveX+0x7>
     f44:	81 2f       	mov	r24, r17
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a9 01       	movw	r20, r18
     f4a:	33 23       	and	r19, r19
     f4c:	24 f4       	brge	.+8      	; 0xf56 <_Z4movxiihh+0x22a>
     f4e:	44 27       	eor	r20, r20
     f50:	55 27       	eor	r21, r21
     f52:	42 1b       	sub	r20, r18
     f54:	53 0b       	sbc	r21, r19
     f56:	48 17       	cp	r20, r24
     f58:	59 07       	cpc	r21, r25
     f5a:	74 f4       	brge	.+28     	; 0xf78 <_Z4movxiihh+0x24c>
 				if(driveX.output >= 0)	driveX.output = minSpeed_u8;  //30
     f5c:	33 23       	and	r19, r19
     f5e:	2c f0       	brlt	.+10     	; 0xf6a <_Z4movxiihh+0x23e>
     f60:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <driveX+0x7>
     f64:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <driveX+0x6>
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <_Z4movxiihh+0x24c>
 				else					driveX.output = -minSpeed_u8;	//30
     f6a:	91 95       	neg	r25
     f6c:	81 95       	neg	r24
     f6e:	91 09       	sbc	r25, r1
     f70:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <driveX+0x7>
     f74:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <driveX+0x6>
 			}
			//////////////////////////////////////////////////////
			velocity_robot[0] = driveX.output;
     f78:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <driveX+0x6>
     f7c:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <driveX+0x7>
     f80:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <velocity_robot+0x1>
     f84:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <velocity_robot>
     f88:	18 c0       	rjmp	.+48     	; 0xfba <_Z4movxiihh+0x28e>
		}
		else{
				velocity_robot[0] = 60 + 0.45*distanceX;
     f8a:	ba 01       	movw	r22, r20
     f8c:	55 0f       	add	r21, r21
     f8e:	88 0b       	sbc	r24, r24
     f90:	99 0b       	sbc	r25, r25
     f92:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
     f96:	26 e6       	ldi	r18, 0x66	; 102
     f98:	36 e6       	ldi	r19, 0x66	; 102
     f9a:	46 ee       	ldi	r20, 0xE6	; 230
     f9c:	5e e3       	ldi	r21, 0x3E	; 62
     f9e:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e7       	ldi	r20, 0x70	; 112
     fa8:	52 e4       	ldi	r21, 0x42	; 66
     faa:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
     fae:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
     fb2:	70 93 a8 03 	sts	0x03A8, r23	; 0x8003a8 <velocity_robot+0x1>
     fb6:	60 93 a7 03 	sts	0x03A7, r22	; 0x8003a7 <velocity_robot>
		}
		if(direction == Front){
			velocity_robot[0] = velocity_robot[0];
		}
		else if(direction == Back){
     fba:	f3 e0       	ldi	r31, 0x03	; 3
     fbc:	cf 16       	cp	r12, r31
     fbe:	d1 04       	cpc	r13, r1
     fc0:	71 f4       	brne	.+28     	; 0xfde <_Z4movxiihh+0x2b2>
			velocity_robot[0] = -abs(velocity_robot[0]);
     fc2:	e7 ea       	ldi	r30, 0xA7	; 167
     fc4:	f3 e0       	ldi	r31, 0x03	; 3
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	99 23       	and	r25, r25
     fcc:	1c f4       	brge	.+6      	; 0xfd4 <_Z4movxiihh+0x2a8>
     fce:	91 95       	neg	r25
     fd0:	81 95       	neg	r24
     fd2:	91 09       	sbc	r25, r1
     fd4:	91 95       	neg	r25
     fd6:	81 95       	neg	r24
     fd8:	91 09       	sbc	r25, r1
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	80 83       	st	Z, r24
		}
	
	}
	velocity_robot[1] = 0;
     fde:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <velocity_robot+0x3>
     fe2:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <velocity_robot+0x2>
	//velocity_robot[2] = 0;
	calculateCompassPID();
     fe6:	d5 da       	rcall	.-2646   	; 0x592 <_Z19calculateCompassPIDv>
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	bf 90       	pop	r11
     ffa:	af 90       	pop	r10
     ffc:	9f 90       	pop	r9
     ffe:	8f 90       	pop	r8
    1000:	7f 90       	pop	r7
    1002:	6f 90       	pop	r6
    1004:	5f 90       	pop	r5
    1006:	4f 90       	pop	r4
    1008:	3f 90       	pop	r3
    100a:	2f 90       	pop	r2
    100c:	08 95       	ret

0000100e <_Z4movyiihh>:

void movy(int distance_setpoint, int direction, uint8_t maxSpeed_u8, uint8_t minSpeed_u8)
{
    100e:	2f 92       	push	r2
    1010:	3f 92       	push	r3
    1012:	4f 92       	push	r4
    1014:	5f 92       	push	r5
    1016:	6f 92       	push	r6
    1018:	7f 92       	push	r7
    101a:	8f 92       	push	r8
    101c:	9f 92       	push	r9
    101e:	af 92       	push	r10
    1020:	bf 92       	push	r11
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	1c 01       	movw	r2, r24
    1034:	6b 01       	movw	r12, r22
    1036:	04 2f       	mov	r16, r20
    1038:	12 2f       	mov	r17, r18
	//compass.setPid(2.1,0.04,32);
	distanceY = abs(encoderY.getdistance());
    103a:	84 eb       	ldi	r24, 0xB4	; 180
    103c:	92 e0       	ldi	r25, 0x02	; 2
    103e:	af d8       	rcall	.-3746   	; 0x19e <_ZN7encoder11getdistanceEv>
    1040:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
    1044:	9b 01       	movw	r18, r22
    1046:	77 23       	and	r23, r23
    1048:	24 f4       	brge	.+8      	; 0x1052 <_Z4movyiihh+0x44>
    104a:	22 27       	eor	r18, r18
    104c:	33 27       	eor	r19, r19
    104e:	26 1b       	sub	r18, r22
    1050:	37 0b       	sbc	r19, r23
    1052:	e9 01       	movw	r28, r18
    1054:	30 93 a4 03 	sts	0x03A4, r19	; 0x8003a4 <distanceY+0x1>
    1058:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <distanceY>
	driveY.SETPOINT = distance_setpoint;
    105c:	30 92 e9 02 	sts	0x02E9, r3	; 0x8002e9 <driveY+0xf>
    1060:	20 92 e8 02 	sts	0x02E8, r2	; 0x8002e8 <driveY+0xe>
	if(PidUpdateFlagDriveY)
    1064:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <PidUpdateFlagDriveY>
    1068:	88 23       	and	r24, r24
    106a:	09 f4       	brne	.+2      	; 0x106e <_Z4movyiihh+0x60>
    106c:	33 c1       	rjmp	.+614    	; 0x12d4 <_Z4movyiihh+0x2c6>
	{
			PidUpdateFlagDriveY = false;
    106e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <PidUpdateFlagDriveY>
			if(distanceY >= 200)
    1072:	28 3c       	cpi	r18, 0xC8	; 200
    1074:	31 05       	cpc	r19, r1
    1076:	0c f4       	brge	.+2      	; 0x107a <_Z4movyiihh+0x6c>
    1078:	f0 c0       	rjmp	.+480    	; 0x125a <_Z4movyiihh+0x24c>
			{
				driveY.input = distanceY;
    107a:	0f 2e       	mov	r0, r31
    107c:	fa ed       	ldi	r31, 0xDA	; 218
    107e:	ef 2e       	mov	r14, r31
    1080:	f2 e0       	ldi	r31, 0x02	; 2
    1082:	ff 2e       	mov	r15, r31
    1084:	f0 2d       	mov	r31, r0
    1086:	f7 01       	movw	r30, r14
    1088:	31 83       	std	Z+1, r19	; 0x01
    108a:	20 83       	st	Z, r18
				driveY.error = driveY.SETPOINT - driveY.input;
    108c:	22 1a       	sub	r2, r18
    108e:	33 0a       	sbc	r3, r19
    1090:	33 82       	std	Z+3, r3	; 0x03
    1092:	22 82       	std	Z+2, r2	; 0x02
				driveY.Iterm += driveY.ki * driveY.error;
    1094:	b1 01       	movw	r22, r2
    1096:	03 2c       	mov	r0, r3
    1098:	00 0c       	add	r0, r0
    109a:	88 0b       	sbc	r24, r24
    109c:	99 0b       	sbc	r25, r25
    109e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
    10a2:	4b 01       	movw	r8, r22
    10a4:	5c 01       	movw	r10, r24
    10a6:	f7 01       	movw	r30, r14
    10a8:	21 8d       	ldd	r18, Z+25	; 0x19
    10aa:	32 8d       	ldd	r19, Z+26	; 0x1a
    10ac:	43 8d       	ldd	r20, Z+27	; 0x1b
    10ae:	54 8d       	ldd	r21, Z+28	; 0x1c
    10b0:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
    10b4:	f7 01       	movw	r30, r14
    10b6:	22 85       	ldd	r18, Z+10	; 0x0a
    10b8:	33 85       	ldd	r19, Z+11	; 0x0b
    10ba:	44 85       	ldd	r20, Z+12	; 0x0c
    10bc:	55 85       	ldd	r21, Z+13	; 0x0d
    10be:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
    10c2:	2b 01       	movw	r4, r22
    10c4:	3c 01       	movw	r6, r24
    10c6:	f7 01       	movw	r30, r14
    10c8:	62 87       	std	Z+10, r22	; 0x0a
    10ca:	73 87       	std	Z+11, r23	; 0x0b
    10cc:	84 87       	std	Z+12, r24	; 0x0c
    10ce:	95 87       	std	Z+13, r25	; 0x0d
				if(driveY.FirstData){
    10d0:	80 89       	ldd	r24, Z+16	; 0x10
    10d2:	88 23       	and	r24, r24
    10d4:	19 f0       	breq	.+6      	; 0x10dc <_Z4movyiihh+0xce>
					driveY.prevInput = driveY.input;
    10d6:	d5 83       	std	Z+5, r29	; 0x05
    10d8:	c4 83       	std	Z+4, r28	; 0x04
					driveY.FirstData = false;
    10da:	10 8a       	std	Z+16, r1	; 0x10
				}
				if(abs(driveY.Iterm) > 10){
    10dc:	c3 01       	movw	r24, r6
    10de:	b2 01       	movw	r22, r4
    10e0:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
    10e4:	9b 01       	movw	r18, r22
    10e6:	77 23       	and	r23, r23
    10e8:	24 f4       	brge	.+8      	; 0x10f2 <_Z4movyiihh+0xe4>
    10ea:	22 27       	eor	r18, r18
    10ec:	33 27       	eor	r19, r19
    10ee:	26 1b       	sub	r18, r22
    10f0:	37 0b       	sbc	r19, r23
    10f2:	2b 30       	cpi	r18, 0x0B	; 11
    10f4:	31 05       	cpc	r19, r1
    10f6:	5c f1       	brlt	.+86     	; 0x114e <_Z4movyiihh+0x140>
					if(driveY.Iterm > 0)	driveY.Iterm = 10;
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	a9 01       	movw	r20, r18
    10fe:	c3 01       	movw	r24, r6
    1100:	b2 01       	movw	r22, r4
    1102:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__gesf2>
    1106:	18 16       	cp	r1, r24
    1108:	6c f4       	brge	.+26     	; 0x1124 <_Z4movyiihh+0x116>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a0 e2       	ldi	r26, 0x20	; 32
    1110:	b1 e4       	ldi	r27, 0x41	; 65
    1112:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <driveY+0xa>
    1116:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <driveY+0xb>
    111a:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <driveY+0xc>
    111e:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <driveY+0xd>
    1122:	15 c0       	rjmp	.+42     	; 0x114e <_Z4movyiihh+0x140>
					if(driveY.Iterm < 0)	driveY.Iterm = -10;
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	c3 01       	movw	r24, r6
    112c:	b2 01       	movw	r22, r4
    112e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <__cmpsf2>
    1132:	88 23       	and	r24, r24
    1134:	64 f4       	brge	.+24     	; 0x114e <_Z4movyiihh+0x140>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 e2       	ldi	r26, 0x20	; 32
    113c:	b1 ec       	ldi	r27, 0xC1	; 193
    113e:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <driveY+0xa>
    1142:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <driveY+0xb>
    1146:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <driveY+0xc>
    114a:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <driveY+0xd>
				}
				if(driveY.error > 0){
    114e:	12 14       	cp	r1, r2
    1150:	13 04       	cpc	r1, r3
    1152:	bc f5       	brge	.+110    	; 0x11c2 <_Z4movyiihh+0x1b4>
					driveY.output = driveY.kp * driveY.error + driveY.Iterm - driveY.kd*(driveY.input - driveY.prevInput);
    1154:	0f 2e       	mov	r0, r31
    1156:	fa ed       	ldi	r31, 0xDA	; 218
    1158:	ef 2e       	mov	r14, r31
    115a:	f2 e0       	ldi	r31, 0x02	; 2
    115c:	ff 2e       	mov	r15, r31
    115e:	f0 2d       	mov	r31, r0
    1160:	f7 01       	movw	r30, r14
    1162:	25 89       	ldd	r18, Z+21	; 0x15
    1164:	36 89       	ldd	r19, Z+22	; 0x16
    1166:	47 89       	ldd	r20, Z+23	; 0x17
    1168:	50 8d       	ldd	r21, Z+24	; 0x18
    116a:	c5 01       	movw	r24, r10
    116c:	b4 01       	movw	r22, r8
    116e:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
    1172:	f7 01       	movw	r30, r14
    1174:	22 85       	ldd	r18, Z+10	; 0x0a
    1176:	33 85       	ldd	r19, Z+11	; 0x0b
    1178:	44 85       	ldd	r20, Z+12	; 0x0c
    117a:	55 85       	ldd	r21, Z+13	; 0x0d
    117c:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
    1180:	4b 01       	movw	r8, r22
    1182:	5c 01       	movw	r10, r24
    1184:	f7 01       	movw	r30, r14
    1186:	84 81       	ldd	r24, Z+4	; 0x04
    1188:	95 81       	ldd	r25, Z+5	; 0x05
    118a:	be 01       	movw	r22, r28
    118c:	68 1b       	sub	r22, r24
    118e:	79 0b       	sbc	r23, r25
    1190:	07 2e       	mov	r0, r23
    1192:	00 0c       	add	r0, r0
    1194:	88 0b       	sbc	r24, r24
    1196:	99 0b       	sbc	r25, r25
    1198:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
    119c:	f7 01       	movw	r30, r14
    119e:	25 8d       	ldd	r18, Z+29	; 0x1d
    11a0:	36 8d       	ldd	r19, Z+30	; 0x1e
    11a2:	47 8d       	ldd	r20, Z+31	; 0x1f
    11a4:	50 a1       	ldd	r21, Z+32	; 0x20
    11a6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
    11aa:	9b 01       	movw	r18, r22
    11ac:	ac 01       	movw	r20, r24
    11ae:	c5 01       	movw	r24, r10
    11b0:	b4 01       	movw	r22, r8
    11b2:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__subsf3>
    11b6:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
    11ba:	f7 01       	movw	r30, r14
    11bc:	77 83       	std	Z+7, r23	; 0x07
    11be:	66 83       	std	Z+6, r22	; 0x06
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <_Z4movyiihh+0x1bc>
				}
				else{
					driveY.output = 0;
    11c2:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <driveY+0x7>
    11c6:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <driveY+0x6>
				}
				driveY.prevInput = driveY.input;
    11ca:	ea ed       	ldi	r30, 0xDA	; 218
    11cc:	f2 e0       	ldi	r31, 0x02	; 2
    11ce:	d5 83       	std	Z+5, r29	; 0x05
    11d0:	c4 83       	std	Z+4, r28	; 0x04
				////////////////////////////////////////////////////////////
				if(abs(driveY.output) >= maxSpeed_u8){
    11d2:	26 81       	ldd	r18, Z+6	; 0x06
    11d4:	37 81       	ldd	r19, Z+7	; 0x07
    11d6:	80 2f       	mov	r24, r16
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a9 01       	movw	r20, r18
    11dc:	33 23       	and	r19, r19
    11de:	24 f4       	brge	.+8      	; 0x11e8 <_Z4movyiihh+0x1da>
    11e0:	44 27       	eor	r20, r20
    11e2:	55 27       	eor	r21, r21
    11e4:	42 1b       	sub	r20, r18
    11e6:	53 0b       	sbc	r21, r19
    11e8:	48 17       	cp	r20, r24
    11ea:	59 07       	cpc	r21, r25
    11ec:	7c f0       	brlt	.+30     	; 0x120c <_Z4movyiihh+0x1fe>
					if(driveY.output > 0)	driveY.output = maxSpeed_u8;	// 100
    11ee:	12 16       	cp	r1, r18
    11f0:	13 06       	cpc	r1, r19
    11f2:	2c f4       	brge	.+10     	; 0x11fe <_Z4movyiihh+0x1f0>
    11f4:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <driveY+0x7>
    11f8:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <driveY+0x6>
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <_Z4movyiihh+0x1fe>
					else						driveY.output = -maxSpeed_u8;
    11fe:	91 95       	neg	r25
    1200:	81 95       	neg	r24
    1202:	91 09       	sbc	r25, r1
    1204:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <driveY+0x7>
    1208:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <driveY+0x6>
				}
 				if(abs(driveY.output) < minSpeed_u8){
    120c:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <driveY+0x6>
    1210:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <driveY+0x7>
    1214:	81 2f       	mov	r24, r17
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	33 23       	and	r19, r19
    121c:	24 f4       	brge	.+8      	; 0x1226 <_Z4movyiihh+0x218>
    121e:	44 27       	eor	r20, r20
    1220:	55 27       	eor	r21, r21
    1222:	42 1b       	sub	r20, r18
    1224:	53 0b       	sbc	r21, r19
    1226:	48 17       	cp	r20, r24
    1228:	59 07       	cpc	r21, r25
    122a:	74 f4       	brge	.+28     	; 0x1248 <_Z4movyiihh+0x23a>
 					if(driveY.output >= 0)	driveY.output = minSpeed_u8;	//20
    122c:	33 23       	and	r19, r19
    122e:	2c f0       	brlt	.+10     	; 0x123a <_Z4movyiihh+0x22c>
    1230:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <driveY+0x7>
    1234:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <driveY+0x6>
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <_Z4movyiihh+0x23a>
 					else					driveY.output = -minSpeed_u8;
    123a:	91 95       	neg	r25
    123c:	81 95       	neg	r24
    123e:	91 09       	sbc	r25, r1
    1240:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <driveY+0x7>
    1244:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <driveY+0x6>
 				}
				/////////////////////////////////////////////////////////
				velocity_robot[1] = driveY.output;
    1248:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <driveY+0x6>
    124c:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <driveY+0x7>
    1250:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <velocity_robot+0x3>
    1254:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <velocity_robot+0x2>
    1258:	18 c0       	rjmp	.+48     	; 0x128a <_Z4movyiihh+0x27c>
			}
			else
			{
				//uart0_puts("ramp up\t");
				velocity_robot[1] = 40 + (distanceY*0.3);
    125a:	b9 01       	movw	r22, r18
    125c:	33 0f       	add	r19, r19
    125e:	88 0b       	sbc	r24, r24
    1260:	99 0b       	sbc	r25, r25
    1262:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__floatsisf>
    1266:	2a e9       	ldi	r18, 0x9A	; 154
    1268:	39 e9       	ldi	r19, 0x99	; 153
    126a:	49 e9       	ldi	r20, 0x99	; 153
    126c:	5e e3       	ldi	r21, 0x3E	; 62
    126e:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__mulsf3>
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e2       	ldi	r20, 0x20	; 32
    1278:	52 e4       	ldi	r21, 0x42	; 66
    127a:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__addsf3>
    127e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
    1282:	70 93 aa 03 	sts	0x03AA, r23	; 0x8003aa <velocity_robot+0x3>
    1286:	60 93 a9 03 	sts	0x03A9, r22	; 0x8003a9 <velocity_robot+0x2>
				//uart0_putint(velocity_robot[1]);
				//uart0_puts("\r\n");
			}
			if(direction == Front){
    128a:	f2 e0       	ldi	r31, 0x02	; 2
    128c:	cf 16       	cp	r12, r31
    128e:	d1 04       	cpc	r13, r1
    1290:	41 f4       	brne	.+16     	; 0x12a2 <_Z4movyiihh+0x294>
				movingyfront = true;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <movingyfront>
				movingyback = false;
    1298:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
				movingx = false;
    129c:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <movingx>
    12a0:	19 c0       	rjmp	.+50     	; 0x12d4 <_Z4movyiihh+0x2c6>
				velocity_robot[1] = velocity_robot[1];
			}
			else if(direction == Back){
    12a2:	83 e0       	ldi	r24, 0x03	; 3
    12a4:	c8 16       	cp	r12, r24
    12a6:	d1 04       	cpc	r13, r1
    12a8:	a9 f4       	brne	.+42     	; 0x12d4 <_Z4movyiihh+0x2c6>
				movingyback = true;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <movingyback>
				movingyfront = false;
    12b0:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <movingyfront>
				movingx = false;
    12b4:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <movingx>
				velocity_robot[1] = -abs(velocity_robot[1]);
    12b8:	e7 ea       	ldi	r30, 0xA7	; 167
    12ba:	f3 e0       	ldi	r31, 0x03	; 3
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	99 23       	and	r25, r25
    12c2:	1c f4       	brge	.+6      	; 0x12ca <_Z4movyiihh+0x2bc>
    12c4:	91 95       	neg	r25
    12c6:	81 95       	neg	r24
    12c8:	91 09       	sbc	r25, r1
    12ca:	91 95       	neg	r25
    12cc:	81 95       	neg	r24
    12ce:	91 09       	sbc	r25, r1
    12d0:	93 83       	std	Z+3, r25	; 0x03
			}
		
	}
	//velocity_robot[0] = 0;
	calculateLineTrackerYPid();
    12d2:	82 83       	std	Z+2, r24	; 0x02
	//velocity_robot[2] = 0;
	calculateCompassPID();
    12d4:	b2 db       	rcall	.-2204   	; 0xa3a <_Z24calculateLineTrackerYPidv>
    12d6:	5d d9       	rcall	.-3398   	; 0x592 <_Z19calculateCompassPIDv>
}
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	df 90       	pop	r13
    12e6:	cf 90       	pop	r12
    12e8:	bf 90       	pop	r11
    12ea:	af 90       	pop	r10
    12ec:	9f 90       	pop	r9
    12ee:	8f 90       	pop	r8
    12f0:	7f 90       	pop	r7
    12f2:	6f 90       	pop	r6
    12f4:	5f 90       	pop	r5
    12f6:	4f 90       	pop	r4
    12f8:	3f 90       	pop	r3
    12fa:	2f 90       	pop	r2
    12fc:	08 95       	ret

000012fe <_Z15movYForwardSlowv>:

void movYForwardSlow(){
	movingx = false;
    12fe:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <movingx>
	movingyfront = true;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <movingyfront>
	movingyback = false;
    1308:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <movingyback>
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    130c:	ec e1       	ldi	r30, 0x1C	; 28
    130e:	f3 e0       	ldi	r31, 0x03	; 3
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e4       	ldi	r27, 0x40	; 64
    1318:	85 8b       	std	Z+21, r24	; 0x15
    131a:	96 8b       	std	Z+22, r25	; 0x16
    131c:	a7 8b       	std	Z+23, r26	; 0x17
    131e:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    1320:	11 8e       	std	Z+25, r1	; 0x19
    1322:	12 8e       	std	Z+26, r1	; 0x1a
    1324:	13 8e       	std	Z+27, r1	; 0x1b
    1326:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a8 ef       	ldi	r26, 0xF8	; 248
    132e:	b1 e4       	ldi	r27, 0x41	; 65
    1330:	85 8f       	std	Z+29, r24	; 0x1d
    1332:	96 8f       	std	Z+30, r25	; 0x1e
    1334:	a7 8f       	std	Z+31, r26	; 0x1f
    1336:	b0 a3       	std	Z+32, r27	; 0x20
void movYForwardSlow(){
	movingx = false;
	movingyfront = true;
	movingyback = false;
	compass.setPid(2,0,31);
	velocity_robot[1] = 30;
    1338:	8e e1       	ldi	r24, 0x1E	; 30
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <velocity_robot+0x3>
    1340:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <velocity_robot+0x2>
	calculateLineTrackerYPid();
    1344:	7a db       	rcall	.-2316   	; 0xa3a <_Z24calculateLineTrackerYPidv>
	calculateCompassPID();
    1346:	25 c9       	rjmp	.-3510   	; 0x592 <_Z19calculateCompassPIDv>
    1348:	08 95       	ret

0000134a <_Z12holdpositionv>:
    134a:	e7 ea       	ldi	r30, 0xA7	; 167
}

void holdposition(){
	velocity_robot[0]  = 0;
    134c:	f3 e0       	ldi	r31, 0x03	; 3
    134e:	11 82       	std	Z+1, r1	; 0x01
    1350:	10 82       	st	Z, r1
	velocity_robot[1] = 0;
    1352:	13 82       	std	Z+3, r1	; 0x03
    1354:	12 82       	std	Z+2, r1	; 0x02
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1356:	ec e1       	ldi	r30, 0x1C	; 28
    1358:	f3 e0       	ldi	r31, 0x03	; 3
    135a:	86 e6       	ldi	r24, 0x66	; 102
    135c:	96 e6       	ldi	r25, 0x66	; 102
    135e:	a6 e8       	ldi	r26, 0x86	; 134
    1360:	b0 e4       	ldi	r27, 0x40	; 64
    1362:	85 8b       	std	Z+21, r24	; 0x15
    1364:	96 8b       	std	Z+22, r25	; 0x16
    1366:	a7 8b       	std	Z+23, r26	; 0x17
    1368:	b0 8f       	std	Z+24, r27	; 0x18
		ki = i;
    136a:	8f e8       	ldi	r24, 0x8F	; 143
    136c:	92 ec       	ldi	r25, 0xC2	; 194
    136e:	a5 e7       	ldi	r26, 0x75	; 117
    1370:	be e3       	ldi	r27, 0x3E	; 62
    1372:	81 8f       	std	Z+25, r24	; 0x19
    1374:	92 8f       	std	Z+26, r25	; 0x1a
    1376:	a3 8f       	std	Z+27, r26	; 0x1b
    1378:	b4 8f       	std	Z+28, r27	; 0x1c
		kd = d;
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a0 e0       	ldi	r26, 0x00	; 0
    1380:	b2 e4       	ldi	r27, 0x42	; 66
    1382:	85 8f       	std	Z+29, r24	; 0x1d
    1384:	96 8f       	std	Z+30, r25	; 0x1e
    1386:	a7 8f       	std	Z+31, r26	; 0x1f
    1388:	b0 a3       	std	Z+32, r27	; 0x20
void holdposition(){
	velocity_robot[0]  = 0;
	velocity_robot[1] = 0;
	//velocity_robot[2] = 0;
	compass.setPid(4.2,0.24,32);	//5.1,0,31
	calculateCompassPID();
    138a:	03 c9       	rjmp	.-3578   	; 0x592 <_Z19calculateCompassPIDv>
    138c:	08 95       	ret

0000138e <_Z14updateZoneflagv>:
//  		else        uart0_puts("0 \n");


}

void updateZoneflag(void){
    138e:	cf 93       	push	r28
	//uart0_puts("update \r\n");
	/*if low on shuttlecock pin then shuttlecock received
	i.e if manual robot arm is extended to give shuttlecock*/
	if(!ShuttleCockGiven){
    1390:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <ShuttleCockGiven>
    1394:	81 11       	cpse	r24, r1
    1396:	8c c0       	rjmp	.+280    	; 0x14b0 <_Z14updateZoneflagv+0x122>
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL4)) &&  where == inLZ1 ){
    1398:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    139c:	84 fd       	sbrc	r24, 4
    139e:	50 c0       	rjmp	.+160    	; 0x1440 <_Z14updateZoneflagv+0xb2>
    13a0:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    13a4:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    13a8:	05 97       	sbiw	r24, 0x05	; 5
    13aa:	09 f0       	breq	.+2      	; 0x13ae <_Z14updateZoneflagv+0x20>
    13ac:	49 c0       	rjmp	.+146    	; 0x1440 <_Z14updateZoneflagv+0xb2>
    13ae:	3b c0       	rjmp	.+118    	; 0x1426 <_Z14updateZoneflagv+0x98>
			GoThrowingZone1 = true;
			task3 = task4 = false;
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    13b0:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    13b4:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    13b8:	06 97       	sbiw	r24, 0x06	; 6
    13ba:	f9 f4       	brne	.+62     	; 0x13fa <_Z14updateZoneflagv+0x6c>
    13bc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ManualInFrontOfLZ2>
    13c0:	81 11       	cpse	r24, r1
    13c2:	43 c0       	rjmp	.+134    	; 0x144a <_Z14updateZoneflagv+0xbc>
    13c4:	1a c0       	rjmp	.+52     	; 0x13fa <_Z14updateZoneflagv+0x6c>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL4)) &&  (where == inLZ1 || where == inLZ2) ){
    13c6:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    13ca:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    13ce:	05 97       	sbiw	r24, 0x05	; 5
    13d0:	31 f0       	breq	.+12     	; 0x13de <_Z14updateZoneflagv+0x50>
    13d2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    13d6:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    13da:	06 97       	sbiw	r24, 0x06	; 6
    13dc:	31 f4       	brne	.+12     	; 0x13ea <_Z14updateZoneflagv+0x5c>
		//uart0_puts("Shuttlecock arm gone \r\n");
		ShuttleCockArmGone = true;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ShuttleCockArmGone>
		uart3_putc('w');
    13e4:	87 e7       	ldi	r24, 0x77	; 119
    13e6:	0e 94 47 14 	call	0x288e	; 0x288e <_Z10uart3_putch>
	}
	
	/*if low on golden rack pin then rack is received
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
    13ea:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <ShuttleCockGiven>
    13ee:	88 23       	and	r24, r24
    13f0:	21 f0       	breq	.+8      	; 0x13fa <_Z14updateZoneflagv+0x6c>
    13f2:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <GoldenRackGiven>
    13f6:	81 11       	cpse	r24, r1
    13f8:	60 c0       	rjmp	.+192    	; 0x14ba <_Z14updateZoneflagv+0x12c>
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
    13fa:	7d 9b       	sbis	0x0f, 5	; 15
    13fc:	52 c0       	rjmp	.+164    	; 0x14a2 <_Z14updateZoneflagv+0x114>
    13fe:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1402:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1406:	06 97       	sbiw	r24, 0x06	; 6
    1408:	09 f0       	breq	.+2      	; 0x140c <_Z14updateZoneflagv+0x7e>
    140a:	4b c0       	rjmp	.+150    	; 0x14a2 <_Z14updateZoneflagv+0x114>
    140c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ManualInFrontOfLZ2>
    1410:	81 11       	cpse	r24, r1
    1412:	47 c0       	rjmp	.+142    	; 0x14a2 <_Z14updateZoneflagv+0x114>
    1414:	2f c0       	rjmp	.+94     	; 0x1474 <_Z14updateZoneflagv+0xe6>
			GoThrowingZone2 = false;
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
			//uart0_puts("none \r\n");
			GoldenRackGiven = false;
    1416:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <GoldenRackGiven>
			GoThrowingZone2 = true;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <GoThrowingZone2>
			GoThrowingZone3 = false;
    1420:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <GoThrowingZone3>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    1424:	4a c0       	rjmp	.+148    	; 0x14ba <_Z14updateZoneflagv+0x12c>
	if(!ShuttleCockGiven){
		//uart0_puts("entered above \r\n");
		if(!(PINL & (1<<PL4)) &&  where == inLZ1 ){
			//uart0_puts("Shuttlecock given in LZ1\r\n");
			//'w' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    1426:	8f e6       	ldi	r24, 0x6F	; 111
    1428:	0e 94 47 14 	call	0x288e	; 0x288e <_Z10uart3_putch>
			ShuttleCockGiven = true;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = true;
    1432:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <GoThrowingZone1>
			task3 = task4 = false;
    1436:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <task4>
    143a:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <task3>
    143e:	38 c0       	rjmp	.+112    	; 0x14b0 <_Z14updateZoneflagv+0x122>
		}
		/*if low on shuttlecock pin then shuttlecock received
		i.e if manual robot arm is extended to give shuttlecock*/
		else if(!(SHUTTLECOCK_STATUSPORT & (1<<SHUTTLECOCK_STATUSPIN)) &&  where == inLZ2 && ManualInFrontOfLZ2){
    1440:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1444:	84 ff       	sbrs	r24, 4
    1446:	b4 cf       	rjmp	.-152    	; 0x13b0 <_Z14updateZoneflagv+0x22>
    1448:	d8 cf       	rjmp	.-80     	; 0x13fa <_Z14updateZoneflagv+0x6c>
			//uart0_puts("Shuttlecock given in loading zone 2\r\nManual robot ahead \r\n");
			//'o' is sent to throwing mechanism to grip shuttlecock
			uart3_putc('o');
    144a:	8f e6       	ldi	r24, 0x6F	; 111
    144c:	0e 94 47 14 	call	0x288e	; 0x288e <_Z10uart3_putch>
			ShuttleCockGiven = true;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <ShuttleCockGiven>
			//certain delay is needed so that robot first grabs shuttlecock and moves//
			GoThrowingZone1 = false;
    1456:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <GoThrowingZone1>
			GoThrowingZone2 = true;
    145a:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <GoThrowingZone2>
			task3 = task4 = task5 = true;
    145e:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <task5>
    1462:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <task4>
    1466:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <task3>
			task6 = task7 = false;
    146a:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <task7>
    146e:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <task6>
    1472:	1e c0       	rjmp	.+60     	; 0x14b0 <_Z14updateZoneflagv+0x122>
	i.e if rack is received above geneva and robot is in loading zone 2*/
	if(!ShuttleCockGiven || !GoldenRackGiven){
		//uart0_puts("entered rack wala \r\n");
		if(((RACK_STATUSPORT & (1<<RACK_STATUSPIN))) && (where == inLZ2 ) && !ManualInFrontOfLZ2){
			//'f' is sent to throwing mechanism to tell to throwing zone 3 from golden rack
			task6 = task7 = true;
    1474:	c1 e0       	ldi	r28, 0x01	; 1
    1476:	c0 93 c7 02 	sts	0x02C7, r28	; 0x8002c7 <task7>
    147a:	c0 93 c8 02 	sts	0x02C8, r28	; 0x8002c8 <task6>
			task8 = task9 = false;
    147e:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <task9>
    1482:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <task8>
			//uart0_puts("going throwing zone 3\r\n");
			uart3_putc('j');
    1486:	8a e6       	ldi	r24, 0x6A	; 106
    1488:	0e 94 47 14 	call	0x288e	; 0x288e <_Z10uart3_putch>
			GoldenRackGiven = true;
    148c:	c0 93 d8 02 	sts	0x02D8, r28	; 0x8002d8 <GoldenRackGiven>
			ShuttleCockArmGone = true;
    1490:	c0 93 d7 02 	sts	0x02D7, r28	; 0x8002d7 <ShuttleCockArmGone>
			ShuttleCockGiven = true;
    1494:	c0 93 d9 02 	sts	0x02D9, r28	; 0x8002d9 <ShuttleCockGiven>
			GoThrowingZone3 = true;
    1498:	c0 93 d3 02 	sts	0x02D3, r28	; 0x8002d3 <GoThrowingZone3>
			GoThrowingZone2 = false;
    149c:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <GoThrowingZone2>
    14a0:	0c c0       	rjmp	.+24     	; 0x14ba <_Z14updateZoneflagv+0x12c>
		}
		//if rack is not above geneva but robot is in loading zone 2
		else if(where == inLZ2){
    14a2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    14a6:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    14aa:	06 97       	sbiw	r24, 0x06	; 6
    14ac:	31 f4       	brne	.+12     	; 0x14ba <_Z14updateZoneflagv+0x12c>
    14ae:	b3 cf       	rjmp	.-154    	; 0x1416 <_Z14updateZoneflagv+0x88>
			ShuttleCockGiven = false;
		}
	}
	//if shuttlecock given and arm is gone send 'w' to throwing mechanism to give to gripper
	//and move robot
	if(ShuttleCockGiven && (PINL & (1<<PL4)) &&  (where == inLZ1 || where == inLZ2) ){
    14b0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    14b4:	84 fd       	sbrc	r24, 4
    14b6:	87 cf       	rjmp	.-242    	; 0x13c6 <_Z14updateZoneflagv+0x38>
    14b8:	9c cf       	rjmp	.-200    	; 0x13f2 <_Z14updateZoneflagv+0x64>
			GoldenRackGiven = false;
		}
	}
	
 	
}
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <_Z18gorockthegamefieldv>:
// 			if(task5){uart0_puts("5");}
// 			if(task6){uart0_puts("6");}
// 				if(task7){uart0_puts("7");}
// 				if(task8){uart0_puts("8");}

	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
    14be:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    14c2:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    14c6:	05 97       	sbiw	r24, 0x05	; 5
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <_Z18gorockthegamefieldv+0x1a>
    14ca:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    14ce:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    14d2:	06 97       	sbiw	r24, 0x06	; 6
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <_Z18gorockthegamefieldv+0x1a>
    14d6:	50 c0       	rjmp	.+160    	; 0x1578 <_Z18gorockthegamefieldv+0xba>
    14d8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    14dc:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    14e0:	08 97       	sbiw	r24, 0x08	; 8
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <_Z18gorockthegamefieldv+0x28>
    14e4:	49 c0       	rjmp	.+146    	; 0x1578 <_Z18gorockthegamefieldv+0xba>
    14e6:	65 c3       	rjmp	.+1738   	; 0x1bb2 <_Z18gorockthegamefieldv+0x6f4>
		
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    14e8:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <task5>
    14ec:	81 11       	cpse	r24, r1
    14ee:	1f c0       	rjmp	.+62     	; 0x152e <_Z18gorockthegamefieldv+0x70>
			/*if there is no manual robot infront of automatic robot*/
			if((ZONE_STATUSPORT & (1<<ZONE_STATUSPIN))){
    14f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    14f4:	86 ff       	sbrs	r24, 6
    14f6:	12 c0       	rjmp	.+36     	; 0x151c <_Z18gorockthegamefieldv+0x5e>
				/*go directly to loading zone 2 and manual robot is waiting there*/
				where = inLZ1;
    14f8:	85 e0       	ldi	r24, 0x05	; 5
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1500:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
				gotoLZ2 = true;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <gotoLZ2>
				FlagChangeSetpointCompass = false;
    150a:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <FlagChangeSetpointCompass>
				FlagInitialAngleSetpoint = false;
    150e:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <FlagInitialAngleSetpoint>
				ShuttleCockGiven = true;	
    1512:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <ShuttleCockGiven>
				ShuttleCockArmGone = true;
    1516:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ShuttleCockArmGone>
    151a:	2e c0       	rjmp	.+92     	; 0x1578 <_Z18gorockthegamefieldv+0xba>
			
			/*if there is manual robot infront of automatic robot*/
			
			else{
				/*if there is manual robot ahead of automatic robot then goto throwing zone1*/
				GoThrowingZone1 = true;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <GoThrowingZone1>
				task3 = task4 = false;
    1522:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <task4>
    1526:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <task3>
				updateZoneflag();
    152a:	31 df       	rcall	.-414    	; 0x138e <_Z14updateZoneflagv>
    152c:	25 c0       	rjmp	.+74     	; 0x1578 <_Z18gorockthegamefieldv+0xba>
				//holdposition();
			}	
		}
		else if(task6 && task7 ){
    152e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task6>
    1532:	88 23       	and	r24, r24
    1534:	f9 f0       	breq	.+62     	; 0x1574 <_Z18gorockthegamefieldv+0xb6>
    1536:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task7>
    153a:	88 23       	and	r24, r24
    153c:	d9 f0       	breq	.+54     	; 0x1574 <_Z18gorockthegamefieldv+0xb6>
			if((ZONE_STATUSPORT & (1<< ZONE_STATUSPIN))){
    153e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    1542:	86 ff       	sbrs	r24, 6
    1544:	0b c0       	rjmp	.+22     	; 0x155c <_Z18gorockthegamefieldv+0x9e>
				where = inLZ2;
    1546:	86 e0       	ldi	r24, 0x06	; 6
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    154e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
				ManualInFrontOfLZ2 = false;
    1552:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <ManualInFrontOfLZ2>
				updateZoneflag();
				holdposition();
    1556:	1b df       	rcall	.-458    	; 0x138e <_Z14updateZoneflagv>
    1558:	f8 de       	rcall	.-528    	; 0x134a <_Z12holdpositionv>
    155a:	0e c0       	rjmp	.+28     	; 0x1578 <_Z18gorockthegamefieldv+0xba>
			}
			else if (ManualInFrontOfLZ2){
    155c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ManualInFrontOfLZ2>
    1560:	88 23       	and	r24, r24
    1562:	29 f0       	breq	.+10     	; 0x156e <_Z18gorockthegamefieldv+0xb0>
				task6 = task7 = false;
    1564:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <task7>
    1568:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <task6>
			}
			else{
				updateZoneflag();
				holdposition();
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <_Z18gorockthegamefieldv+0xba>
    156e:	0f df       	rcall	.-482    	; 0x138e <_Z14updateZoneflagv>
    1570:	ec de       	rcall	.-552    	; 0x134a <_Z12holdpositionv>
			}
		}
		
		/*if the robot is in loading zone 1 or loading zone 2  otherwise */
		else{
			updateZoneflag();
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <_Z18gorockthegamefieldv+0xba>
    1574:	0c df       	rcall	.-488    	; 0x138e <_Z14updateZoneflagv>
			holdposition();
    1576:	e9 de       	rcall	.-558    	; 0x134a <_Z12holdpositionv>
    1578:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <task1>
		}
	}
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point){	
    157c:	81 11       	cpse	r24, r1
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <_Z18gorockthegamefieldv+0xea>
    1580:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1584:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1588:	89 2b       	or	r24, r25
    158a:	09 f4       	brne	.+2      	; 0x158e <_Z18gorockthegamefieldv+0xd0>
    158c:	17 c3       	rjmp	.+1582   	; 0x1bbc <_Z18gorockthegamefieldv+0x6fe>
    158e:	55 c0       	rjmp	.+170    	; 0x163a <_Z18gorockthegamefieldv+0x17c>
    1590:	78 94       	sei
	totalLine = 0;
	return linetracker_data;
}

inline void linetrackerXjunctionWatch(void){
	sei();
    1592:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE0);
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	80 83       	st	Z, r24
    159c:	eb e6       	ldi	r30, 0x6B	; 107
	PCMSK0 |= (1<<PCINT4);
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	80 61       	ori	r24, 0x10	; 16
    15a4:	80 83       	st	Z, r24
    15a6:	49 c0       	rjmp	.+146    	; 0x163a <_Z18gorockthegamefieldv+0x17c>
    15a8:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <task2>
		}
		//uart0_puts("\r\n");
	}
	
	///move from corner to loading zone1 if task1 is completed and task2 not completed
	else if(task1 && !task2){	
    15ac:	81 11       	cpse	r24, r1
    15ae:	1e c0       	rjmp	.+60     	; 0x15ec <_Z18gorockthegamefieldv+0x12e>
    15b0:	81 e0       	ldi	r24, 0x01	; 1
		where = inFirstloadingCorner;
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    15b8:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
    15bc:	87 e0       	ldi	r24, 0x07	; 7
		//uart0_puts("moving aheead \r\n");
		robotState = moving;
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    15c4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    15c8:	eb e6       	ldi	r30, 0x6B	; 107
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT16);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 7e       	andi	r24, 0xEF	; 239
    15d0:	80 83       	st	Z, r24
    15d2:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    15d4:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	84 60       	ori	r24, 0x04	; 4
    15dc:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT16);
    15de:	ed e6       	ldi	r30, 0x6D	; 109
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	81 60       	ori	r24, 0x01	; 1
    15e6:	80 83       	st	Z, r24
		linetrackerXjunctionWatchOff();
		linetrackerYjunctionWatch();
		movYForwardSlow();
    15e8:	8a de       	rcall	.-748    	; 0x12fe <_Z15movYForwardSlowv>
    15ea:	27 c0       	rjmp	.+78     	; 0x163a <_Z18gorockthegamefieldv+0x17c>
    15ec:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
	}
	/*if task2 is completed and robot just reached loading zone 1*/
	else if(task1 && task2 && where == inFirstloadingCorner && (robotState == moving)){
    15f0:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	09 f5       	brne	.+66     	; 0x163a <_Z18gorockthegamefieldv+0x17c>
    15f8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    15fc:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1600:	07 97       	sbiw	r24, 0x07	; 7
    1602:	d9 f4       	brne	.+54     	; 0x163a <_Z18gorockthegamefieldv+0x17c>
    1604:	85 e0       	ldi	r24, 0x05	; 5
		where = inLZ1;
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    160c:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
    1610:	88 e0       	ldi	r24, 0x08	; 8
		//uart0_puts("in loading zone 1\r\n");
		robotState = notmoving;
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1618:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    161c:	ed e6       	ldi	r30, 0x6D	; 109
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT16);
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8e 7f       	andi	r24, 0xFE	; 254
    1624:	80 83       	st	Z, r24
    1626:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
		linetrackerYjunctionWatchOff();
		BrakeMotor();
    162a:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
		inline void resetCount(){count_encoder = 0;};
    162e:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1632:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    1636:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    163a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <ShuttleCockGiven>
		encoderX.resetCount();
		encoderY.resetCount();
	}
	
	/*if Shuttlecock is given*/
	if(ShuttleCockGiven && ShuttleCockArmGone)
    163e:	88 23       	and	r24, r24
    1640:	09 f4       	brne	.+2      	; 0x1644 <_Z18gorockthegamefieldv+0x186>
    1642:	49 c4       	rjmp	.+2194   	; 0x1ed6 <_Z18gorockthegamefieldv+0xa18>
    1644:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <ShuttleCockArmGone>
    1648:	88 23       	and	r24, r24
    164a:	09 f4       	brne	.+2      	; 0x164e <_Z18gorockthegamefieldv+0x190>
    164c:	44 c4       	rjmp	.+2184   	; 0x1ed6 <_Z18gorockthegamefieldv+0xa18>
    164e:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <GoThrowingZone1>
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
    1652:	88 23       	and	r24, r24
    1654:	09 f4       	brne	.+2      	; 0x1658 <_Z18gorockthegamefieldv+0x19a>
    1656:	1a c3       	rjmp	.+1588   	; 0x1c8c <_Z18gorockthegamefieldv+0x7ce>
    1658:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <task3>
    165c:	81 11       	cpse	r24, r1
    165e:	13 c0       	rjmp	.+38     	; 0x1686 <_Z18gorockthegamefieldv+0x1c8>
    1660:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1664:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1668:	05 97       	sbiw	r24, 0x05	; 5
    166a:	f1 f4       	brne	.+60     	; 0x16a8 <_Z18gorockthegamefieldv+0x1ea>
    166c:	db c2       	rjmp	.+1462   	; 0x1c24 <_Z18gorockthegamefieldv+0x766>
    166e:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    1670:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	84 60       	ori	r24, 0x04	; 4
    1678:	80 83       	st	Z, r24
    167a:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	81 60       	ori	r24, 0x01	; 1
    1682:	80 83       	st	Z, r24
    1684:	11 c0       	rjmp	.+34     	; 0x16a8 <_Z18gorockthegamefieldv+0x1ea>
    1686:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task4>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    168a:	81 11       	cpse	r24, r1
    168c:	0d c0       	rjmp	.+26     	; 0x16a8 <_Z18gorockthegamefieldv+0x1ea>
    168e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1692:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1696:	05 97       	sbiw	r24, 0x05	; 5
    1698:	39 f4       	brne	.+14     	; 0x16a8 <_Z18gorockthegamefieldv+0x1ea>
    169a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    169e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    16a2:	07 97       	sbiw	r24, 0x07	; 7
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <_Z18gorockthegamefieldv+0x1ea>
    16a6:	f8 c2       	rjmp	.+1520   	; 0x1c98 <_Z18gorockthegamefieldv+0x7da>
    16a8:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
				robotState = notmoving;
				
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
    16ac:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    16b0:	02 97       	sbiw	r24, 0x02	; 2
    16b2:	d1 f4       	brne	.+52     	; 0x16e8 <_Z18gorockthegamefieldv+0x22a>
    16b4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    16b8:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    16bc:	08 97       	sbiw	r24, 0x08	; 8
    16be:	a1 f4       	brne	.+40     	; 0x16e8 <_Z18gorockthegamefieldv+0x22a>
    16c0:	0a c3       	rjmp	.+1556   	; 0x1cd6 <_Z18gorockthegamefieldv+0x818>
    16c2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <_b_Transmit_once>
				uart0_puts("Throwing \r\n");
				holdposition();

				if(Stable_Robot() && _b_Transmit_once)
    16c6:	81 11       	cpse	r24, r1
    16c8:	0f c3       	rjmp	.+1566   	; 0x1ce8 <_Z18gorockthegamefieldv+0x82a>
    16ca:	0e 94 2c 14 	call	0x2858	; 0x2858 <_Z10uart3_getcv>
				{	
					uart3_putc('1');
					_b_Transmit_once = false;
				}
				
				receiveAck = uart3_getc();
    16ce:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    16d2:	87 36       	cpi	r24, 0x67	; 103
				if(receiveAck == 'g'){
    16d4:	49 f4       	brne	.+18     	; 0x16e8 <_Z18gorockthegamefieldv+0x22a>
    16d6:	81 e0       	ldi	r24, 0x01	; 1
					backtoLZ1 = true;
    16d8:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <backtoLZ1>
    16dc:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <GoThrowingZone1>
					GoThrowingZone1 = false;
    16e0:	80 e2       	ldi	r24, 0x20	; 32
					receiveAck = ' ';
    16e2:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    16e6:	05 c0       	rjmp	.+10     	; 0x16f2 <_Z18gorockthegamefieldv+0x234>
    16e8:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <backtoLZ1>
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ1 && task3 && !task4){
    16ec:	88 23       	and	r24, r24
    16ee:	09 f4       	brne	.+2      	; 0x16f2 <_Z18gorockthegamefieldv+0x234>
    16f0:	49 c0       	rjmp	.+146    	; 0x1784 <_Z18gorockthegamefieldv+0x2c6>
    16f2:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <task3>
    16f6:	88 23       	and	r24, r24
    16f8:	09 f4       	brne	.+2      	; 0x16fc <_Z18gorockthegamefieldv+0x23e>
    16fa:	44 c0       	rjmp	.+136    	; 0x1784 <_Z18gorockthegamefieldv+0x2c6>
    16fc:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task4>
    1700:	81 11       	cpse	r24, r1
    1702:	45 c0       	rjmp	.+138    	; 0x178e <_Z18gorockthegamefieldv+0x2d0>
    1704:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1706:	f3 e0       	ldi	r31, 0x03	; 3
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e4       	ldi	r27, 0x40	; 64
    1710:	85 8b       	std	Z+21, r24	; 0x15
    1712:	96 8b       	std	Z+22, r25	; 0x16
    1714:	a7 8b       	std	Z+23, r26	; 0x17
    1716:	b0 8f       	std	Z+24, r27	; 0x18
    1718:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    171a:	12 8e       	std	Z+26, r1	; 0x1a
    171c:	13 8e       	std	Z+27, r1	; 0x1b
    171e:	14 8e       	std	Z+28, r1	; 0x1c
    1720:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a8 ef       	ldi	r26, 0xF8	; 248
    1726:	b1 e4       	ldi	r27, 0x41	; 65
    1728:	85 8f       	std	Z+29, r24	; 0x1d
    172a:	96 8f       	std	Z+30, r25	; 0x1e
    172c:	a7 8f       	std	Z+31, r26	; 0x1f
    172e:	b0 a3       	std	Z+32, r27	; 0x20
				compass.setPid(2,0,31);
				//uart0_puts("Returning from tz1 \t");
				movy(Throwingzone1.y, Back,LZ1_TZ1_MAX,LZ1_TZ1_MIN);
    1730:	24 e1       	ldi	r18, 0x14	; 20
    1732:	44 e6       	ldi	r20, 0x64	; 100
    1734:	63 e0       	ldi	r22, 0x03	; 3
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	88 e5       	ldi	r24, 0x58	; 88
    173a:	97 e0       	ldi	r25, 0x07	; 7
    173c:	68 dc       	rcall	.-1840   	; 0x100e <_Z4movyiihh>
    173e:	87 e0       	ldi	r24, 0x07	; 7
				robotState = moving;
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1746:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    174a:	84 eb       	ldi	r24, 0xB4	; 180
				if(abs(encoderY.getdistance()) >= 1200){
    174c:	92 e0       	ldi	r25, 0x02	; 2
    174e:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    1752:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
    1756:	9b 01       	movw	r18, r22
    1758:	77 23       	and	r23, r23
    175a:	24 f4       	brge	.+8      	; 0x1764 <_Z18gorockthegamefieldv+0x2a6>
    175c:	22 27       	eor	r18, r18
    175e:	33 27       	eor	r19, r19
    1760:	26 1b       	sub	r18, r22
    1762:	37 0b       	sbc	r19, r23
    1764:	20 3b       	cpi	r18, 0xB0	; 176
    1766:	34 40       	sbci	r19, 0x04	; 4
    1768:	0c f4       	brge	.+2      	; 0x176c <_Z18gorockthegamefieldv+0x2ae>
    176a:	74 c0       	rjmp	.+232    	; 0x1854 <_Z18gorockthegamefieldv+0x396>
    176c:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    176e:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	84 60       	ori	r24, 0x04	; 4
    1776:	80 83       	st	Z, r24
    1778:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	81 60       	ori	r24, 0x01	; 1
    1780:	80 83       	st	Z, r24
    1782:	68 c0       	rjmp	.+208    	; 0x1854 <_Z18gorockthegamefieldv+0x396>
    1784:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task4>
				//uart0_puts("\r\n");
			
			}
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
    1788:	88 23       	and	r24, r24
    178a:	09 f4       	brne	.+2      	; 0x178e <_Z18gorockthegamefieldv+0x2d0>
    178c:	d4 c2       	rjmp	.+1448   	; 0x1d36 <_Z18gorockthegamefieldv+0x878>
    178e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1792:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1796:	07 97       	sbiw	r24, 0x07	; 7
    1798:	09 f0       	breq	.+2      	; 0x179c <_Z18gorockthegamefieldv+0x2de>
    179a:	cd c2       	rjmp	.+1434   	; 0x1d36 <_Z18gorockthegamefieldv+0x878>
    179c:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    17a0:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    17a4:	02 97       	sbiw	r24, 0x02	; 2
    17a6:	09 f0       	breq	.+2      	; 0x17aa <_Z18gorockthegamefieldv+0x2ec>
    17a8:	c6 c2       	rjmp	.+1420   	; 0x1d36 <_Z18gorockthegamefieldv+0x878>
    17aa:	a3 c2       	rjmp	.+1350   	; 0x1cf2 <_Z18gorockthegamefieldv+0x834>
    17ac:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <task5>
				ShuttleCockGiven = false;
				ShuttleCockArmGone = false;
				backtoLZ1 = false;
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    17b0:	81 11       	cpse	r24, r1
    17b2:	43 c0       	rjmp	.+134    	; 0x183a <_Z18gorockthegamefieldv+0x37c>
    17b4:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    17b6:	f3 e0       	ldi	r31, 0x03	; 3
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	b0 e4       	ldi	r27, 0x40	; 64
    17c0:	85 8b       	std	Z+21, r24	; 0x15
    17c2:	96 8b       	std	Z+22, r25	; 0x16
    17c4:	a7 8b       	std	Z+23, r26	; 0x17
    17c6:	b0 8f       	std	Z+24, r27	; 0x18
    17c8:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    17ca:	12 8e       	std	Z+26, r1	; 0x1a
    17cc:	13 8e       	std	Z+27, r1	; 0x1b
    17ce:	14 8e       	std	Z+28, r1	; 0x1c
    17d0:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a8 ef       	ldi	r26, 0xF8	; 248
    17d6:	b1 e4       	ldi	r27, 0x41	; 65
    17d8:	85 8f       	std	Z+29, r24	; 0x1d
    17da:	96 8f       	std	Z+30, r25	; 0x1e
    17dc:	a7 8f       	std	Z+31, r26	; 0x1f
    17de:	b0 a3       	std	Z+32, r27	; 0x20
				//uart0_puts("heading loading zone 2\t");
				compass.setPid(2,0,31);
				movx(2000,Front,LZ1_LZ2_MAX,LZ1_LZ2_MIN);
    17e0:	24 e1       	ldi	r18, 0x14	; 20
    17e2:	44 e6       	ldi	r20, 0x64	; 100
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	80 ed       	ldi	r24, 0xD0	; 208
    17ea:	97 e0       	ldi	r25, 0x07	; 7
    17ec:	9f da       	rcall	.-2754   	; 0xd2c <_Z4movxiihh>
    17ee:	87 e0       	ldi	r24, 0x07	; 7
				robotState = moving;
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    17f6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    17fa:	8c eb       	ldi	r24, 0xBC	; 188
				if(abs(encoderX.getdistance()) >= 1900){
    17fc:	92 e0       	ldi	r25, 0x02	; 2
    17fe:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    1802:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
    1806:	9b 01       	movw	r18, r22
    1808:	77 23       	and	r23, r23
    180a:	24 f4       	brge	.+8      	; 0x1814 <_Z18gorockthegamefieldv+0x356>
    180c:	22 27       	eor	r18, r18
    180e:	33 27       	eor	r19, r19
    1810:	26 1b       	sub	r18, r22
    1812:	37 0b       	sbc	r19, r23
    1814:	2c 36       	cpi	r18, 0x6C	; 108
    1816:	37 40       	sbci	r19, 0x07	; 7
    1818:	ec f0       	brlt	.+58     	; 0x1854 <_Z18gorockthegamefieldv+0x396>
    181a:	78 94       	sei
	totalLine = 0;
	return linetracker_data;
}

inline void linetrackerXjunctionWatch(void){
	sei();
    181c:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE0);
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	81 60       	ori	r24, 0x01	; 1
    1824:	80 83       	st	Z, r24
    1826:	eb e6       	ldi	r30, 0x6B	; 107
	PCMSK0 |= (1<<PCINT4);
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	80 61       	ori	r24, 0x10	; 16
    182e:	80 83       	st	Z, r24
    1830:	11 c0       	rjmp	.+34     	; 0x1854 <_Z18gorockthegamefieldv+0x396>
    1832:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <task5>
				}
				//uart0_puts("\r\n");
		
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
    1836:	88 23       	and	r24, r24
    1838:	69 f0       	breq	.+26     	; 0x1854 <_Z18gorockthegamefieldv+0x396>
    183a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    183e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1842:	07 97       	sbiw	r24, 0x07	; 7
    1844:	39 f4       	brne	.+14     	; 0x1854 <_Z18gorockthegamefieldv+0x396>
    1846:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    184a:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    184e:	05 97       	sbiw	r24, 0x05	; 5
    1850:	09 f4       	brne	.+2      	; 0x1854 <_Z18gorockthegamefieldv+0x396>
    1852:	76 c2       	rjmp	.+1260   	; 0x1d40 <_Z18gorockthegamefieldv+0x882>
    1854:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <GoThrowingZone2>
			}
			
			
			/*if there is manual robot ahead of automatic robot && golden rack is not given and shuttlecock
			is given*/
			if(GoThrowingZone2 && !task6 ){
    1858:	88 23       	and	r24, r24
    185a:	09 f4       	brne	.+2      	; 0x185e <_Z18gorockthegamefieldv+0x3a0>
    185c:	43 c0       	rjmp	.+134    	; 0x18e4 <_Z18gorockthegamefieldv+0x426>
    185e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task6>
    1862:	81 11       	cpse	r24, r1
    1864:	43 c0       	rjmp	.+134    	; 0x18ec <_Z18gorockthegamefieldv+0x42e>
    1866:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1868:	f3 e0       	ldi	r31, 0x03	; 3
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	a0 e0       	ldi	r26, 0x00	; 0
    1870:	b0 e4       	ldi	r27, 0x40	; 64
    1872:	85 8b       	std	Z+21, r24	; 0x15
    1874:	96 8b       	std	Z+22, r25	; 0x16
    1876:	a7 8b       	std	Z+23, r26	; 0x17
    1878:	b0 8f       	std	Z+24, r27	; 0x18
    187a:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    187c:	12 8e       	std	Z+26, r1	; 0x1a
    187e:	13 8e       	std	Z+27, r1	; 0x1b
    1880:	14 8e       	std	Z+28, r1	; 0x1c
    1882:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a8 ef       	ldi	r26, 0xF8	; 248
    1888:	b1 e4       	ldi	r27, 0x41	; 65
    188a:	85 8f       	std	Z+29, r24	; 0x1d
    188c:	96 8f       	std	Z+30, r25	; 0x1e
    188e:	a7 8f       	std	Z+31, r26	; 0x1f
    1890:	b0 a3       	std	Z+32, r27	; 0x20
    1892:	87 e0       	ldi	r24, 0x07	; 7
				//uart0_puts("going tz2 \t");
				compass.setPid(2,0,31);
				robotState = moving;
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    189a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				movy(Throwingzone2.y, Front,LZ2_TZ2_MAX,LZ2_TZ2_MIN);
    189e:	24 e1       	ldi	r18, 0x14	; 20
    18a0:	44 e6       	ldi	r20, 0x64	; 100
    18a2:	62 e0       	ldi	r22, 0x02	; 2
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	88 e5       	ldi	r24, 0x58	; 88
    18a8:	97 e0       	ldi	r25, 0x07	; 7
    18aa:	b1 db       	rcall	.-2206   	; 0x100e <_Z4movyiihh>
    18ac:	84 eb       	ldi	r24, 0xB4	; 180
			
				if(abs(encoderY.getdistance()) >=1200){
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    18b4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
    18b8:	9b 01       	movw	r18, r22
    18ba:	77 23       	and	r23, r23
    18bc:	24 f4       	brge	.+8      	; 0x18c6 <_Z18gorockthegamefieldv+0x408>
    18be:	22 27       	eor	r18, r18
    18c0:	33 27       	eor	r19, r19
    18c2:	26 1b       	sub	r18, r22
    18c4:	37 0b       	sbc	r19, r23
    18c6:	20 3b       	cpi	r18, 0xB0	; 176
    18c8:	34 40       	sbci	r19, 0x04	; 4
    18ca:	0c f1       	brlt	.+66     	; 0x190e <_Z18gorockthegamefieldv+0x450>
    18cc:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    18ce:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	84 60       	ori	r24, 0x04	; 4
    18d6:	80 83       	st	Z, r24
    18d8:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	81 60       	ori	r24, 0x01	; 1
    18e0:	80 83       	st	Z, r24
    18e2:	15 c0       	rjmp	.+42     	; 0x190e <_Z18gorockthegamefieldv+0x450>
    18e4:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task6>
				}
				//uart0_puts("\r\n");

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
    18e8:	88 23       	and	r24, r24
    18ea:	89 f0       	breq	.+34     	; 0x190e <_Z18gorockthegamefieldv+0x450>
    18ec:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task7>
    18f0:	81 11       	cpse	r24, r1
    18f2:	0d c0       	rjmp	.+26     	; 0x190e <_Z18gorockthegamefieldv+0x450>
    18f4:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    18f8:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    18fc:	06 97       	sbiw	r24, 0x06	; 6
    18fe:	39 f4       	brne	.+14     	; 0x190e <_Z18gorockthegamefieldv+0x450>
    1900:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1904:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1908:	07 97       	sbiw	r24, 0x07	; 7
    190a:	09 f4       	brne	.+2      	; 0x190e <_Z18gorockthegamefieldv+0x450>
    190c:	3b c2       	rjmp	.+1142   	; 0x1d84 <_Z18gorockthegamefieldv+0x8c6>
    190e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
				//uart3_putc('2');
				
			}
			/* if in throwing zone 2 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ2 && robotState == notmoving){
    1912:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1916:	03 97       	sbiw	r24, 0x03	; 3
    1918:	c9 f4       	brne	.+50     	; 0x194c <_Z18gorockthegamefieldv+0x48e>
    191a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    191e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1922:	08 97       	sbiw	r24, 0x08	; 8
    1924:	99 f4       	brne	.+38     	; 0x194c <_Z18gorockthegamefieldv+0x48e>
    1926:	4d c2       	rjmp	.+1178   	; 0x1dc2 <_Z18gorockthegamefieldv+0x904>
				uart0_puts("throwing \r\n");
				holdposition();

				if(Stable_Robot() && _b_Transmit_once)
    1928:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <_b_Transmit_once>
    192c:	81 11       	cpse	r24, r1
    192e:	52 c2       	rjmp	.+1188   	; 0x1dd4 <_Z18gorockthegamefieldv+0x916>
				{	
					uart3_putc('2');
					_b_Transmit_once = false;
				}

				receiveAck = uart3_getc();
    1930:	93 d7       	rcall	.+3878   	; 0x2858 <_Z10uart3_getcv>
    1932:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    1936:	87 36       	cpi	r24, 0x67	; 103
				if(receiveAck == 'g'){
    1938:	49 f4       	brne	.+18     	; 0x194c <_Z18gorockthegamefieldv+0x48e>
    193a:	81 e0       	ldi	r24, 0x01	; 1
					backtoLZ2 = true;
    193c:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <backtoLZ2>
    1940:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <GoThrowingZone2>
					GoThrowingZone2 = false;
    1944:	80 e2       	ldi	r24, 0x20	; 32
					receiveAck = ' ';
    1946:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    194a:	05 c0       	rjmp	.+10     	; 0x1956 <_Z18gorockthegamefieldv+0x498>
    194c:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <backtoLZ2>
				}
			}
			///if acknowledge received from throwing mechanism after throwing then back to loading zone 2
			if(backtoLZ2 && task6 && !task7){
    1950:	88 23       	and	r24, r24
    1952:	09 f4       	brne	.+2      	; 0x1956 <_Z18gorockthegamefieldv+0x498>
    1954:	48 c0       	rjmp	.+144    	; 0x19e6 <_Z18gorockthegamefieldv+0x528>
    1956:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task6>
    195a:	88 23       	and	r24, r24
    195c:	09 f4       	brne	.+2      	; 0x1960 <_Z18gorockthegamefieldv+0x4a2>
    195e:	43 c0       	rjmp	.+134    	; 0x19e6 <_Z18gorockthegamefieldv+0x528>
    1960:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task7>
    1964:	81 11       	cpse	r24, r1
    1966:	43 c0       	rjmp	.+134    	; 0x19ee <_Z18gorockthegamefieldv+0x530>
    1968:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    196a:	f3 e0       	ldi	r31, 0x03	; 3
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 e0       	ldi	r26, 0x00	; 0
    1972:	b0 e4       	ldi	r27, 0x40	; 64
    1974:	85 8b       	std	Z+21, r24	; 0x15
    1976:	96 8b       	std	Z+22, r25	; 0x16
    1978:	a7 8b       	std	Z+23, r26	; 0x17
    197a:	b0 8f       	std	Z+24, r27	; 0x18
    197c:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    197e:	12 8e       	std	Z+26, r1	; 0x1a
    1980:	13 8e       	std	Z+27, r1	; 0x1b
    1982:	14 8e       	std	Z+28, r1	; 0x1c
    1984:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	a8 ef       	ldi	r26, 0xF8	; 248
    198a:	b1 e4       	ldi	r27, 0x41	; 65
    198c:	85 8f       	std	Z+29, r24	; 0x1d
    198e:	96 8f       	std	Z+30, r25	; 0x1e
    1990:	a7 8f       	std	Z+31, r26	; 0x1f
    1992:	b0 a3       	std	Z+32, r27	; 0x20
				//uart0_puts("returning to loading zone 2 \t");
				compass.setPid(2,0,31);
				movy(Throwingzone2.y,Back,LZ2_TZ2_MAX,LZ2_TZ2_MIN);
    1994:	24 e1       	ldi	r18, 0x14	; 20
    1996:	44 e6       	ldi	r20, 0x64	; 100
    1998:	63 e0       	ldi	r22, 0x03	; 3
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	88 e5       	ldi	r24, 0x58	; 88
    199e:	97 e0       	ldi	r25, 0x07	; 7
    19a0:	36 db       	rcall	.-2452   	; 0x100e <_Z4movyiihh>
    19a2:	87 e0       	ldi	r24, 0x07	; 7
				robotState = moving;
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    19aa:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    19ae:	84 eb       	ldi	r24, 0xB4	; 180
			
				if(abs(encoderY.getdistance()) >= 1200){
    19b0:	92 e0       	ldi	r25, 0x02	; 2
    19b2:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    19b6:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
    19ba:	9b 01       	movw	r18, r22
    19bc:	77 23       	and	r23, r23
    19be:	24 f4       	brge	.+8      	; 0x19c8 <_Z18gorockthegamefieldv+0x50a>
    19c0:	22 27       	eor	r18, r18
    19c2:	33 27       	eor	r19, r19
    19c4:	26 1b       	sub	r18, r22
    19c6:	37 0b       	sbc	r19, r23
    19c8:	20 3b       	cpi	r18, 0xB0	; 176
    19ca:	34 40       	sbci	r19, 0x04	; 4
    19cc:	ec f0       	brlt	.+58     	; 0x1a08 <_Z18gorockthegamefieldv+0x54a>
    19ce:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    19d0:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	84 60       	ori	r24, 0x04	; 4
    19d8:	80 83       	st	Z, r24
    19da:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	81 60       	ori	r24, 0x01	; 1
    19e2:	80 83       	st	Z, r24
    19e4:	11 c0       	rjmp	.+34     	; 0x1a08 <_Z18gorockthegamefieldv+0x54a>
    19e6:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task7>
				//uart0_puts("\r\n");
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
    19ea:	88 23       	and	r24, r24
    19ec:	69 f0       	breq	.+26     	; 0x1a08 <_Z18gorockthegamefieldv+0x54a>
    19ee:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    19f2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    19f6:	07 97       	sbiw	r24, 0x07	; 7
    19f8:	39 f4       	brne	.+14     	; 0x1a08 <_Z18gorockthegamefieldv+0x54a>
    19fa:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    19fe:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1a02:	03 97       	sbiw	r24, 0x03	; 3
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <_Z18gorockthegamefieldv+0x54a>
    1a06:	eb c1       	rjmp	.+982    	; 0x1dde <_Z18gorockthegamefieldv+0x920>
    1a08:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <GoThrowingZone3>
				ShuttleCockArmGone = false;
				backtoLZ2 = false;
			}
			
			/*if golden rack is given to automatic robot and says goto throwingzone 1*/
			if(GoThrowingZone3 && !task8){
    1a0c:	88 23       	and	r24, r24
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <_Z18gorockthegamefieldv+0x554>
    1a10:	43 c0       	rjmp	.+134    	; 0x1a98 <_Z18gorockthegamefieldv+0x5da>
    1a12:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <task8>
    1a16:	81 11       	cpse	r24, r1
    1a18:	43 c0       	rjmp	.+134    	; 0x1aa0 <_Z18gorockthegamefieldv+0x5e2>
    1a1a:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1a1c:	f3 e0       	ldi	r31, 0x03	; 3
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e0       	ldi	r26, 0x00	; 0
    1a24:	b0 e4       	ldi	r27, 0x40	; 64
    1a26:	85 8b       	std	Z+21, r24	; 0x15
    1a28:	96 8b       	std	Z+22, r25	; 0x16
    1a2a:	a7 8b       	std	Z+23, r26	; 0x17
    1a2c:	b0 8f       	std	Z+24, r27	; 0x18
    1a2e:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    1a30:	12 8e       	std	Z+26, r1	; 0x1a
    1a32:	13 8e       	std	Z+27, r1	; 0x1b
    1a34:	14 8e       	std	Z+28, r1	; 0x1c
    1a36:	80 e0       	ldi	r24, 0x00	; 0
		kd = d;
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a8 ef       	ldi	r26, 0xF8	; 248
    1a3c:	b1 e4       	ldi	r27, 0x41	; 65
    1a3e:	85 8f       	std	Z+29, r24	; 0x1d
    1a40:	96 8f       	std	Z+30, r25	; 0x1e
    1a42:	a7 8f       	std	Z+31, r26	; 0x1f
    1a44:	b0 a3       	std	Z+32, r27	; 0x20
				compass.setPid(2,0,31);
				//uart0_puts("going tz3 \t");
				movy(5100,Front,LZ2_TZ3_MAX,LZ2_TZ3_MIN);
    1a46:	24 e1       	ldi	r18, 0x14	; 20
    1a48:	46 e9       	ldi	r20, 0x96	; 150
    1a4a:	62 e0       	ldi	r22, 0x02	; 2
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	8c ee       	ldi	r24, 0xEC	; 236
    1a50:	93 e1       	ldi	r25, 0x13	; 19
    1a52:	dd da       	rcall	.-2630   	; 0x100e <_Z4movyiihh>
    1a54:	87 e0       	ldi	r24, 0x07	; 7
				robotState = moving;
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1a5c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1a60:	84 eb       	ldi	r24, 0xB4	; 180
				if(abs(encoderY.getdistance()) >= 4000){
    1a62:	92 e0       	ldi	r25, 0x02	; 2
    1a64:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    1a68:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__fixsfsi>
    1a6c:	9b 01       	movw	r18, r22
    1a6e:	77 23       	and	r23, r23
    1a70:	24 f4       	brge	.+8      	; 0x1a7a <_Z18gorockthegamefieldv+0x5bc>
    1a72:	22 27       	eor	r18, r18
    1a74:	33 27       	eor	r19, r19
    1a76:	26 1b       	sub	r18, r22
    1a78:	37 0b       	sbc	r19, r23
    1a7a:	20 3a       	cpi	r18, 0xA0	; 160
    1a7c:	3f 40       	sbci	r19, 0x0F	; 15
    1a7e:	c4 f1       	brlt	.+112    	; 0x1af0 <_Z18gorockthegamefieldv+0x632>
    1a80:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    1a82:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	84 60       	ori	r24, 0x04	; 4
    1a8a:	80 83       	st	Z, r24
    1a8c:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	81 60       	ori	r24, 0x01	; 1
    1a94:	80 83       	st	Z, r24
    1a96:	2c c0       	rjmp	.+88     	; 0x1af0 <_Z18gorockthegamefieldv+0x632>
    1a98:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <task8>
					//uart0_puts("interrupt on");
				}
				//uart0_puts("\r\n");
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
    1a9c:	88 23       	and	r24, r24
    1a9e:	41 f1       	breq	.+80     	; 0x1af0 <_Z18gorockthegamefieldv+0x632>
    1aa0:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1aa4:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1aa8:	06 97       	sbiw	r24, 0x06	; 6
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <_Z18gorockthegamefieldv+0x5f0>
    1aac:	0c c2       	rjmp	.+1048   	; 0x1ec6 <_Z18gorockthegamefieldv+0xa08>
    1aae:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1ab2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1ab6:	07 97       	sbiw	r24, 0x07	; 7
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <_Z18gorockthegamefieldv+0x5fe>
    1aba:	05 c2       	rjmp	.+1034   	; 0x1ec6 <_Z18gorockthegamefieldv+0xa08>
    1abc:	b3 c1       	rjmp	.+870    	; 0x1e24 <_Z18gorockthegamefieldv+0x966>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    1abe:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1ac2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1ac6:	08 97       	sbiw	r24, 0x08	; 8
    1ac8:	99 f4       	brne	.+38     	; 0x1af0 <_Z18gorockthegamefieldv+0x632>
    1aca:	cd c1       	rjmp	.+922    	; 0x1e66 <_Z18gorockthegamefieldv+0x9a8>
				uart0_puts("holding \r\n");
				holdposition();	

				if(Stable_Robot() && _b_Transmit_once)
    1acc:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <_b_Transmit_once>
    1ad0:	81 11       	cpse	r24, r1
    1ad2:	d2 c1       	rjmp	.+932    	; 0x1e78 <_Z18gorockthegamefieldv+0x9ba>
				{	
					uart3_putc('3');
					_b_Transmit_once = false;
				}
				
				receiveAck = uart3_getc();
    1ad4:	c1 d6       	rcall	.+3458   	; 0x2858 <_Z10uart3_getcv>
    1ad6:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    1ada:	87 36       	cpi	r24, 0x67	; 103
				if(receiveAck == 'g'){
    1adc:	49 f4       	brne	.+18     	; 0x1af0 <_Z18gorockthegamefieldv+0x632>
    1ade:	81 e0       	ldi	r24, 0x01	; 1
					backtoLZ2 = true;
    1ae0:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <backtoLZ2>
    1ae4:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <GoThrowingZone3>
					GoThrowingZone3 = false;
    1ae8:	80 e2       	ldi	r24, 0x20	; 32
					receiveAck = ' ';
    1aea:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <receiveAck>
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <_Z18gorockthegamefieldv+0x63c>
    1af0:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <backtoLZ2>
				}
			}
			/*if acknowledge received from throwing mechanism after throwing then back to loading zone 2*/
			if(backtoLZ2 && task8 && !task9){
    1af4:	88 23       	and	r24, r24
    1af6:	09 f4       	brne	.+2      	; 0x1afa <_Z18gorockthegamefieldv+0x63c>
    1af8:	48 c0       	rjmp	.+144    	; 0x1b8a <_Z18gorockthegamefieldv+0x6cc>
    1afa:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <task8>
    1afe:	88 23       	and	r24, r24
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <_Z18gorockthegamefieldv+0x646>
    1b02:	43 c0       	rjmp	.+134    	; 0x1b8a <_Z18gorockthegamefieldv+0x6cc>
    1b04:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <task9>
    1b08:	81 11       	cpse	r24, r1
    1b0a:	44 c0       	rjmp	.+136    	; 0x1b94 <_Z18gorockthegamefieldv+0x6d6>
    1b0c:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1b0e:	f3 e0       	ldi	r31, 0x03	; 3
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
    1b16:	b0 e4       	ldi	r27, 0x40	; 64
    1b18:	85 8b       	std	Z+21, r24	; 0x15
    1b1a:	96 8b       	std	Z+22, r25	; 0x16
    1b1c:	a7 8b       	std	Z+23, r26	; 0x17
    1b1e:	b0 8f       	std	Z+24, r27	; 0x18
    1b20:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    1b22:	12 8e       	std	Z+26, r1	; 0x1a
    1b24:	13 8e       	std	Z+27, r1	; 0x1b
    1b26:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	a8 ef       	ldi	r26, 0xF8	; 248
    1b2e:	b1 e4       	ldi	r27, 0x41	; 65
    1b30:	85 8f       	std	Z+29, r24	; 0x1d
    1b32:	96 8f       	std	Z+30, r25	; 0x1e
    1b34:	a7 8f       	std	Z+31, r26	; 0x1f
    1b36:	b0 a3       	std	Z+32, r27	; 0x20
				//uart0_puts("back to lz2\t");
				compass.setPid(2,0,31);
				movy(5100,Back,LZ2_TZ3_MAX,LZ2_TZ3_MIN);
    1b38:	24 e1       	ldi	r18, 0x14	; 20
    1b3a:	46 e9       	ldi	r20, 0x96	; 150
    1b3c:	63 e0       	ldi	r22, 0x03	; 3
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	8c ee       	ldi	r24, 0xEC	; 236
    1b42:	93 e1       	ldi	r25, 0x13	; 19
    1b44:	64 da       	rcall	.-2872   	; 0x100e <_Z4movyiihh>
				robotState = moving;
    1b46:	87 e0       	ldi	r24, 0x07	; 7
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1b4e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				if(abs(encoderY.getdistance()) >= 4000){
    1b52:	84 eb       	ldi	r24, 0xB4	; 180
    1b54:	92 e0       	ldi	r25, 0x02	; 2
    1b56:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    1b5a:	e1 d7       	rcall	.+4034   	; 0x2b1e <__fixsfsi>
    1b5c:	9b 01       	movw	r18, r22
    1b5e:	77 23       	and	r23, r23
    1b60:	24 f4       	brge	.+8      	; 0x1b6a <_Z18gorockthegamefieldv+0x6ac>
    1b62:	22 27       	eor	r18, r18
    1b64:	33 27       	eor	r19, r19
    1b66:	26 1b       	sub	r18, r22
    1b68:	37 0b       	sbc	r19, r23
    1b6a:	20 3a       	cpi	r18, 0xA0	; 160
    1b6c:	3f 40       	sbci	r19, 0x0F	; 15
    1b6e:	0c f4       	brge	.+2      	; 0x1b72 <_Z18gorockthegamefieldv+0x6b4>
    1b70:	b2 c1       	rjmp	.+868    	; 0x1ed6 <_Z18gorockthegamefieldv+0xa18>
    1b72:	78 94       	sei
	sei();
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT4);
}
inline void linetrackerYjunctionWatch(void){
	sei();
    1b74:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1<<PCIE2);
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	84 60       	ori	r24, 0x04	; 4
    1b7c:	80 83       	st	Z, r24
    1b7e:	ed e6       	ldi	r30, 0x6D	; 109
	PCMSK2 |= (1<<PCINT16);
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	81 60       	ori	r24, 0x01	; 1
    1b86:	80 83       	st	Z, r24
    1b88:	08 95       	ret
    1b8a:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <task9>
				}
				//uart0_puts("\r\n");
			}
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
    1b8e:	88 23       	and	r24, r24
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <_Z18gorockthegamefieldv+0x6d6>
    1b92:	a1 c1       	rjmp	.+834    	; 0x1ed6 <_Z18gorockthegamefieldv+0xa18>
    1b94:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <robotState>
    1b98:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <robotState+0x1>
    1b9c:	07 97       	sbiw	r24, 0x07	; 7
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <_Z18gorockthegamefieldv+0x6e4>
    1ba0:	9a c1       	rjmp	.+820    	; 0x1ed6 <_Z18gorockthegamefieldv+0xa18>
    1ba2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
    1ba6:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1baa:	04 97       	sbiw	r24, 0x04	; 4
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <_Z18gorockthegamefieldv+0x6f2>
    1bae:	93 c1       	rjmp	.+806    	; 0x1ed6 <_Z18gorockthegamefieldv+0xa18>
    1bb0:	68 c1       	rjmp	.+720    	; 0x1e82 <_Z18gorockthegamefieldv+0x9c4>
    1bb2:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task4>

	if((where == inLZ1 || where == inLZ2) && robotState == notmoving){
		
		/*if the robot is in loading zone 1 after completing task3 and task4 
		but yet to complete task5*/ 
		if(task4 && !task5){
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	97 cc       	rjmp	.-1746   	; 0x14e8 <_Z18gorockthegamefieldv+0x2a>
    1bba:	b9 cc       	rjmp	.-1678   	; 0x152e <_Z18gorockthegamefieldv+0x70>
    1bbc:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1bbe:	f3 e0       	ldi	r31, 0x03	; 3
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a0 e0       	ldi	r26, 0x00	; 0
    1bc6:	b0 e4       	ldi	r27, 0x40	; 64
    1bc8:	85 8b       	std	Z+21, r24	; 0x15
    1bca:	96 8b       	std	Z+22, r25	; 0x16
    1bcc:	a7 8b       	std	Z+23, r26	; 0x17
    1bce:	b0 8f       	std	Z+24, r27	; 0x18
    1bd0:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    1bd2:	12 8e       	std	Z+26, r1	; 0x1a
    1bd4:	13 8e       	std	Z+27, r1	; 0x1b
    1bd6:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a8 ef       	ldi	r26, 0xF8	; 248
    1bde:	b1 e4       	ldi	r27, 0x41	; 65
    1be0:	85 8f       	std	Z+29, r24	; 0x1d
    1be2:	96 8f       	std	Z+30, r25	; 0x1e
    1be4:	a7 8f       	std	Z+31, r26	; 0x1f
    1be6:	b0 a3       	std	Z+32, r27	; 0x20
	}
	
	////move from start zone to corner of loading zone
	if(!task1 && where == inStart_point){	
		compass.setPid(2,0,31);
		movx(Throwingzone1.x,Front,SZ_LZ1_CORNER_MAX,SZ_LZ1_CORNER_MIN);
    1be8:	24 e1       	ldi	r18, 0x14	; 20
    1bea:	46 e9       	ldi	r20, 0x96	; 150
    1bec:	62 e0       	ldi	r22, 0x02	; 2
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	88 ef       	ldi	r24, 0xF8	; 248
    1bf2:	91 e1       	ldi	r25, 0x11	; 17
    1bf4:	9b d8       	rcall	.-3786   	; 0xd2c <_Z4movxiihh>
		robotState = moving;
    1bf6:	87 e0       	ldi	r24, 0x07	; 7
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1bfe:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
		//uart0_puts("going ahead \t");
		if(abs(encoderX.getdistance()) >= 4530){
    1c02:	8c eb       	ldi	r24, 0xBC	; 188
    1c04:	92 e0       	ldi	r25, 0x02	; 2
    1c06:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    1c0a:	89 d7       	rcall	.+3858   	; 0x2b1e <__fixsfsi>
    1c0c:	9b 01       	movw	r18, r22
    1c0e:	77 23       	and	r23, r23
    1c10:	24 f4       	brge	.+8      	; 0x1c1a <_Z18gorockthegamefieldv+0x75c>
    1c12:	22 27       	eor	r18, r18
    1c14:	33 27       	eor	r19, r19
    1c16:	26 1b       	sub	r18, r22
    1c18:	37 0b       	sbc	r19, r23
    1c1a:	22 3b       	cpi	r18, 0xB2	; 178
    1c1c:	31 41       	sbci	r19, 0x11	; 17
    1c1e:	0c f0       	brlt	.+2      	; 0x1c22 <_Z18gorockthegamefieldv+0x764>
    1c20:	b7 cc       	rjmp	.-1682   	; 0x1590 <_Z18gorockthegamefieldv+0xd2>
    1c22:	0b cd       	rjmp	.-1514   	; 0x163a <_Z18gorockthegamefieldv+0x17c>
    1c24:	87 e0       	ldi	r24, 0x07	; 7
	if(ShuttleCockGiven && ShuttleCockArmGone)
	{
		/*if manual robot is ahead of automatic robot and automatic robot
		has not completed task3*/
			if(GoThrowingZone1 && !task3 && where == inLZ1){
				robotState = moving;
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1c2c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1c30:	ec e1       	ldi	r30, 0x1C	; 28
	int Max_output;
	int Min_output;
	double kp, ki, kd;
	
	void setPid(float p, float i, float d){
		kp = p;
    1c32:	f3 e0       	ldi	r31, 0x03	; 3
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 e0       	ldi	r26, 0x00	; 0
    1c3a:	b0 e4       	ldi	r27, 0x40	; 64
    1c3c:	85 8b       	std	Z+21, r24	; 0x15
    1c3e:	96 8b       	std	Z+22, r25	; 0x16
    1c40:	a7 8b       	std	Z+23, r26	; 0x17
    1c42:	b0 8f       	std	Z+24, r27	; 0x18
    1c44:	11 8e       	std	Z+25, r1	; 0x19
		ki = i;
    1c46:	12 8e       	std	Z+26, r1	; 0x1a
    1c48:	13 8e       	std	Z+27, r1	; 0x1b
    1c4a:	14 8e       	std	Z+28, r1	; 0x1c
		kd = d;
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a8 ef       	ldi	r26, 0xF8	; 248
    1c52:	b1 e4       	ldi	r27, 0x41	; 65
    1c54:	85 8f       	std	Z+29, r24	; 0x1d
    1c56:	96 8f       	std	Z+30, r25	; 0x1e
    1c58:	a7 8f       	std	Z+31, r26	; 0x1f
				compass.setPid(2,0,31);
				movy(Throwingzone1.y,Front,LZ1_TZ1_MAX,LZ1_TZ1_MIN);
    1c5a:	b0 a3       	std	Z+32, r27	; 0x20
    1c5c:	24 e1       	ldi	r18, 0x14	; 20
    1c5e:	44 e6       	ldi	r20, 0x64	; 100
    1c60:	62 e0       	ldi	r22, 0x02	; 2
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	88 e5       	ldi	r24, 0x58	; 88
    1c66:	97 e0       	ldi	r25, 0x07	; 7
    1c68:	d2 d9       	rcall	.-3164   	; 0x100e <_Z4movyiihh>
				//uart0_puts("going tz1\t");
				if(abs(encoderY.getdistance()) >= 1600){
    1c6a:	84 eb       	ldi	r24, 0xB4	; 180
    1c6c:	92 e0       	ldi	r25, 0x02	; 2
    1c6e:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7encoder11getdistanceEv>
    1c72:	55 d7       	rcall	.+3754   	; 0x2b1e <__fixsfsi>
    1c74:	9b 01       	movw	r18, r22
    1c76:	77 23       	and	r23, r23
    1c78:	24 f4       	brge	.+8      	; 0x1c82 <_Z18gorockthegamefieldv+0x7c4>
    1c7a:	22 27       	eor	r18, r18
    1c7c:	33 27       	eor	r19, r19
    1c7e:	26 1b       	sub	r18, r22
    1c80:	37 0b       	sbc	r19, r23
    1c82:	20 34       	cpi	r18, 0x40	; 64
    1c84:	36 40       	sbci	r19, 0x06	; 6
    1c86:	0c f0       	brlt	.+2      	; 0x1c8a <_Z18gorockthegamefieldv+0x7cc>
    1c88:	f2 cc       	rjmp	.-1564   	; 0x166e <_Z18gorockthegamefieldv+0x1b0>
    1c8a:	0e cd       	rjmp	.-1508   	; 0x16a8 <_Z18gorockthegamefieldv+0x1ea>
					//uart0_puts("INT ON");
				}
				//uart0_puts("\r\n");
			}
			/* if task3 is completed and robot just reached throwingzone 1 then*/
			else if(task3 && !task4 && where == inLZ1 && robotState == moving){
    1c8c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <task3>
    1c90:	88 23       	and	r24, r24
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <_Z18gorockthegamefieldv+0x7d8>
    1c94:	09 cd       	rjmp	.-1518   	; 0x16a8 <_Z18gorockthegamefieldv+0x1ea>
    1c96:	f7 cc       	rjmp	.-1554   	; 0x1686 <_Z18gorockthegamefieldv+0x1c8>
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT16);
    1c98:	ed e6       	ldi	r30, 0x6D	; 109
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8e 7f       	andi	r24, 0xFE	; 254
    1ca0:	80 83       	st	Z, r24
				linetrackerYjunctionWatchOff();
				uart0_puts("reached throwing zone 1\r\n");
    1ca2:	80 e4       	ldi	r24, 0x40	; 64
    1ca4:	92 e0       	ldi	r25, 0x02	; 2
    1ca6:	6c d4       	rcall	.+2264   	; 0x2580 <_Z10uart0_putsPKc>
    1ca8:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
				BrakeMotor();
    1cac:	82 e0       	ldi	r24, 0x02	; 2
				//uart3_putc('1');
				where = inTZ1;
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1cb4:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
    1cb8:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1cbc:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1cc0:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    1cc4:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    1cc8:	88 e0       	ldi	r24, 0x08	; 8
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1cd0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				
			}
			/* if in throwing zone 1 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ1 && robotState == notmoving){
				uart0_puts("Throwing \r\n");
    1cd4:	e9 cc       	rjmp	.-1582   	; 0x16a8 <_Z18gorockthegamefieldv+0x1ea>
    1cd6:	8a e5       	ldi	r24, 0x5A	; 90
    1cd8:	92 e0       	ldi	r25, 0x02	; 2
				holdposition();
    1cda:	52 d4       	rcall	.+2212   	; 0x2580 <_Z10uart0_putsPKc>
    1cdc:	36 db       	rcall	.-2452   	; 0x134a <_Z12holdpositionv>

				if(Stable_Robot() && _b_Transmit_once)
    1cde:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z12Stable_Robotv>
    1ce2:	81 11       	cpse	r24, r1
    1ce4:	ee cc       	rjmp	.-1572   	; 0x16c2 <_Z18gorockthegamefieldv+0x204>
    1ce6:	f1 cc       	rjmp	.-1566   	; 0x16ca <_Z18gorockthegamefieldv+0x20c>
				{	
					uart3_putc('1');
    1ce8:	81 e3       	ldi	r24, 0x31	; 49
    1cea:	d1 d5       	rcall	.+2978   	; 0x288e <_Z10uart3_putch>
    1cec:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <_b_Transmit_once>
					_b_Transmit_once = false;
    1cf0:	ec cc       	rjmp	.-1576   	; 0x16ca <_Z18gorockthegamefieldv+0x20c>
    1cf2:	ed e6       	ldi	r30, 0x6D	; 109
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	8e 7f       	andi	r24, 0xFE	; 254
    1cfa:	80 83       	st	Z, r24
    1cfc:	85 e0       	ldi	r24, 0x05	; 5
			/*if after returning from throwing zone1, junction on line is detected i.e loading zone1 
			then stop and wait for communication*/
			else if(task4 && robotState == moving && where == inTZ1){
				//uart0_puts("REached loading zone 1\r\n");
				linetrackerYjunctionWatchOff();
				where = inLZ1;
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1d04:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
    1d08:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
				BrakeMotor();
    1d0c:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1d10:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1d14:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    1d18:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    1d1c:	88 e0       	ldi	r24, 0x08	; 8
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1d24:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1d28:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <ShuttleCockGiven>
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    1d2c:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    1d30:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <backtoLZ1>
				backtoLZ1 = false;
    1d34:	8f cd       	rjmp	.-1250   	; 0x1854 <_Z18gorockthegamefieldv+0x396>
    1d36:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <gotoLZ2>
			}
			/*if there is no manual robot ahead of automatic robot go to loading zone 2*/
			else if(gotoLZ2 && !task5){
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	37 cd       	rjmp	.-1426   	; 0x17ac <_Z18gorockthegamefieldv+0x2ee>
    1d3e:	79 cd       	rjmp	.-1294   	; 0x1832 <_Z18gorockthegamefieldv+0x374>
    1d40:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <gotoLZ2>
		
			}
			/*if X junction near loading zone 2 is detected and robot was previously on loading zone 1*/
			else if(task5 && robotState == moving && where == inLZ1){
				//uart0_puts("reached loading zone 2\r\n");
				gotoLZ2 = false;
    1d44:	eb e6       	ldi	r30, 0x6B	; 107
	sei();
	PCICR |= (1<<PCIE2);
	PCMSK2 |= (1<<PCINT16);
}
inline void linetrackerXjunctionWatchOff(void){
	PCMSK0 &= ~(1<<PCINT4);
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8f 7e       	andi	r24, 0xEF	; 239
    1d4c:	80 83       	st	Z, r24
    1d4e:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
				linetrackerXjunctionWatchOff();
				BrakeMotor();
    1d52:	86 e0       	ldi	r24, 0x06	; 6
				where = inLZ2;
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1d5a:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
				robotState = notmoving;
    1d5e:	88 e0       	ldi	r24, 0x08	; 8
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1d66:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1d6a:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1d6e:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1d72:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    1d76:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
				encoderX.resetCount();
				encoderY.resetCount();
				//this statement below determines automatic robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    1d7a:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <ShuttleCockGiven>
				ShuttleCockArmGone = false;
    1d7e:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <ShuttleCockArmGone>
    1d82:	68 cd       	rjmp	.-1328   	; 0x1854 <_Z18gorockthegamefieldv+0x396>
				//uart0_puts("\r\n");

			}
			/*if robot just reached throwingzone 2 */
			else if(task6 && !task7 && where == inLZ2 && robotState == moving){
				uart0_puts("Reached tz2 \r\n");
    1d84:	86 e6       	ldi	r24, 0x66	; 102
    1d86:	92 e0       	ldi	r25, 0x02	; 2
    1d88:	fb d3       	rcall	.+2038   	; 0x2580 <_Z10uart0_putsPKc>
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
				where = inTZ2;
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1d92:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
}
inline void linetrackerYjunctionWatchOff(void){
	PCMSK2 &= ~(1<<PCINT16);
    1d96:	ed e6       	ldi	r30, 0x6D	; 109
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8e 7f       	andi	r24, 0xFE	; 254
    1d9e:	80 83       	st	Z, r24
    1da0:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1da4:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1da8:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
				linetrackerYjunctionWatchOff();
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    1dac:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    1db0:	88 e0       	ldi	r24, 0x08	; 8
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				BrakeMotor();
    1db8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				
			}
			/* if in throwing zone 2 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			if(where == inTZ2 && robotState == notmoving){
				uart0_puts("throwing \r\n");
    1dbc:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1dc0:	a6 cd       	rjmp	.-1204   	; 0x190e <_Z18gorockthegamefieldv+0x450>
    1dc2:	85 e7       	ldi	r24, 0x75	; 117
				holdposition();
    1dc4:	92 e0       	ldi	r25, 0x02	; 2
    1dc6:	dc d3       	rcall	.+1976   	; 0x2580 <_Z10uart0_putsPKc>

				if(Stable_Robot() && _b_Transmit_once)
    1dc8:	c0 da       	rcall	.-2688   	; 0x134a <_Z12holdpositionv>
    1dca:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z12Stable_Robotv>
    1dce:	81 11       	cpse	r24, r1
    1dd0:	ab cd       	rjmp	.-1194   	; 0x1928 <_Z18gorockthegamefieldv+0x46a>
				{	
					uart3_putc('2');
    1dd2:	ae cd       	rjmp	.-1188   	; 0x1930 <_Z18gorockthegamefieldv+0x472>
    1dd4:	82 e3       	ldi	r24, 0x32	; 50
    1dd6:	5b d5       	rcall	.+2742   	; 0x288e <_Z10uart3_putch>
					_b_Transmit_once = false;
    1dd8:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <_b_Transmit_once>
    1ddc:	a9 cd       	rjmp	.-1198   	; 0x1930 <_Z18gorockthegamefieldv+0x472>
				
			}
			/*if after returning from throwing zone2 junction on line is detected then stop and wait for
			communication*/
			else if(task7 && robotState == moving && where == inTZ2 ){
				holdposition();
    1dde:	b5 da       	rcall	.-2710   	; 0x134a <_Z12holdpositionv>
    1de0:	ed e6       	ldi	r30, 0x6D	; 109
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8e 7f       	andi	r24, 0xFE	; 254
    1de8:	80 83       	st	Z, r24
    1dea:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
				//uart0_puts("reached loading zone 2 \r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    1dee:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1df2:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1df6:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    1dfa:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    1dfe:	86 e0       	ldi	r24, 0x06	; 6
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1e06:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
				robotState = notmoving;
    1e0a:	88 e0       	ldi	r24, 0x08	; 8
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1e12:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    1e16:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <ShuttleCockGiven>
				ShuttleCockArmGone = false;
    1e1a:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <ShuttleCockArmGone>
				backtoLZ2 = false;
    1e1e:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <backtoLZ2>
    1e22:	f2 cd       	rjmp	.-1052   	; 0x1a08 <_Z18gorockthegamefieldv+0x54a>
				}
				//uart0_puts("\r\n");
			}
			/*if throwing zone 3 has just reached */
			else if(task8 && where == inLZ2 && robotState == moving){
				uart0_puts("reached tz3\r\n");
    1e24:	81 e8       	ldi	r24, 0x81	; 129
    1e26:	92 e0       	ldi	r25, 0x02	; 2
    1e28:	ab d3       	rcall	.+1878   	; 0x2580 <_Z10uart0_putsPKc>
    1e2a:	ed e6       	ldi	r30, 0x6D	; 109
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	8e 7f       	andi	r24, 0xFE	; 254
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    1e32:	80 83       	st	Z, r24
    1e34:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1e38:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1e3c:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1e40:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
				encoderX.resetCount();
				encoderY.resetCount();
				robotState = notmoving;
    1e44:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    1e48:	88 e0       	ldi	r24, 0x08	; 8
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
				GoThrowingZone3 = false;
    1e50:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
				where = inTZ3;
    1e54:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <GoThrowingZone3>
    1e58:	84 e0       	ldi	r24, 0x04	; 4
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1e60:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
				uart0_puts("holding \r\n");
    1e64:	45 ce       	rjmp	.-886    	; 0x1af0 <_Z18gorockthegamefieldv+0x632>
    1e66:	8f e8       	ldi	r24, 0x8F	; 143
    1e68:	92 e0       	ldi	r25, 0x02	; 2
				holdposition();	
    1e6a:	8a d3       	rcall	.+1812   	; 0x2580 <_Z10uart0_putsPKc>
    1e6c:	6e da       	rcall	.-2852   	; 0x134a <_Z12holdpositionv>

				if(Stable_Robot() && _b_Transmit_once)
    1e6e:	0e 94 1f 04 	call	0x83e	; 0x83e <_Z12Stable_Robotv>
    1e72:	81 11       	cpse	r24, r1
    1e74:	2b ce       	rjmp	.-938    	; 0x1acc <_Z18gorockthegamefieldv+0x60e>
    1e76:	2e ce       	rjmp	.-932    	; 0x1ad4 <_Z18gorockthegamefieldv+0x616>
				{	
					uart3_putc('3');
    1e78:	83 e3       	ldi	r24, 0x33	; 51
    1e7a:	09 d5       	rcall	.+2578   	; 0x288e <_Z10uart3_putch>
    1e7c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <_b_Transmit_once>
					_b_Transmit_once = false;
    1e80:	29 ce       	rjmp	.-942    	; 0x1ad4 <_Z18gorockthegamefieldv+0x616>
    1e82:	ed e6       	ldi	r30, 0x6D	; 109
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	8e 7f       	andi	r24, 0xFE	; 254
    1e8a:	80 83       	st	Z, r24
    1e8c:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
			/*if after returning from throwing zone3 junction on line is detected then stop and wait for
			communication*/
			else if(task9 && robotState == moving && where == inTZ3 ){
				//uart0_puts("reached loading zone 2\r\n");
				linetrackerYjunctionWatchOff();
				BrakeMotor();
    1e90:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    1e94:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
    1e98:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    1e9c:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
    1ea0:	86 e0       	ldi	r24, 0x06	; 6
				encoderX.resetCount();
				encoderY.resetCount();
				where = inLZ2;
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <where+0x1>
    1ea8:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <where>
    1eac:	88 e0       	ldi	r24, 0x08	; 8
				robotState = notmoving;
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <robotState+0x1>
    1eb4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <robotState>
    1eb8:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <ShuttleCockGiven>
				//this statement below determines robot is not moving and waiting for shuttlecock loading;
				ShuttleCockGiven = false;
    1ebc:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <ShuttleCockArmGone>
				ShuttleCockArmGone = false;
    1ec0:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <backtoLZ2>
				backtoLZ2 = false;
    1ec4:	08 95       	ret
    1ec6:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <where>
				//give command to throwing mechanism to throw.
				//uart3_putc('3');
			}
			/* if in throwing zone 3 and robot is notmoving then hold this position and wait till throwing
			   mechanism acknowledges throwing*/
			else if(task8 && where == inTZ3 && robotState == notmoving){
    1eca:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <where+0x1>
    1ece:	04 97       	sbiw	r24, 0x04	; 4
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <_Z18gorockthegamefieldv+0xa16>
    1ed2:	0e ce       	rjmp	.-996    	; 0x1af0 <_Z18gorockthegamefieldv+0x632>
    1ed4:	f4 cd       	rjmp	.-1048   	; 0x1abe <_Z18gorockthegamefieldv+0x600>
    1ed6:	08 95       	ret

00001ed8 <__vector_9>:
    1ed8:	1f 92       	push	r1
}


/*When Junction on Linetracker X is deteced*/
ISR(PCINT0_vect)		
{
    1eda:	0f 92       	push	r0
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	0f 92       	push	r0
    1ee0:	11 24       	eor	r1, r1
    1ee2:	0b b6       	in	r0, 0x3b	; 59
    1ee4:	0f 92       	push	r0
    1ee6:	2f 93       	push	r18
    1ee8:	3f 93       	push	r19
    1eea:	4f 93       	push	r20
    1eec:	5f 93       	push	r21
    1eee:	6f 93       	push	r22
    1ef0:	7f 93       	push	r23
    1ef2:	8f 93       	push	r24
    1ef4:	9f 93       	push	r25
    1ef6:	af 93       	push	r26
    1ef8:	bf 93       	push	r27
    1efa:	ef 93       	push	r30
    1efc:	ff 93       	push	r31
	if(!task1){
    1efe:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <task1>
    1f02:	81 11       	cpse	r24, r1
    1f04:	06 c0       	rjmp	.+12     	; 0x1f12 <__vector_9+0x3a>
		task1 = true;			//reached to corner of loading zone1
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <task1>
		FlagChangeSetpointCompass = true;
    1f0c:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <FlagChangeSetpointCompass>
    1f10:	0b c0       	rjmp	.+22     	; 0x1f28 <__vector_9+0x50>
	}
	else if(!task5){
    1f12:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <task5>
    1f16:	81 11       	cpse	r24, r1
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <__vector_9+0x50>
		task5 = true;			//reached loading zone 2 from loading zone 1
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <task5>
		FlagChangeSetpointCompass = true;
    1f20:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <FlagChangeSetpointCompass>
		BrakeMotor();
    1f24:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
	}
}
    1f28:	ff 91       	pop	r31
    1f2a:	ef 91       	pop	r30
    1f2c:	bf 91       	pop	r27
    1f2e:	af 91       	pop	r26
    1f30:	9f 91       	pop	r25
    1f32:	8f 91       	pop	r24
    1f34:	7f 91       	pop	r23
    1f36:	6f 91       	pop	r22
    1f38:	5f 91       	pop	r21
    1f3a:	4f 91       	pop	r20
    1f3c:	3f 91       	pop	r19
    1f3e:	2f 91       	pop	r18
    1f40:	0f 90       	pop	r0
    1f42:	0b be       	out	0x3b, r0	; 59
    1f44:	0f 90       	pop	r0
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	0f 90       	pop	r0
    1f4a:	1f 90       	pop	r1
    1f4c:	18 95       	reti

00001f4e <__vector_11>:


/*When Junction on Linetracker Y is detected*/
ISR(PCINT2_vect)
{
    1f4e:	1f 92       	push	r1
    1f50:	0f 92       	push	r0
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	0f 92       	push	r0
    1f56:	11 24       	eor	r1, r1
    1f58:	0b b6       	in	r0, 0x3b	; 59
    1f5a:	0f 92       	push	r0
    1f5c:	2f 93       	push	r18
    1f5e:	3f 93       	push	r19
    1f60:	4f 93       	push	r20
    1f62:	5f 93       	push	r21
    1f64:	6f 93       	push	r22
    1f66:	7f 93       	push	r23
    1f68:	8f 93       	push	r24
    1f6a:	9f 93       	push	r25
    1f6c:	af 93       	push	r26
    1f6e:	bf 93       	push	r27
    1f70:	ef 93       	push	r30
    1f72:	ff 93       	push	r31
	if(!task2){
    1f74:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <task2>
    1f78:	81 11       	cpse	r24, r1
    1f7a:	06 c0       	rjmp	.+12     	; 0x1f88 <__vector_11+0x3a>
		BrakeMotor();
    1f7c:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
		task2 = true;		//reached to loading zone 1
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <task2>
    1f86:	41 c0       	rjmp	.+130    	; 0x200a <__vector_11+0xbc>
	}
	else if(!task3){
    1f88:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <task3>
    1f8c:	81 11       	cpse	r24, r1
    1f8e:	08 c0       	rjmp	.+16     	; 0x1fa0 <__vector_11+0x52>
		task3 = true;		//reached throwing zone 1
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <task3>
		_b_Transmit_once = true;
    1f96:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_b_Transmit_once>
		BrakeMotor();
    1f9a:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1f9e:	35 c0       	rjmp	.+106    	; 0x200a <__vector_11+0xbc>
	}
		
	else if(!task4){
    1fa0:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <task4>
    1fa4:	81 11       	cpse	r24, r1
    1fa6:	06 c0       	rjmp	.+12     	; 0x1fb4 <__vector_11+0x66>
		task4 = true;		//reached loading zone 1 from throwing zone 1
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <task4>
		 BrakeMotor();
    1fae:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1fb2:	2b c0       	rjmp	.+86     	; 0x200a <__vector_11+0xbc>
	}
	else if(!task6){
    1fb4:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <task6>
    1fb8:	81 11       	cpse	r24, r1
    1fba:	08 c0       	rjmp	.+16     	; 0x1fcc <__vector_11+0x7e>
		task6 = true;		//reached throwing zone 2
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <task6>
		_b_Transmit_once = true;
    1fc2:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_b_Transmit_once>
		BrakeMotor();
    1fc6:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1fca:	1f c0       	rjmp	.+62     	; 0x200a <__vector_11+0xbc>
	}
		
	else if(!task7){
    1fcc:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <task7>
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	06 c0       	rjmp	.+12     	; 0x1fe0 <__vector_11+0x92>
		task7 = true;		//reached loading zone 2 from throwing zone 2
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <task7>
		BrakeMotor();
    1fda:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1fde:	15 c0       	rjmp	.+42     	; 0x200a <__vector_11+0xbc>
	}
	else if(!task8){
    1fe0:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <task8>
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	08 c0       	rjmp	.+16     	; 0x1ff8 <__vector_11+0xaa>
		task8 = true;		//reached throwing zone 3
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <task8>
		_b_Transmit_once = true;
    1fee:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_b_Transmit_once>
		BrakeMotor();
    1ff2:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <__vector_11+0xbc>
	}
	else if(!task9){
    1ff8:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <task9>
    1ffc:	81 11       	cpse	r24, r1
    1ffe:	05 c0       	rjmp	.+10     	; 0x200a <__vector_11+0xbc>
		task9 = true;		//reached loading zone 2 from throwing zone 3
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <task9>
		BrakeMotor();
    2006:	0e 94 02 02 	call	0x404	; 0x404 <_Z10BrakeMotorv>
	}
}
    200a:	ff 91       	pop	r31
    200c:	ef 91       	pop	r30
    200e:	bf 91       	pop	r27
    2010:	af 91       	pop	r26
    2012:	9f 91       	pop	r25
    2014:	8f 91       	pop	r24
    2016:	7f 91       	pop	r23
    2018:	6f 91       	pop	r22
    201a:	5f 91       	pop	r21
    201c:	4f 91       	pop	r20
    201e:	3f 91       	pop	r19
    2020:	2f 91       	pop	r18
    2022:	0f 90       	pop	r0
    2024:	0b be       	out	0x3b, r0	; 59
    2026:	0f 90       	pop	r0
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	0f 90       	pop	r0
    202c:	1f 90       	pop	r1
    202e:	18 95       	reti

00002030 <_Z16checkJunctionOfYv>:
uint16_t angle_Average = 0;


void checkJunctionOfY(){
	
	if(bit_is_set(PINK,PK0)){
    2030:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    2034:	80 ff       	sbrs	r24, 0
    2036:	04 c0       	rjmp	.+8      	; 0x2040 <_Z16checkJunctionOfYv+0x10>
		junctionY = true;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <junctionY>
    203e:	08 95       	ret
	}
	else{
		junctionY = false;
    2040:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <junctionY>
    2044:	08 95       	ret

00002046 <_Z16checkJunctionOfXv>:
	}
	
}

void checkJunctionOfX(){
	if(bit_is_set(PINB,PB4)){
    2046:	1c 9b       	sbis	0x03, 4	; 3
    2048:	04 c0       	rjmp	.+8      	; 0x2052 <_Z16checkJunctionOfXv+0xc>
		junctionX = true;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <junctionX>
    2050:	08 95       	ret
	}
	else{
		junctionX = false;
    2052:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <junctionX>
    2056:	08 95       	ret

00002058 <_Z21changeCompassSetpointv>:
	}
}

void changeCompassSetpoint(){
	if(FlagChangeSetpointCompass)
    2058:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <FlagChangeSetpointCompass>
    205c:	88 23       	and	r24, r24
    205e:	09 f4       	brne	.+2      	; 0x2062 <_Z21changeCompassSetpointv+0xa>
    2060:	53 c0       	rjmp	.+166    	; 0x2108 <_Z21changeCompassSetpointv+0xb0>
	{
		if(junctionX && lineTrackerData == 45 && !junctionY){
    2062:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <junctionX>
    2066:	88 23       	and	r24, r24
    2068:	09 f4       	brne	.+2      	; 0x206c <_Z21changeCompassSetpointv+0x14>
    206a:	5a c0       	rjmp	.+180    	; 0x2120 <_Z21changeCompassSetpointv+0xc8>
    206c:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <lineTrackerData>
    2070:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <lineTrackerData+0x1>
    2074:	8d 97       	sbiw	r24, 0x2d	; 45
    2076:	09 f0       	breq	.+2      	; 0x207a <_Z21changeCompassSetpointv+0x22>
    2078:	53 c0       	rjmp	.+166    	; 0x2120 <_Z21changeCompassSetpointv+0xc8>
    207a:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <junctionY>
    207e:	81 11       	cpse	r24, r1
    2080:	4f c0       	rjmp	.+158    	; 0x2120 <_Z21changeCompassSetpointv+0xc8>
			if(FirstData){
    2082:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <FirstData>
    2086:	88 23       	and	r24, r24
    2088:	79 f0       	breq	.+30     	; 0x20a8 <_Z21changeCompassSetpointv+0x50>
				angle_Min = compass_Angle;
    208a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <compass_Angle>
    208e:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <compass_Angle+0x1>
    2092:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <angle_Min+0x1>
    2096:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <angle_Min>
				angle_Max = compass_Angle;
    209a:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <angle_Max+0x1>
    209e:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <angle_Max>
				FirstData = false;
    20a2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <FirstData>
    20a6:	1b c0       	rjmp	.+54     	; 0x20de <_Z21changeCompassSetpointv+0x86>
			}
			if(compass_Angle > angle_Max)
    20a8:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <compass_Angle>
    20ac:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <compass_Angle+0x1>
    20b0:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <angle_Max>
    20b4:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <angle_Max+0x1>
    20b8:	28 17       	cp	r18, r24
    20ba:	39 07       	cpc	r19, r25
    20bc:	28 f4       	brcc	.+10     	; 0x20c8 <_Z21changeCompassSetpointv+0x70>
				angle_Max = compass_Angle;
    20be:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <angle_Max+0x1>
    20c2:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <angle_Max>
    20c6:	0b c0       	rjmp	.+22     	; 0x20de <_Z21changeCompassSetpointv+0x86>
			else if(angle_Min > compass_Angle)
    20c8:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <angle_Min>
    20cc:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <angle_Min+0x1>
    20d0:	82 17       	cp	r24, r18
    20d2:	93 07       	cpc	r25, r19
    20d4:	20 f4       	brcc	.+8      	; 0x20de <_Z21changeCompassSetpointv+0x86>
				angle_Min = compass_Angle;
    20d6:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <angle_Min+0x1>
    20da:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <angle_Min>
			
			angle_Average = (angle_Max + angle_Min)/2;
    20de:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <angle_Max>
    20e2:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <angle_Max+0x1>
    20e6:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <angle_Min>
    20ea:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <angle_Min+0x1>
    20ee:	82 0f       	add	r24, r18
    20f0:	93 1f       	adc	r25, r19
    20f2:	96 95       	lsr	r25
    20f4:	87 95       	ror	r24
    20f6:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <__data_end+0x1>
    20fa:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <__data_end>
			
			compass.SETPOINT = angle_Average;
    20fe:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <compass+0xf>
    2102:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <compass+0xe>
    2106:	08 95       	ret
			
		}
 	}
	else if(FlagInitialAngleSetpoint){
    2108:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <FlagInitialAngleSetpoint>
    210c:	88 23       	and	r24, r24
    210e:	41 f0       	breq	.+16     	; 0x2120 <_Z21changeCompassSetpointv+0xc8>
		 compass.SETPOINT = initialCompassAngle;
    2110:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <initialCompassAngle>
    2114:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <initialCompassAngle+0x1>
    2118:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <compass+0xf>
    211c:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <compass+0xe>
    2120:	08 95       	ret

00002122 <_Z24reactConditionOfLineLeftv>:
}

void reactConditionOfLineLeft(){
	//////////Find the condition when line is left////////
	
	if(movingyback || movingyfront){
    2122:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <movingyback>
    2126:	81 11       	cpse	r24, r1
    2128:	05 c0       	rjmp	.+10     	; 0x2134 <_Z24reactConditionOfLineLeftv+0x12>
    212a:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <movingyfront>
    212e:	99 23       	and	r25, r25
    2130:	09 f4       	brne	.+2      	; 0x2134 <_Z24reactConditionOfLineLeftv+0x12>
    2132:	c3 c0       	rjmp	.+390    	; 0x22ba <__stack+0xbb>
		if(lineTrackerData == 0 && previousLinetrackerData == 10 && !junctionY)
    2134:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <lineTrackerData>
    2138:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <lineTrackerData+0x1>
    213c:	21 15       	cp	r18, r1
    213e:	31 05       	cpc	r19, r1
    2140:	19 f5       	brne	.+70     	; 0x2188 <_Z24reactConditionOfLineLeftv+0x66>
    2142:	40 91 7f 03 	lds	r20, 0x037F	; 0x80037f <previousLinetrackerData>
    2146:	50 91 80 03 	lds	r21, 0x0380	; 0x800380 <previousLinetrackerData+0x1>
    214a:	4a 30       	cpi	r20, 0x0A	; 10
    214c:	51 05       	cpc	r21, r1
    214e:	61 f4       	brne	.+24     	; 0x2168 <_Z24reactConditionOfLineLeftv+0x46>
    2150:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <junctionY>
    2154:	91 11       	cpse	r25, r1
    2156:	28 c0       	rjmp	.+80     	; 0x21a8 <_Z24reactConditionOfLineLeftv+0x86>
		{
			ltY.leftedgeleft = true;
    2158:	ed e3       	ldi	r30, 0x3D	; 61
    215a:	f3 e0       	ldi	r31, 0x03	; 3
    215c:	91 e0       	ldi	r25, 0x01	; 1
    215e:	90 87       	std	Z+8, r25	; 0x08
			ltY.rightedgeleft = false;
    2160:	11 86       	std	Z+9, r1	; 0x09
			lineMeet = false;
    2162:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <lineMeet>
    2166:	90 c0       	rjmp	.+288    	; 0x2288 <__stack+0x89>
		}
		else if(lineTrackerData == 0 && previousLinetrackerData == 80 && !junctionY)
    2168:	40 35       	cpi	r20, 0x50	; 80
    216a:	51 05       	cpc	r21, r1
    216c:	09 f0       	breq	.+2      	; 0x2170 <_Z24reactConditionOfLineLeftv+0x4e>
    216e:	96 c0       	rjmp	.+300    	; 0x229c <__stack+0x9d>
    2170:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <junctionY>
    2174:	91 11       	cpse	r25, r1
    2176:	92 c0       	rjmp	.+292    	; 0x229c <__stack+0x9d>
		{
			ltY.rightedgeleft = true;
    2178:	ed e3       	ldi	r30, 0x3D	; 61
    217a:	f3 e0       	ldi	r31, 0x03	; 3
    217c:	91 e0       	ldi	r25, 0x01	; 1
    217e:	91 87       	std	Z+9, r25	; 0x09
			ltY.leftedgeleft = false;
    2180:	10 86       	std	Z+8, r1	; 0x08
			lineMeet = false;
    2182:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <lineMeet>
    2186:	7b c0       	rjmp	.+246    	; 0x227e <__stack+0x7f>
		}
		/////////////////////////////////////////////////////
		
		////If line left by linetracker find when line is meet
		if(ltY.rightedgeleft && lineTrackerData == 80){
    2188:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <ltY+0x9>
    218c:	99 23       	and	r25, r25
    218e:	61 f0       	breq	.+24     	; 0x21a8 <_Z24reactConditionOfLineLeftv+0x86>
    2190:	20 35       	cpi	r18, 0x50	; 80
    2192:	31 05       	cpc	r19, r1
    2194:	09 f0       	breq	.+2      	; 0x2198 <_Z24reactConditionOfLineLeftv+0x76>
    2196:	87 c0       	rjmp	.+270    	; 0x22a6 <__stack+0xa7>
			lineMeet = true;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <lineMeet>
			ltY.rightedgeleft = false;
    219e:	ed e3       	ldi	r30, 0x3D	; 61
    21a0:	f3 e0       	ldi	r31, 0x03	; 3
    21a2:	11 86       	std	Z+9, r1	; 0x09
			ltY.leftedgeleft = false;
    21a4:	10 86       	std	Z+8, r1	; 0x08
    21a6:	08 95       	ret
		}
		else if(ltY.leftedgeleft && lineTrackerData == 10){
    21a8:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ltY+0x8>
    21ac:	99 23       	and	r25, r25
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <_Z24reactConditionOfLineLeftv+0x90>
    21b0:	66 c0       	rjmp	.+204    	; 0x227e <__stack+0x7f>
    21b2:	2a 30       	cpi	r18, 0x0A	; 10
    21b4:	31 05       	cpc	r19, r1
    21b6:	09 f0       	breq	.+2      	; 0x21ba <_Z24reactConditionOfLineLeftv+0x98>
    21b8:	67 c0       	rjmp	.+206    	; 0x2288 <__stack+0x89>
			lineMeet = true;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <lineMeet>
			ltY.leftedgeleft = false;
    21c0:	ed e3       	ldi	r30, 0x3D	; 61
    21c2:	f3 e0       	ldi	r31, 0x03	; 3
    21c4:	10 86       	std	Z+8, r1	; 0x08
			ltY.rightedgeleft = false;
    21c6:	11 86       	std	Z+9, r1	; 0x09
    21c8:	08 95       	ret
		}
		///////////////////////////////////////////////////////
		
		////////// if edge is left and junction is detected //////
		if((ltY.leftedgeleft || ltY.rightedgeleft) && junctionY){
			if(movingyfront){
    21ca:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <movingyfront>
    21ce:	99 23       	and	r25, r25
    21d0:	59 f0       	breq	.+22     	; 0x21e8 <_Z24reactConditionOfLineLeftv+0xc6>
				velocity_robot[0] = 0;		//x
    21d2:	e7 ea       	ldi	r30, 0xA7	; 167
    21d4:	f3 e0       	ldi	r31, 0x03	; 3
    21d6:	11 82       	std	Z+1, r1	; 0x01
    21d8:	10 82       	st	Z, r1
				velocity_robot[1] = 40;		//y
    21da:	88 e2       	ldi	r24, 0x28	; 40
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	93 83       	std	Z+3, r25	; 0x03
    21e0:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    21e2:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
    21e6:	08 95       	ret
			}
			else if(movingyback){
    21e8:	88 23       	and	r24, r24
    21ea:	09 f4       	brne	.+2      	; 0x21ee <_Z24reactConditionOfLineLeftv+0xcc>
    21ec:	66 c0       	rjmp	.+204    	; 0x22ba <__stack+0xbb>
				velocity_robot[0] = 0;
    21ee:	e7 ea       	ldi	r30, 0xA7	; 167
    21f0:	f3 e0       	ldi	r31, 0x03	; 3
    21f2:	11 82       	std	Z+1, r1	; 0x01
    21f4:	10 82       	st	Z, r1
				velocity_robot[1] = -40;
    21f6:	88 ed       	ldi	r24, 0xD8	; 216
    21f8:	9f ef       	ldi	r25, 0xFF	; 255
    21fa:	93 83       	std	Z+3, r25	; 0x03
    21fc:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    21fe:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
    2202:	08 95       	ret
			}
		}
		/////////////////////////////////////////////////////////
		else if(ltY.leftedgeleft){
			if(movingyfront){
    2204:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <movingyfront>
    2208:	99 23       	and	r25, r25
    220a:	69 f0       	breq	.+26     	; 0x2226 <__stack+0x27>
				velocity_robot[0] = -40;
    220c:	e7 ea       	ldi	r30, 0xA7	; 167
    220e:	f3 e0       	ldi	r31, 0x03	; 3
    2210:	88 ed       	ldi	r24, 0xD8	; 216
    2212:	9f ef       	ldi	r25, 0xFF	; 255
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	80 83       	st	Z, r24
				velocity_robot[1] = 10;
    2218:	8a e0       	ldi	r24, 0x0A	; 10
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	93 83       	std	Z+3, r25	; 0x03
    221e:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    2220:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
    2224:	08 95       	ret
			}
			else if(movingyback){
    2226:	88 23       	and	r24, r24
    2228:	09 f4       	brne	.+2      	; 0x222c <__stack+0x2d>
    222a:	47 c0       	rjmp	.+142    	; 0x22ba <__stack+0xbb>
				velocity_robot[0] = -40;
    222c:	e7 ea       	ldi	r30, 0xA7	; 167
    222e:	f3 e0       	ldi	r31, 0x03	; 3
    2230:	88 ed       	ldi	r24, 0xD8	; 216
    2232:	9f ef       	ldi	r25, 0xFF	; 255
    2234:	91 83       	std	Z+1, r25	; 0x01
    2236:	80 83       	st	Z, r24
				velocity_robot[1] = -10;
    2238:	86 ef       	ldi	r24, 0xF6	; 246
    223a:	9f ef       	ldi	r25, 0xFF	; 255
    223c:	93 83       	std	Z+3, r25	; 0x03
    223e:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    2240:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
    2244:	08 95       	ret
			}
		}
		else if(ltY.rightedgeleft ){
			if(movingyfront){
				velocity_robot[0] = 40;
    2246:	e7 ea       	ldi	r30, 0xA7	; 167
    2248:	f3 e0       	ldi	r31, 0x03	; 3
    224a:	88 e2       	ldi	r24, 0x28	; 40
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	91 83       	std	Z+1, r25	; 0x01
    2250:	80 83       	st	Z, r24
				velocity_robot[1] = 10;
    2252:	8a e0       	ldi	r24, 0x0A	; 10
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	93 83       	std	Z+3, r25	; 0x03
    2258:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    225a:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
    225e:	08 95       	ret
			}
			else if(movingyback){
    2260:	88 23       	and	r24, r24
    2262:	59 f1       	breq	.+86     	; 0x22ba <__stack+0xbb>
				velocity_robot[0] = 40;
    2264:	e7 ea       	ldi	r30, 0xA7	; 167
    2266:	f3 e0       	ldi	r31, 0x03	; 3
    2268:	88 e2       	ldi	r24, 0x28	; 40
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
				velocity_robot[1] = -10;
    2270:	86 ef       	ldi	r24, 0xF6	; 246
    2272:	9f ef       	ldi	r25, 0xFF	; 255
    2274:	93 83       	std	Z+3, r25	; 0x03
    2276:	82 83       	std	Z+2, r24	; 0x02
				calculateCompassPID();
    2278:	0c 94 c9 02 	jmp	0x592	; 0x592 <_Z19calculateCompassPIDv>
			}
		}
	}
}
    227c:	08 95       	ret
			ltY.rightedgeleft = false;
		}
		///////////////////////////////////////////////////////
		
		////////// if edge is left and junction is detected //////
		if((ltY.leftedgeleft || ltY.rightedgeleft) && junctionY){
    227e:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <ltY+0x9>
    2282:	91 11       	cpse	r25, r1
    2284:	06 c0       	rjmp	.+12     	; 0x2292 <__stack+0x93>
    2286:	08 95       	ret
    2288:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <junctionY>
    228c:	91 11       	cpse	r25, r1
    228e:	9d cf       	rjmp	.-198    	; 0x21ca <_Z24reactConditionOfLineLeftv+0xa8>
    2290:	b9 cf       	rjmp	.-142    	; 0x2204 <__stack+0x5>
    2292:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <junctionY>
    2296:	99 23       	and	r25, r25
    2298:	59 f0       	breq	.+22     	; 0x22b0 <__stack+0xb1>
    229a:	97 cf       	rjmp	.-210    	; 0x21ca <_Z24reactConditionOfLineLeftv+0xa8>
		if(ltY.rightedgeleft && lineTrackerData == 80){
			lineMeet = true;
			ltY.rightedgeleft = false;
			ltY.leftedgeleft = false;
		}
		else if(ltY.leftedgeleft && lineTrackerData == 10){
    229c:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ltY+0x8>
    22a0:	99 23       	and	r25, r25
    22a2:	69 f3       	breq	.-38     	; 0x227e <__stack+0x7f>
    22a4:	f1 cf       	rjmp	.-30     	; 0x2288 <__stack+0x89>
    22a6:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <ltY+0x8>
    22aa:	99 23       	and	r25, r25
    22ac:	91 f3       	breq	.-28     	; 0x2292 <__stack+0x93>
    22ae:	81 cf       	rjmp	.-254    	; 0x21b2 <_Z24reactConditionOfLineLeftv+0x90>
				velocity_robot[1] = -10;
				calculateCompassPID();
			}
		}
		else if(ltY.rightedgeleft ){
			if(movingyfront){
    22b0:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <movingyfront>
    22b4:	99 23       	and	r25, r25
    22b6:	a1 f2       	breq	.-88     	; 0x2260 <__stack+0x61>
    22b8:	c6 cf       	rjmp	.-116    	; 0x2246 <__stack+0x47>
    22ba:	08 95       	ret

000022bc <main>:
}

int main(void)
{
	////////////SET COMMUNICATION PINS AS INPUT AND PULL UP////////
	INPUT(SHUTTLECOCKPIN);
    22bc:	ea e0       	ldi	r30, 0x0A	; 10
    22be:	f1 e0       	ldi	r31, 0x01	; 1
    22c0:	80 81       	ld	r24, Z
    22c2:	8f 7e       	andi	r24, 0xEF	; 239
    22c4:	80 83       	st	Z, r24
	INPUT(ZONEPIN);
    22c6:	80 81       	ld	r24, Z
    22c8:	8f 7b       	andi	r24, 0xBF	; 191
    22ca:	80 83       	st	Z, r24
 	SET(SHUTTLECOCKPIN);
    22cc:	eb e0       	ldi	r30, 0x0B	; 11
    22ce:	f1 e0       	ldi	r31, 0x01	; 1
    22d0:	80 81       	ld	r24, Z
    22d2:	80 61       	ori	r24, 0x10	; 16
    22d4:	80 83       	st	Z, r24
 	SET(ZONEPIN);
    22d6:	80 81       	ld	r24, Z
    22d8:	80 64       	ori	r24, 0x40	; 64
    22da:	80 83       	st	Z, r24
	///////PULL DOWN RACK PIN 
	INPUT(RACKPIN);
    22dc:	85 98       	cbi	0x10, 5	; 16
	CLEAR(RACKPIN);
    22de:	8d 98       	cbi	0x11, 5	; 17
	///SET PK1 AS OUTPUT TO SEND SIGNAL TO SLAVE TO BRAKE MOTOR 
	DDRK |= (1<<PK1);
    22e0:	e7 e0       	ldi	r30, 0x07	; 7
    22e2:	f1 e0       	ldi	r31, 0x01	; 1
    22e4:	80 81       	ld	r24, Z
    22e6:	82 60       	ori	r24, 0x02	; 2
    22e8:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK1); 
    22ea:	e8 e0       	ldi	r30, 0x08	; 8
    22ec:	f1 e0       	ldi	r31, 0x01	; 1
    22ee:	80 81       	ld	r24, Z
    22f0:	8d 7f       	andi	r24, 0xFD	; 253
    22f2:	80 83       	st	Z, r24
	/// INITIALIZE ALL THE UART
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    22f4:	87 e6       	ldi	r24, 0x67	; 103
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	15 d1       	rcall	.+554    	; 0x2524 <_Z10uart0_initj>
	uart2_init(UART_BAUD_SELECT(38400,F_CPU));
    22fa:	89 e1       	ldi	r24, 0x19	; 25
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	08 d2       	rcall	.+1040   	; 0x2710 <_Z10uart2_initj>
	uart3_init(UART_BAUD_SELECT(9600,F_CPU));
    2300:	87 e6       	ldi	r24, 0x67	; 103
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	90 d2       	rcall	.+1312   	; 0x2826 <_Z10uart3_initj>
	//INITIALIZE EVERYTHING ELSE
 	initializeAll();
    2306:	0e 94 27 06 	call	0xc4e	; 0xc4e <_Z13initializeAllv>
// 			uart3_puts("\t");
// 			uart3_putint(get_Angle());
// 			uart3_puts("\r\n\n");
// 		}
		
		checkJunctionOfY();
    230a:	78 94       	sei
    230c:	91 de       	rcall	.-734    	; 0x2030 <_Z16checkJunctionOfYv>
		checkJunctionOfX();
    230e:	9b de       	rcall	.-714    	; 0x2046 <_Z16checkJunctionOfXv>
    2310:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z19getLineTrackerYdatav>
		//get linetracker data
		lineTrackerData = getLineTrackerYdata();
    2314:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <lineTrackerData+0x1>
    2318:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <lineTrackerData>
    231c:	0e 94 ad 01 	call	0x35a	; 0x35a <_Z9get_Anglev>
		//get compass data
		compass_Angle = get_Angle();
    2320:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <compass_Angle+0x1>
		//Change compass setpoint if necessary
		changeCompassSetpoint();
    2324:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <compass_Angle>
		//call the gameplay function
		gorockthegamefield();
    2328:	97 de       	rcall	.-722    	; 0x2058 <_Z21changeCompassSetpointv>
    232a:	c9 d8       	rcall	.-3694   	; 0x14be <_Z18gorockthegamefieldv>
		//check for line left condition and react to it
		reactConditionOfLineLeft();
    232c:	fa de       	rcall	.-524    	; 0x2122 <_Z24reactConditionOfLineLeftv>
    232e:	0e 94 5f 04 	call	0x8be	; 0x8be <_Z12calculatevelv>
		//calculate velocity of each motor and send to slave
		calculatevel();
    2332:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <_ZL16linetracker_data>
		//set previous line tracker data
		previousLinetrackerData = linetracker_data;
    2336:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <_ZL16linetracker_data+0x1>
    233a:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <previousLinetrackerData+0x1>
    233e:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <previousLinetrackerData>
    2342:	e4 cf       	rjmp	.-56     	; 0x230c <main+0x50>

00002344 <_GLOBAL__sub_I_compassPID>:
    2344:	ee e5       	ldi	r30, 0x5E	; 94
};
////////////////////////////////////////////////////////////////////////////////


struct bodyPid{ 
	bodyPid():FirstData(true){};
    2346:	f3 e0       	ldi	r31, 0x03	; 3
    2348:	10 86       	std	Z+8, r1	; 0x08
    234a:	11 86       	std	Z+9, r1	; 0x09
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	80 8b       	std	Z+16, r24	; 0x10
    2350:	ed e3       	ldi	r30, 0x3D	; 61
    2352:	f3 e0       	ldi	r31, 0x03	; 3
    2354:	10 86       	std	Z+8, r1	; 0x08
    2356:	11 86       	std	Z+9, r1	; 0x09
    2358:	80 8b       	std	Z+16, r24	; 0x10
    235a:	ec e1       	ldi	r30, 0x1C	; 28
    235c:	f3 e0       	ldi	r31, 0x03	; 3
    235e:	10 86       	std	Z+8, r1	; 0x08
    2360:	11 86       	std	Z+9, r1	; 0x09
    2362:	80 8b       	std	Z+16, r24	; 0x10
    2364:	eb ef       	ldi	r30, 0xFB	; 251
    2366:	f2 e0       	ldi	r31, 0x02	; 2
    2368:	10 86       	std	Z+8, r1	; 0x08
    236a:	11 86       	std	Z+9, r1	; 0x09
    236c:	80 8b       	std	Z+16, r24	; 0x10
    236e:	ea ed       	ldi	r30, 0xDA	; 218
    2370:	f2 e0       	ldi	r31, 0x02	; 2
    2372:	10 86       	std	Z+8, r1	; 0x08
    2374:	11 86       	std	Z+9, r1	; 0x09
    2376:	80 8b       	std	Z+16, r24	; 0x10
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    2378:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <encoderX+0x1>
    237c:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <encoderX>
			Init_encoder_interrupt();
    2380:	8c eb       	ldi	r24, 0xBC	; 188
    2382:	92 e0       	ldi	r25, 0x02	; 2
    2384:	0e 94 bc 00 	call	0x178	; 0x178 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    2388:	8c eb       	ldi	r24, 0xBC	; 188
    238a:	92 e0       	ldi	r25, 0x02	; 2
    238c:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN7encoder10Init_timerEv>
		
	public:
		float distance;
		encoder()
		{
			count_encoder= 0;
    2390:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <encoderY+0x1>
    2394:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <encoderY>
			Init_encoder_interrupt();
    2398:	84 eb       	ldi	r24, 0xB4	; 180
    239a:	92 e0       	ldi	r25, 0x02	; 2
    239c:	0e 94 bc 00 	call	0x178	; 0x178 <_ZN7encoder22Init_encoder_interruptEv>
			Init_timer();
    23a0:	84 eb       	ldi	r24, 0xB4	; 180
    23a2:	92 e0       	ldi	r25, 0x02	; 2
    23a4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_ZN7encoder10Init_timerEv>
    23a8:	08 95       	ret

000023aa <_Z8i2c_initv>:
uint8_t i2c_write_array(uint8_t *data, uint8_t count){
	while(count--){
		if(i2c_write(*data++) != 0)		return count;
	}
	return 0;
}
    23aa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    23ae:	88 e4       	ldi	r24, 0x48	; 72
    23b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    23b4:	08 95       	ret

000023b6 <_Z9i2c_starth>:
    23b6:	94 ea       	ldi	r25, 0xA4	; 164
    23b8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    23bc:	ec eb       	ldi	r30, 0xBC	; 188
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	90 81       	ld	r25, Z
    23c2:	99 23       	and	r25, r25
    23c4:	ec f7       	brge	.-6      	; 0x23c0 <_Z9i2c_starth+0xa>
    23c6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    23ca:	98 7f       	andi	r25, 0xF8	; 248
    23cc:	98 30       	cpi	r25, 0x08	; 8
    23ce:	11 f0       	breq	.+4      	; 0x23d4 <_Z9i2c_starth+0x1e>
    23d0:	90 31       	cpi	r25, 0x10	; 16
    23d2:	a1 f4       	brne	.+40     	; 0x23fc <_Z9i2c_starth+0x46>
    23d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    23d8:	84 e8       	ldi	r24, 0x84	; 132
    23da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    23de:	ec eb       	ldi	r30, 0xBC	; 188
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	88 23       	and	r24, r24
    23e6:	ec f7       	brge	.-6      	; 0x23e2 <_Z9i2c_starth+0x2c>
    23e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    23ec:	98 7f       	andi	r25, 0xF8	; 248
    23ee:	98 31       	cpi	r25, 0x18	; 24
    23f0:	39 f0       	breq	.+14     	; 0x2400 <_Z9i2c_starth+0x4a>
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 34       	cpi	r25, 0x40	; 64
    23f6:	29 f4       	brne	.+10     	; 0x2402 <_Z9i2c_starth+0x4c>
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	08 95       	ret
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	08 95       	ret
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	08 95       	ret

00002404 <_Z13i2c_rep_starth>:
    2404:	d8 cf       	rjmp	.-80     	; 0x23b6 <_Z9i2c_starth>
    2406:	08 95       	ret

00002408 <_Z8i2c_stopv>:
    2408:	84 e9       	ldi	r24, 0x94	; 148
    240a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    240e:	ec eb       	ldi	r30, 0xBC	; 188
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	84 fd       	sbrc	r24, 4
    2416:	fd cf       	rjmp	.-6      	; 0x2412 <_Z8i2c_stopv+0xa>
    2418:	08 95       	ret

0000241a <_Z9i2c_writeh>:
    241a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    241e:	84 e8       	ldi	r24, 0x84	; 132
    2420:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2424:	ec eb       	ldi	r30, 0xBC	; 188
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	88 23       	and	r24, r24
    242c:	ec f7       	brge	.-6      	; 0x2428 <_Z9i2c_writeh+0xe>
    242e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2432:	98 7f       	andi	r25, 0xF8	; 248
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	98 32       	cpi	r25, 0x28	; 40
    2438:	09 f4       	brne	.+2      	; 0x243c <_Z9i2c_writeh+0x22>
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	08 95       	ret

0000243e <_Z11i2c_readAckv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    243e:	84 ec       	ldi	r24, 0xC4	; 196
    2440:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));    
    2444:	ec eb       	ldi	r30, 0xBC	; 188
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	88 23       	and	r24, r24
    244c:	ec f7       	brge	.-6      	; 0x2448 <_Z11i2c_readAckv+0xa>

    return TWDR;
    244e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

}/* i2c_readAck */
    2452:	08 95       	ret

00002454 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2454:	84 e8       	ldi	r24, 0x84	; 132
    2456:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
    245a:	ec eb       	ldi	r30, 0xBC	; 188
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	88 23       	and	r24, r24
    2462:	ec f7       	brge	.-6      	; 0x245e <_Z11i2c_readNakv+0xa>
	
    return TWDR;
    2464:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

    2468:	08 95       	ret

0000246a <__vector_25>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart2_flush(void)
{
	UART2_RxHead = UART2_RxTail;
    246a:	1f 92       	push	r1
    246c:	0f 92       	push	r0
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	0f 92       	push	r0
    2472:	11 24       	eor	r1, r1
    2474:	0b b6       	in	r0, 0x3b	; 59
    2476:	0f 92       	push	r0
    2478:	2f 93       	push	r18
    247a:	8f 93       	push	r24
    247c:	9f 93       	push	r25
    247e:	ef 93       	push	r30
    2480:	ff 93       	push	r31
    2482:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    2486:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    248a:	88 71       	andi	r24, 0x18	; 24
    248c:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <_ZL12UART0_RxHead>
    2490:	ef 5f       	subi	r30, 0xFF	; 255
    2492:	ef 71       	andi	r30, 0x1F	; 31
    2494:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <_ZL12UART0_RxTail>
    2498:	e9 17       	cp	r30, r25
    249a:	39 f0       	breq	.+14     	; 0x24aa <__vector_25+0x40>
    249c:	e0 93 93 04 	sts	0x0493, r30	; 0x800493 <_ZL12UART0_RxHead>
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	ea 56       	subi	r30, 0x6A	; 106
    24a4:	fb 4f       	sbci	r31, 0xFB	; 251
    24a6:	20 83       	st	Z, r18
    24a8:	01 c0       	rjmp	.+2      	; 0x24ac <__vector_25+0x42>
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <_ZL17UART0_LastRxError>
    24b0:	ff 91       	pop	r31
    24b2:	ef 91       	pop	r30
    24b4:	9f 91       	pop	r25
    24b6:	8f 91       	pop	r24
    24b8:	2f 91       	pop	r18
    24ba:	0f 90       	pop	r0
    24bc:	0b be       	out	0x3b, r0	; 59
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	0f 90       	pop	r0
    24c4:	1f 90       	pop	r1
    24c6:	18 95       	reti

000024c8 <__vector_26>:
    24c8:	1f 92       	push	r1
    24ca:	0f 92       	push	r0
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	0f 92       	push	r0
    24d0:	11 24       	eor	r1, r1
    24d2:	0b b6       	in	r0, 0x3b	; 59
    24d4:	0f 92       	push	r0
    24d6:	8f 93       	push	r24
    24d8:	9f 93       	push	r25
    24da:	ef 93       	push	r30
    24dc:	ff 93       	push	r31
    24de:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <_ZL12UART0_TxHead>
    24e2:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <_ZL12UART0_TxTail>
    24e6:	98 17       	cp	r25, r24
    24e8:	69 f0       	breq	.+26     	; 0x2504 <__vector_26+0x3c>
    24ea:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <_ZL12UART0_TxTail>
    24ee:	ef 5f       	subi	r30, 0xFF	; 255
    24f0:	ef 71       	andi	r30, 0x1F	; 31
    24f2:	e0 93 94 04 	sts	0x0494, r30	; 0x800494 <_ZL12UART0_TxTail>
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	ea 54       	subi	r30, 0x4A	; 74
    24fa:	fb 4f       	sbci	r31, 0xFB	; 251
    24fc:	80 81       	ld	r24, Z
    24fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2502:	05 c0       	rjmp	.+10     	; 0x250e <__vector_26+0x46>
    2504:	e1 ec       	ldi	r30, 0xC1	; 193
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	8f 7d       	andi	r24, 0xDF	; 223
    250c:	80 83       	st	Z, r24
    250e:	ff 91       	pop	r31
    2510:	ef 91       	pop	r30
    2512:	9f 91       	pop	r25
    2514:	8f 91       	pop	r24
    2516:	0f 90       	pop	r0
    2518:	0b be       	out	0x3b, r0	; 59
    251a:	0f 90       	pop	r0
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	0f 90       	pop	r0
    2520:	1f 90       	pop	r1
    2522:	18 95       	reti

00002524 <_Z10uart0_initj>:
    2524:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <_ZL12UART0_TxHead>
    2528:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <_ZL12UART0_TxTail>
    252c:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <_ZL12UART0_RxHead>
    2530:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <_ZL12UART0_RxTail>
    2534:	99 23       	and	r25, r25
    2536:	24 f4       	brge	.+8      	; 0x2540 <_Z10uart0_initj+0x1c>
    2538:	22 e0       	ldi	r18, 0x02	; 2
    253a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    253e:	9f 77       	andi	r25, 0x7F	; 127
    2540:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    2544:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    2548:	88 e9       	ldi	r24, 0x98	; 152
    254a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    254e:	86 e0       	ldi	r24, 0x06	; 6
    2550:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    2554:	08 95       	ret

00002556 <_Z10uart0_putch>:
    2556:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <_ZL12UART0_TxHead>
    255a:	2f 5f       	subi	r18, 0xFF	; 255
    255c:	2f 71       	andi	r18, 0x1F	; 31
    255e:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <_ZL12UART0_TxTail>
    2562:	29 17       	cp	r18, r25
    2564:	e1 f3       	breq	.-8      	; 0x255e <_Z10uart0_putch+0x8>
    2566:	e2 2f       	mov	r30, r18
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	ea 54       	subi	r30, 0x4A	; 74
    256c:	fb 4f       	sbci	r31, 0xFB	; 251
    256e:	80 83       	st	Z, r24
    2570:	20 93 95 04 	sts	0x0495, r18	; 0x800495 <_ZL12UART0_TxHead>
    2574:	e1 ec       	ldi	r30, 0xC1	; 193
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	80 62       	ori	r24, 0x20	; 32
    257c:	80 83       	st	Z, r24
    257e:	08 95       	ret

00002580 <_Z10uart0_putsPKc>:
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	ec 01       	movw	r28, r24
    2586:	88 81       	ld	r24, Y
    2588:	88 23       	and	r24, r24
    258a:	29 f0       	breq	.+10     	; 0x2596 <_Z10uart0_putsPKc+0x16>
    258c:	21 96       	adiw	r28, 0x01	; 1
    258e:	e3 df       	rcall	.-58     	; 0x2556 <_Z10uart0_putch>
    2590:	89 91       	ld	r24, Y+
    2592:	81 11       	cpse	r24, r1
    2594:	fc cf       	rjmp	.-8      	; 0x258e <_Z10uart0_putsPKc+0xe>
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	08 95       	ret

0000259c <__vector_36>:
    259c:	1f 92       	push	r1
    259e:	0f 92       	push	r0
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	0f 92       	push	r0
    25a4:	11 24       	eor	r1, r1
    25a6:	0b b6       	in	r0, 0x3b	; 59
    25a8:	0f 92       	push	r0
    25aa:	2f 93       	push	r18
    25ac:	8f 93       	push	r24
    25ae:	9f 93       	push	r25
    25b0:	ef 93       	push	r30
    25b2:	ff 93       	push	r31
    25b4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
    25b8:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    25bc:	88 71       	andi	r24, 0x18	; 24
    25be:	e0 91 4e 04 	lds	r30, 0x044E	; 0x80044e <_ZL12UART1_RxHead>
    25c2:	ef 5f       	subi	r30, 0xFF	; 255
    25c4:	ef 71       	andi	r30, 0x1F	; 31
    25c6:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <_ZL12UART1_RxTail>
    25ca:	e9 17       	cp	r30, r25
    25cc:	39 f0       	breq	.+14     	; 0x25dc <__vector_36+0x40>
    25ce:	e0 93 4e 04 	sts	0x044E, r30	; 0x80044e <_ZL12UART1_RxHead>
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	ef 5a       	subi	r30, 0xAF	; 175
    25d6:	fb 4f       	sbci	r31, 0xFB	; 251
    25d8:	20 83       	st	Z, r18
    25da:	01 c0       	rjmp	.+2      	; 0x25de <__vector_36+0x42>
    25dc:	82 e0       	ldi	r24, 0x02	; 2
    25de:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <_ZL17UART1_LastRxError>
    25e2:	ff 91       	pop	r31
    25e4:	ef 91       	pop	r30
    25e6:	9f 91       	pop	r25
    25e8:	8f 91       	pop	r24
    25ea:	2f 91       	pop	r18
    25ec:	0f 90       	pop	r0
    25ee:	0b be       	out	0x3b, r0	; 59
    25f0:	0f 90       	pop	r0
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	0f 90       	pop	r0
    25f6:	1f 90       	pop	r1
    25f8:	18 95       	reti

000025fa <__vector_37>:
    25fa:	1f 92       	push	r1
    25fc:	0f 92       	push	r0
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	0f 92       	push	r0
    2602:	11 24       	eor	r1, r1
    2604:	0b b6       	in	r0, 0x3b	; 59
    2606:	0f 92       	push	r0
    2608:	8f 93       	push	r24
    260a:	9f 93       	push	r25
    260c:	ef 93       	push	r30
    260e:	ff 93       	push	r31
    2610:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZL12UART1_TxHead>
    2614:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZL12UART1_TxTail>
    2618:	98 17       	cp	r25, r24
    261a:	69 f0       	breq	.+26     	; 0x2636 <__vector_37+0x3c>
    261c:	e0 91 4f 04 	lds	r30, 0x044F	; 0x80044f <_ZL12UART1_TxTail>
    2620:	ef 5f       	subi	r30, 0xFF	; 255
    2622:	ef 71       	andi	r30, 0x1F	; 31
    2624:	e0 93 4f 04 	sts	0x044F, r30	; 0x80044f <_ZL12UART1_TxTail>
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	ef 58       	subi	r30, 0x8F	; 143
    262c:	fb 4f       	sbci	r31, 0xFB	; 251
    262e:	80 81       	ld	r24, Z
    2630:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2634:	05 c0       	rjmp	.+10     	; 0x2640 <__vector_37+0x46>
    2636:	e9 ec       	ldi	r30, 0xC9	; 201
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	8f 7d       	andi	r24, 0xDF	; 223
    263e:	80 83       	st	Z, r24
    2640:	ff 91       	pop	r31
    2642:	ef 91       	pop	r30
    2644:	9f 91       	pop	r25
    2646:	8f 91       	pop	r24
    2648:	0f 90       	pop	r0
    264a:	0b be       	out	0x3b, r0	; 59
    264c:	0f 90       	pop	r0
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	0f 90       	pop	r0
    2652:	1f 90       	pop	r1
    2654:	18 95       	reti

00002656 <__vector_51>:
    2656:	1f 92       	push	r1
    2658:	0f 92       	push	r0
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	0f 92       	push	r0
    265e:	11 24       	eor	r1, r1
    2660:	0b b6       	in	r0, 0x3b	; 59
    2662:	0f 92       	push	r0
    2664:	2f 93       	push	r18
    2666:	8f 93       	push	r24
    2668:	9f 93       	push	r25
    266a:	ef 93       	push	r30
    266c:	ff 93       	push	r31
    266e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    2672:	20 91 d6 00 	lds	r18, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2676:	88 71       	andi	r24, 0x18	; 24
    2678:	e0 91 09 04 	lds	r30, 0x0409	; 0x800409 <_ZL12UART2_RxHead>
    267c:	ef 5f       	subi	r30, 0xFF	; 255
    267e:	ef 71       	andi	r30, 0x1F	; 31
    2680:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <_ZL12UART2_RxTail>
    2684:	e9 17       	cp	r30, r25
    2686:	39 f0       	breq	.+14     	; 0x2696 <__vector_51+0x40>
    2688:	e0 93 09 04 	sts	0x0409, r30	; 0x800409 <_ZL12UART2_RxHead>
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	e4 5f       	subi	r30, 0xF4	; 244
    2690:	fb 4f       	sbci	r31, 0xFB	; 251
    2692:	20 83       	st	Z, r18
    2694:	01 c0       	rjmp	.+2      	; 0x2698 <__vector_51+0x42>
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <_ZL17UART2_LastRxError>
    269c:	ff 91       	pop	r31
    269e:	ef 91       	pop	r30
    26a0:	9f 91       	pop	r25
    26a2:	8f 91       	pop	r24
    26a4:	2f 91       	pop	r18
    26a6:	0f 90       	pop	r0
    26a8:	0b be       	out	0x3b, r0	; 59
    26aa:	0f 90       	pop	r0
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	0f 90       	pop	r0
    26b0:	1f 90       	pop	r1
    26b2:	18 95       	reti

000026b4 <__vector_52>:
    26b4:	1f 92       	push	r1
    26b6:	0f 92       	push	r0
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	0f 92       	push	r0
    26bc:	11 24       	eor	r1, r1
    26be:	0b b6       	in	r0, 0x3b	; 59
    26c0:	0f 92       	push	r0
    26c2:	8f 93       	push	r24
    26c4:	9f 93       	push	r25
    26c6:	ef 93       	push	r30
    26c8:	ff 93       	push	r31
    26ca:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <_ZL12UART2_TxHead>
    26ce:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZL12UART2_TxTail>
    26d2:	98 17       	cp	r25, r24
    26d4:	69 f0       	breq	.+26     	; 0x26f0 <__vector_52+0x3c>
    26d6:	e0 91 0a 04 	lds	r30, 0x040A	; 0x80040a <_ZL12UART2_TxTail>
    26da:	ef 5f       	subi	r30, 0xFF	; 255
    26dc:	ef 71       	andi	r30, 0x1F	; 31
    26de:	e0 93 0a 04 	sts	0x040A, r30	; 0x80040a <_ZL12UART2_TxTail>
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	e4 5d       	subi	r30, 0xD4	; 212
    26e6:	fb 4f       	sbci	r31, 0xFB	; 251
    26e8:	80 81       	ld	r24, Z
    26ea:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    26ee:	05 c0       	rjmp	.+10     	; 0x26fa <__vector_52+0x46>
    26f0:	e1 ed       	ldi	r30, 0xD1	; 209
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8f 7d       	andi	r24, 0xDF	; 223
    26f8:	80 83       	st	Z, r24
    26fa:	ff 91       	pop	r31
    26fc:	ef 91       	pop	r30
    26fe:	9f 91       	pop	r25
    2700:	8f 91       	pop	r24
    2702:	0f 90       	pop	r0
    2704:	0b be       	out	0x3b, r0	; 59
    2706:	0f 90       	pop	r0
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	0f 90       	pop	r0
    270c:	1f 90       	pop	r1
    270e:	18 95       	reti

00002710 <_Z10uart2_initj>:
    2710:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <_ZL12UART2_TxHead>
    2714:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_ZL12UART2_TxTail>
    2718:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <_ZL12UART2_RxHead>
    271c:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <_ZL12UART2_RxTail>
    2720:	99 23       	and	r25, r25
    2722:	24 f4       	brge	.+8      	; 0x272c <_Z10uart2_initj+0x1c>
    2724:	22 e0       	ldi	r18, 0x02	; 2
    2726:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
    272a:	9f 77       	andi	r25, 0x7F	; 127
    272c:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    2730:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    2734:	88 e9       	ldi	r24, 0x98	; 152
    2736:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    273a:	86 e0       	ldi	r24, 0x06	; 6
    273c:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    2740:	08 95       	ret

00002742 <_Z10uart2_putch>:
    2742:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <_ZL12UART2_TxHead>
    2746:	2f 5f       	subi	r18, 0xFF	; 255
    2748:	2f 71       	andi	r18, 0x1F	; 31
    274a:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <_ZL12UART2_TxTail>
    274e:	29 17       	cp	r18, r25
    2750:	e1 f3       	breq	.-8      	; 0x274a <_Z10uart2_putch+0x8>
    2752:	e2 2f       	mov	r30, r18
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	e4 5d       	subi	r30, 0xD4	; 212
    2758:	fb 4f       	sbci	r31, 0xFB	; 251
    275a:	80 83       	st	Z, r24
    275c:	20 93 0b 04 	sts	0x040B, r18	; 0x80040b <_ZL12UART2_TxHead>
    2760:	e1 ed       	ldi	r30, 0xD1	; 209
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	80 62       	ori	r24, 0x20	; 32
    2768:	80 83       	st	Z, r24
    276a:	08 95       	ret

0000276c <__vector_54>:
ISR(UART3_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART3 Receive Complete interrupt
Purpose:  called when the UART3 has received a character
**************************************************************************/
{
    276c:	1f 92       	push	r1
    276e:	0f 92       	push	r0
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	0f 92       	push	r0
    2774:	11 24       	eor	r1, r1
    2776:	0b b6       	in	r0, 0x3b	; 59
    2778:	0f 92       	push	r0
    277a:	2f 93       	push	r18
    277c:	8f 93       	push	r24
    277e:	9f 93       	push	r25
    2780:	ef 93       	push	r30
    2782:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART3_STATUS;
    2784:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	data = UART3_DATA;
    2788:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	

	/* */
	lastRxError = (usr & (_BV(FE3) | _BV(DOR3)));
    278c:	88 71       	andi	r24, 0x18	; 24

	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;
    278e:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <_ZL12UART3_RxHead>
    2792:	ef 5f       	subi	r30, 0xFF	; 255
    2794:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART3_RxTail) {
    2796:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <_ZL12UART3_RxTail>
    279a:	e9 17       	cp	r30, r25
    279c:	39 f0       	breq	.+14     	; 0x27ac <__vector_54+0x40>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART3_RxHead = tmphead;
    279e:	e0 93 c4 03 	sts	0x03C4, r30	; 0x8003c4 <_ZL12UART3_RxHead>
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	e9 53       	subi	r30, 0x39	; 57
    27a6:	fc 4f       	sbci	r31, 0xFC	; 252
    27a8:	20 83       	st	Z, r18
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <__vector_54+0x42>
	/* calculate buffer index */
	tmphead = (UART3_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART3_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    27ac:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART3_RxHead = tmphead;
		/* store received data in buffer */
		UART3_RxBuf[tmphead] = data;
	}
	UART3_LastRxError = lastRxError;
    27ae:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <_ZL17UART3_LastRxError>
}
    27b2:	ff 91       	pop	r31
    27b4:	ef 91       	pop	r30
    27b6:	9f 91       	pop	r25
    27b8:	8f 91       	pop	r24
    27ba:	2f 91       	pop	r18
    27bc:	0f 90       	pop	r0
    27be:	0b be       	out	0x3b, r0	; 59
    27c0:	0f 90       	pop	r0
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	0f 90       	pop	r0
    27c6:	1f 90       	pop	r1
    27c8:	18 95       	reti

000027ca <__vector_55>:
ISR(UART3_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART3 Data Register Empty interrupt
Purpose:  called when the UART3 is ready to transmit the next byte
**************************************************************************/
{
    27ca:	1f 92       	push	r1
    27cc:	0f 92       	push	r0
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	0f 92       	push	r0
    27d2:	11 24       	eor	r1, r1
    27d4:	0b b6       	in	r0, 0x3b	; 59
    27d6:	0f 92       	push	r0
    27d8:	8f 93       	push	r24
    27da:	9f 93       	push	r25
    27dc:	ef 93       	push	r30
    27de:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART3_TxHead != UART3_TxTail) {
    27e0:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <_ZL12UART3_TxHead>
    27e4:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <_ZL12UART3_TxTail>
    27e8:	98 17       	cp	r25, r24
    27ea:	69 f0       	breq	.+26     	; 0x2806 <__vector_55+0x3c>
		/* calculate and store new buffer index */
		tmptail = (UART3_TxTail + 1) & UART_TX_BUFFER_MASK;
    27ec:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <_ZL12UART3_TxTail>
    27f0:	ef 5f       	subi	r30, 0xFF	; 255
    27f2:	ef 71       	andi	r30, 0x1F	; 31
		UART3_TxTail = tmptail;
    27f4:	e0 93 c5 03 	sts	0x03C5, r30	; 0x8003c5 <_ZL12UART3_TxTail>
		/* get one byte from buffer and write it to UART */
		UART3_DATA = UART3_TxBuf[tmptail];  /* start transmission */
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	e9 51       	subi	r30, 0x19	; 25
    27fc:	fc 4f       	sbci	r31, 0xFC	; 252
    27fe:	80 81       	ld	r24, Z
    2800:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2804:	05 c0       	rjmp	.+10     	; 0x2810 <__vector_55+0x46>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART3_CONTROL &= ~_BV(UART3_UDRIE);
    2806:	e1 e3       	ldi	r30, 0x31	; 49
    2808:	f1 e0       	ldi	r31, 0x01	; 1
    280a:	80 81       	ld	r24, Z
    280c:	8f 7d       	andi	r24, 0xDF	; 223
    280e:	80 83       	st	Z, r24
	}
}
    2810:	ff 91       	pop	r31
    2812:	ef 91       	pop	r30
    2814:	9f 91       	pop	r25
    2816:	8f 91       	pop	r24
    2818:	0f 90       	pop	r0
    281a:	0b be       	out	0x3b, r0	; 59
    281c:	0f 90       	pop	r0
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	0f 90       	pop	r0
    2822:	1f 90       	pop	r1
    2824:	18 95       	reti

00002826 <_Z10uart3_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart3_init(unsigned int baudrate)
{
	UART3_TxHead = 0;
    2826:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <_ZL12UART3_TxHead>
	UART3_TxTail = 0;
    282a:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <_ZL12UART3_TxTail>
	UART3_RxHead = 0;
    282e:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <_ZL12UART3_RxHead>
	UART3_RxTail = 0;
    2832:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <_ZL12UART3_RxTail>


	/* Set baud rate */
	if (baudrate & 0x8000)
    2836:	99 23       	and	r25, r25
    2838:	24 f4       	brge	.+8      	; 0x2842 <_Z10uart3_initj+0x1c>
	{
		UART3_STATUS = (3 << U2X3);  //Enable 2x speed 
    283a:	26 e0       	ldi	r18, 0x06	; 6
    283c:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
		baudrate &= ~0x8000;
    2840:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRR3H = (unsigned char)(baudrate >> 8);
    2842:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	UBRR3L = (unsigned char)baudrate;
    2846:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART3_CONTROL = _BV(RXCIE3) | (1 << RXEN3) | (1 << TXEN3);
    284a:	88 e9       	ldi	r24, 0x98	; 152
    284c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>

	/* Set frame format: asynchronous, 8data, no parity, 1-stop bit */
#ifdef URSEL3
	UCSR3C = (1 << URSEL3) | (1 << UCSZ30) | ( 1 << UCSZ31);
#else
	UCSR3C = (1 << UCSZ30) | ( 1 << UCSZ31);
    2850:	86 e0       	ldi	r24, 0x06	; 6
    2852:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    2856:	08 95       	ret

00002858 <_Z10uart3_getcv>:
{
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
    2858:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <_ZL12UART3_RxHead>
    285c:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <_ZL12UART3_RxTail>
    2860:	98 17       	cp	r25, r24
    2862:	91 f0       	breq	.+36     	; 0x2888 <_Z10uart3_getcv+0x30>
		 return UART_NO_DATA;   /* no data available */
	}

	/* calculate /store buffer index */
	tmptail = (UART3_RxTail + 1) & UART_RX_BUFFER_MASK;
    2864:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <_ZL12UART3_RxTail>
    2868:	ef 5f       	subi	r30, 0xFF	; 255
    286a:	ef 71       	andi	r30, 0x1F	; 31
	UART3_RxTail = tmptail;
    286c:	e0 93 c3 03 	sts	0x03C3, r30	; 0x8003c3 <_ZL12UART3_RxTail>

	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	e9 53       	subi	r30, 0x39	; 57
    2874:	fc 4f       	sbci	r31, 0xFC	; 252
    2876:	20 81       	ld	r18, Z

	return (UART3_LastRxError << 8) + data;
    2878:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <_ZL17UART3_LastRxError>
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	98 2f       	mov	r25, r24
    2880:	88 27       	eor	r24, r24
    2882:	82 0f       	add	r24, r18
    2884:	91 1d       	adc	r25, r1
    2886:	08 95       	ret
	unsigned char tmptail;
	unsigned char data;


	if (UART3_RxHead == UART3_RxTail) {
		 return UART_NO_DATA;   /* no data available */
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	91 e0       	ldi	r25, 0x01	; 1
	/* get data from receive buffer */
	data = UART3_RxBuf[tmptail];

	return (UART3_LastRxError << 8) + data;

}/* uart3_getc */
    288c:	08 95       	ret

0000288e <_Z10uart3_putch>:
void uart3_putc(unsigned char data)
{
	unsigned char tmphead;


	tmphead = (UART3_TxHead + 1) & UART_TX_BUFFER_MASK;
    288e:	20 91 c6 03 	lds	r18, 0x03C6	; 0x8003c6 <_ZL12UART3_TxHead>
    2892:	2f 5f       	subi	r18, 0xFF	; 255
    2894:	2f 71       	andi	r18, 0x1F	; 31

	while (tmphead == UART3_TxTail) {
    2896:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <_ZL12UART3_TxTail>
    289a:	29 17       	cp	r18, r25
    289c:	e1 f3       	breq	.-8      	; 0x2896 <_Z10uart3_putch+0x8>
		;/* wait for free space in buffer */
	}

	UART3_TxBuf[tmphead] = data;
    289e:	e2 2f       	mov	r30, r18
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	e9 51       	subi	r30, 0x19	; 25
    28a4:	fc 4f       	sbci	r31, 0xFC	; 252
    28a6:	80 83       	st	Z, r24
	UART3_TxHead = tmphead;
    28a8:	20 93 c6 03 	sts	0x03C6, r18	; 0x8003c6 <_ZL12UART3_TxHead>

	/* enable UDRE interrupt */
	UART3_CONTROL |= _BV(UART3_UDRIE);
    28ac:	e1 e3       	ldi	r30, 0x31	; 49
    28ae:	f1 e0       	ldi	r31, 0x01	; 1
    28b0:	80 81       	ld	r24, Z
    28b2:	80 62       	ori	r24, 0x20	; 32
    28b4:	80 83       	st	Z, r24
    28b6:	08 95       	ret

000028b8 <__subsf3>:
    28b8:	50 58       	subi	r21, 0x80	; 128

000028ba <__addsf3>:
    28ba:	bb 27       	eor	r27, r27
    28bc:	aa 27       	eor	r26, r26
    28be:	0e d0       	rcall	.+28     	; 0x28dc <__addsf3x>
    28c0:	fc c1       	rjmp	.+1016   	; 0x2cba <__fp_round>
    28c2:	ed d1       	rcall	.+986    	; 0x2c9e <__fp_pscA>
    28c4:	30 f0       	brcs	.+12     	; 0x28d2 <__addsf3+0x18>
    28c6:	f2 d1       	rcall	.+996    	; 0x2cac <__fp_pscB>
    28c8:	20 f0       	brcs	.+8      	; 0x28d2 <__addsf3+0x18>
    28ca:	31 f4       	brne	.+12     	; 0x28d8 <__addsf3+0x1e>
    28cc:	9f 3f       	cpi	r25, 0xFF	; 255
    28ce:	11 f4       	brne	.+4      	; 0x28d4 <__addsf3+0x1a>
    28d0:	1e f4       	brtc	.+6      	; 0x28d8 <__addsf3+0x1e>
    28d2:	bd c1       	rjmp	.+890    	; 0x2c4e <__fp_nan>
    28d4:	0e f4       	brtc	.+2      	; 0x28d8 <__addsf3+0x1e>
    28d6:	e0 95       	com	r30
    28d8:	e7 fb       	bst	r30, 7
    28da:	b3 c1       	rjmp	.+870    	; 0x2c42 <__fp_inf>

000028dc <__addsf3x>:
    28dc:	e9 2f       	mov	r30, r25
    28de:	fe d1       	rcall	.+1020   	; 0x2cdc <__fp_split3>
    28e0:	80 f3       	brcs	.-32     	; 0x28c2 <__addsf3+0x8>
    28e2:	ba 17       	cp	r27, r26
    28e4:	62 07       	cpc	r22, r18
    28e6:	73 07       	cpc	r23, r19
    28e8:	84 07       	cpc	r24, r20
    28ea:	95 07       	cpc	r25, r21
    28ec:	18 f0       	brcs	.+6      	; 0x28f4 <__addsf3x+0x18>
    28ee:	71 f4       	brne	.+28     	; 0x290c <__addsf3x+0x30>
    28f0:	9e f5       	brtc	.+102    	; 0x2958 <__addsf3x+0x7c>
    28f2:	16 c2       	rjmp	.+1068   	; 0x2d20 <__fp_zero>
    28f4:	0e f4       	brtc	.+2      	; 0x28f8 <__addsf3x+0x1c>
    28f6:	e0 95       	com	r30
    28f8:	0b 2e       	mov	r0, r27
    28fa:	ba 2f       	mov	r27, r26
    28fc:	a0 2d       	mov	r26, r0
    28fe:	0b 01       	movw	r0, r22
    2900:	b9 01       	movw	r22, r18
    2902:	90 01       	movw	r18, r0
    2904:	0c 01       	movw	r0, r24
    2906:	ca 01       	movw	r24, r20
    2908:	a0 01       	movw	r20, r0
    290a:	11 24       	eor	r1, r1
    290c:	ff 27       	eor	r31, r31
    290e:	59 1b       	sub	r21, r25
    2910:	99 f0       	breq	.+38     	; 0x2938 <__addsf3x+0x5c>
    2912:	59 3f       	cpi	r21, 0xF9	; 249
    2914:	50 f4       	brcc	.+20     	; 0x292a <__addsf3x+0x4e>
    2916:	50 3e       	cpi	r21, 0xE0	; 224
    2918:	68 f1       	brcs	.+90     	; 0x2974 <__addsf3x+0x98>
    291a:	1a 16       	cp	r1, r26
    291c:	f0 40       	sbci	r31, 0x00	; 0
    291e:	a2 2f       	mov	r26, r18
    2920:	23 2f       	mov	r18, r19
    2922:	34 2f       	mov	r19, r20
    2924:	44 27       	eor	r20, r20
    2926:	58 5f       	subi	r21, 0xF8	; 248
    2928:	f3 cf       	rjmp	.-26     	; 0x2910 <__addsf3x+0x34>
    292a:	46 95       	lsr	r20
    292c:	37 95       	ror	r19
    292e:	27 95       	ror	r18
    2930:	a7 95       	ror	r26
    2932:	f0 40       	sbci	r31, 0x00	; 0
    2934:	53 95       	inc	r21
    2936:	c9 f7       	brne	.-14     	; 0x292a <__addsf3x+0x4e>
    2938:	7e f4       	brtc	.+30     	; 0x2958 <__addsf3x+0x7c>
    293a:	1f 16       	cp	r1, r31
    293c:	ba 0b       	sbc	r27, r26
    293e:	62 0b       	sbc	r22, r18
    2940:	73 0b       	sbc	r23, r19
    2942:	84 0b       	sbc	r24, r20
    2944:	ba f0       	brmi	.+46     	; 0x2974 <__addsf3x+0x98>
    2946:	91 50       	subi	r25, 0x01	; 1
    2948:	a1 f0       	breq	.+40     	; 0x2972 <__addsf3x+0x96>
    294a:	ff 0f       	add	r31, r31
    294c:	bb 1f       	adc	r27, r27
    294e:	66 1f       	adc	r22, r22
    2950:	77 1f       	adc	r23, r23
    2952:	88 1f       	adc	r24, r24
    2954:	c2 f7       	brpl	.-16     	; 0x2946 <__addsf3x+0x6a>
    2956:	0e c0       	rjmp	.+28     	; 0x2974 <__addsf3x+0x98>
    2958:	ba 0f       	add	r27, r26
    295a:	62 1f       	adc	r22, r18
    295c:	73 1f       	adc	r23, r19
    295e:	84 1f       	adc	r24, r20
    2960:	48 f4       	brcc	.+18     	; 0x2974 <__addsf3x+0x98>
    2962:	87 95       	ror	r24
    2964:	77 95       	ror	r23
    2966:	67 95       	ror	r22
    2968:	b7 95       	ror	r27
    296a:	f7 95       	ror	r31
    296c:	9e 3f       	cpi	r25, 0xFE	; 254
    296e:	08 f0       	brcs	.+2      	; 0x2972 <__addsf3x+0x96>
    2970:	b3 cf       	rjmp	.-154    	; 0x28d8 <__addsf3+0x1e>
    2972:	93 95       	inc	r25
    2974:	88 0f       	add	r24, r24
    2976:	08 f0       	brcs	.+2      	; 0x297a <__addsf3x+0x9e>
    2978:	99 27       	eor	r25, r25
    297a:	ee 0f       	add	r30, r30
    297c:	97 95       	ror	r25
    297e:	87 95       	ror	r24
    2980:	08 95       	ret
    2982:	8d d1       	rcall	.+794    	; 0x2c9e <__fp_pscA>
    2984:	58 f0       	brcs	.+22     	; 0x299c <__addsf3x+0xc0>
    2986:	80 e8       	ldi	r24, 0x80	; 128
    2988:	91 e0       	ldi	r25, 0x01	; 1
    298a:	09 f4       	brne	.+2      	; 0x298e <__addsf3x+0xb2>
    298c:	9e ef       	ldi	r25, 0xFE	; 254
    298e:	8e d1       	rcall	.+796    	; 0x2cac <__fp_pscB>
    2990:	28 f0       	brcs	.+10     	; 0x299c <__addsf3x+0xc0>
    2992:	40 e8       	ldi	r20, 0x80	; 128
    2994:	51 e0       	ldi	r21, 0x01	; 1
    2996:	59 f4       	brne	.+22     	; 0x29ae <atan2+0xe>
    2998:	5e ef       	ldi	r21, 0xFE	; 254
    299a:	09 c0       	rjmp	.+18     	; 0x29ae <atan2+0xe>
    299c:	58 c1       	rjmp	.+688    	; 0x2c4e <__fp_nan>
    299e:	c0 c1       	rjmp	.+896    	; 0x2d20 <__fp_zero>

000029a0 <atan2>:
    29a0:	e9 2f       	mov	r30, r25
    29a2:	e0 78       	andi	r30, 0x80	; 128
    29a4:	9b d1       	rcall	.+822    	; 0x2cdc <__fp_split3>
    29a6:	68 f3       	brcs	.-38     	; 0x2982 <__addsf3x+0xa6>
    29a8:	09 2e       	mov	r0, r25
    29aa:	05 2a       	or	r0, r21
    29ac:	c1 f3       	breq	.-16     	; 0x299e <__addsf3x+0xc2>
    29ae:	26 17       	cp	r18, r22
    29b0:	37 07       	cpc	r19, r23
    29b2:	48 07       	cpc	r20, r24
    29b4:	59 07       	cpc	r21, r25
    29b6:	38 f0       	brcs	.+14     	; 0x29c6 <atan2+0x26>
    29b8:	0e 2e       	mov	r0, r30
    29ba:	07 f8       	bld	r0, 7
    29bc:	e0 25       	eor	r30, r0
    29be:	69 f0       	breq	.+26     	; 0x29da <atan2+0x3a>
    29c0:	e0 25       	eor	r30, r0
    29c2:	e0 64       	ori	r30, 0x40	; 64
    29c4:	0a c0       	rjmp	.+20     	; 0x29da <atan2+0x3a>
    29c6:	ef 63       	ori	r30, 0x3F	; 63
    29c8:	07 f8       	bld	r0, 7
    29ca:	00 94       	com	r0
    29cc:	07 fa       	bst	r0, 7
    29ce:	db 01       	movw	r26, r22
    29d0:	b9 01       	movw	r22, r18
    29d2:	9d 01       	movw	r18, r26
    29d4:	dc 01       	movw	r26, r24
    29d6:	ca 01       	movw	r24, r20
    29d8:	ad 01       	movw	r20, r26
    29da:	ef 93       	push	r30
    29dc:	47 d0       	rcall	.+142    	; 0x2a6c <__divsf3_pse>
    29de:	6d d1       	rcall	.+730    	; 0x2cba <__fp_round>
    29e0:	0a d0       	rcall	.+20     	; 0x29f6 <atan>
    29e2:	5f 91       	pop	r21
    29e4:	55 23       	and	r21, r21
    29e6:	31 f0       	breq	.+12     	; 0x29f4 <atan2+0x54>
    29e8:	2b ed       	ldi	r18, 0xDB	; 219
    29ea:	3f e0       	ldi	r19, 0x0F	; 15
    29ec:	49 e4       	ldi	r20, 0x49	; 73
    29ee:	50 fd       	sbrc	r21, 0
    29f0:	49 ec       	ldi	r20, 0xC9	; 201
    29f2:	63 cf       	rjmp	.-314    	; 0x28ba <__addsf3>
    29f4:	08 95       	ret

000029f6 <atan>:
    29f6:	df 93       	push	r29
    29f8:	dd 27       	eor	r29, r29
    29fa:	b9 2f       	mov	r27, r25
    29fc:	bf 77       	andi	r27, 0x7F	; 127
    29fe:	40 e8       	ldi	r20, 0x80	; 128
    2a00:	5f e3       	ldi	r21, 0x3F	; 63
    2a02:	16 16       	cp	r1, r22
    2a04:	17 06       	cpc	r1, r23
    2a06:	48 07       	cpc	r20, r24
    2a08:	5b 07       	cpc	r21, r27
    2a0a:	10 f4       	brcc	.+4      	; 0x2a10 <atan+0x1a>
    2a0c:	d9 2f       	mov	r29, r25
    2a0e:	93 d1       	rcall	.+806    	; 0x2d36 <inverse>
    2a10:	9f 93       	push	r25
    2a12:	8f 93       	push	r24
    2a14:	7f 93       	push	r23
    2a16:	6f 93       	push	r22
    2a18:	f8 d1       	rcall	.+1008   	; 0x2e0a <square>
    2a1a:	e4 ee       	ldi	r30, 0xE4	; 228
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	1a d1       	rcall	.+564    	; 0x2c54 <__fp_powser>
    2a20:	4c d1       	rcall	.+664    	; 0x2cba <__fp_round>
    2a22:	2f 91       	pop	r18
    2a24:	3f 91       	pop	r19
    2a26:	4f 91       	pop	r20
    2a28:	5f 91       	pop	r21
    2a2a:	98 d1       	rcall	.+816    	; 0x2d5c <__mulsf3x>
    2a2c:	dd 23       	and	r29, r29
    2a2e:	49 f0       	breq	.+18     	; 0x2a42 <atan+0x4c>
    2a30:	90 58       	subi	r25, 0x80	; 128
    2a32:	a2 ea       	ldi	r26, 0xA2	; 162
    2a34:	2a ed       	ldi	r18, 0xDA	; 218
    2a36:	3f e0       	ldi	r19, 0x0F	; 15
    2a38:	49 ec       	ldi	r20, 0xC9	; 201
    2a3a:	5f e3       	ldi	r21, 0x3F	; 63
    2a3c:	d0 78       	andi	r29, 0x80	; 128
    2a3e:	5d 27       	eor	r21, r29
    2a40:	4d df       	rcall	.-358    	; 0x28dc <__addsf3x>
    2a42:	df 91       	pop	r29
    2a44:	3a c1       	rjmp	.+628    	; 0x2cba <__fp_round>

00002a46 <__cmpsf2>:
    2a46:	d9 d0       	rcall	.+434    	; 0x2bfa <__fp_cmp>
    2a48:	08 f4       	brcc	.+2      	; 0x2a4c <__cmpsf2+0x6>
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	08 95       	ret

00002a4e <__divsf3>:
    2a4e:	0c d0       	rcall	.+24     	; 0x2a68 <__divsf3x>
    2a50:	34 c1       	rjmp	.+616    	; 0x2cba <__fp_round>
    2a52:	2c d1       	rcall	.+600    	; 0x2cac <__fp_pscB>
    2a54:	40 f0       	brcs	.+16     	; 0x2a66 <__divsf3+0x18>
    2a56:	23 d1       	rcall	.+582    	; 0x2c9e <__fp_pscA>
    2a58:	30 f0       	brcs	.+12     	; 0x2a66 <__divsf3+0x18>
    2a5a:	21 f4       	brne	.+8      	; 0x2a64 <__divsf3+0x16>
    2a5c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a5e:	19 f0       	breq	.+6      	; 0x2a66 <__divsf3+0x18>
    2a60:	f0 c0       	rjmp	.+480    	; 0x2c42 <__fp_inf>
    2a62:	51 11       	cpse	r21, r1
    2a64:	5e c1       	rjmp	.+700    	; 0x2d22 <__fp_szero>
    2a66:	f3 c0       	rjmp	.+486    	; 0x2c4e <__fp_nan>

00002a68 <__divsf3x>:
    2a68:	39 d1       	rcall	.+626    	; 0x2cdc <__fp_split3>
    2a6a:	98 f3       	brcs	.-26     	; 0x2a52 <__divsf3+0x4>

00002a6c <__divsf3_pse>:
    2a6c:	99 23       	and	r25, r25
    2a6e:	c9 f3       	breq	.-14     	; 0x2a62 <__divsf3+0x14>
    2a70:	55 23       	and	r21, r21
    2a72:	b1 f3       	breq	.-20     	; 0x2a60 <__divsf3+0x12>
    2a74:	95 1b       	sub	r25, r21
    2a76:	55 0b       	sbc	r21, r21
    2a78:	bb 27       	eor	r27, r27
    2a7a:	aa 27       	eor	r26, r26
    2a7c:	62 17       	cp	r22, r18
    2a7e:	73 07       	cpc	r23, r19
    2a80:	84 07       	cpc	r24, r20
    2a82:	38 f0       	brcs	.+14     	; 0x2a92 <__divsf3_pse+0x26>
    2a84:	9f 5f       	subi	r25, 0xFF	; 255
    2a86:	5f 4f       	sbci	r21, 0xFF	; 255
    2a88:	22 0f       	add	r18, r18
    2a8a:	33 1f       	adc	r19, r19
    2a8c:	44 1f       	adc	r20, r20
    2a8e:	aa 1f       	adc	r26, r26
    2a90:	a9 f3       	breq	.-22     	; 0x2a7c <__divsf3_pse+0x10>
    2a92:	33 d0       	rcall	.+102    	; 0x2afa <__divsf3_pse+0x8e>
    2a94:	0e 2e       	mov	r0, r30
    2a96:	3a f0       	brmi	.+14     	; 0x2aa6 <__divsf3_pse+0x3a>
    2a98:	e0 e8       	ldi	r30, 0x80	; 128
    2a9a:	30 d0       	rcall	.+96     	; 0x2afc <__divsf3_pse+0x90>
    2a9c:	91 50       	subi	r25, 0x01	; 1
    2a9e:	50 40       	sbci	r21, 0x00	; 0
    2aa0:	e6 95       	lsr	r30
    2aa2:	00 1c       	adc	r0, r0
    2aa4:	ca f7       	brpl	.-14     	; 0x2a98 <__divsf3_pse+0x2c>
    2aa6:	29 d0       	rcall	.+82     	; 0x2afa <__divsf3_pse+0x8e>
    2aa8:	fe 2f       	mov	r31, r30
    2aaa:	27 d0       	rcall	.+78     	; 0x2afa <__divsf3_pse+0x8e>
    2aac:	66 0f       	add	r22, r22
    2aae:	77 1f       	adc	r23, r23
    2ab0:	88 1f       	adc	r24, r24
    2ab2:	bb 1f       	adc	r27, r27
    2ab4:	26 17       	cp	r18, r22
    2ab6:	37 07       	cpc	r19, r23
    2ab8:	48 07       	cpc	r20, r24
    2aba:	ab 07       	cpc	r26, r27
    2abc:	b0 e8       	ldi	r27, 0x80	; 128
    2abe:	09 f0       	breq	.+2      	; 0x2ac2 <__divsf3_pse+0x56>
    2ac0:	bb 0b       	sbc	r27, r27
    2ac2:	80 2d       	mov	r24, r0
    2ac4:	bf 01       	movw	r22, r30
    2ac6:	ff 27       	eor	r31, r31
    2ac8:	93 58       	subi	r25, 0x83	; 131
    2aca:	5f 4f       	sbci	r21, 0xFF	; 255
    2acc:	2a f0       	brmi	.+10     	; 0x2ad8 <__divsf3_pse+0x6c>
    2ace:	9e 3f       	cpi	r25, 0xFE	; 254
    2ad0:	51 05       	cpc	r21, r1
    2ad2:	68 f0       	brcs	.+26     	; 0x2aee <__divsf3_pse+0x82>
    2ad4:	b6 c0       	rjmp	.+364    	; 0x2c42 <__fp_inf>
    2ad6:	25 c1       	rjmp	.+586    	; 0x2d22 <__fp_szero>
    2ad8:	5f 3f       	cpi	r21, 0xFF	; 255
    2ada:	ec f3       	brlt	.-6      	; 0x2ad6 <__divsf3_pse+0x6a>
    2adc:	98 3e       	cpi	r25, 0xE8	; 232
    2ade:	dc f3       	brlt	.-10     	; 0x2ad6 <__divsf3_pse+0x6a>
    2ae0:	86 95       	lsr	r24
    2ae2:	77 95       	ror	r23
    2ae4:	67 95       	ror	r22
    2ae6:	b7 95       	ror	r27
    2ae8:	f7 95       	ror	r31
    2aea:	9f 5f       	subi	r25, 0xFF	; 255
    2aec:	c9 f7       	brne	.-14     	; 0x2ae0 <__divsf3_pse+0x74>
    2aee:	88 0f       	add	r24, r24
    2af0:	91 1d       	adc	r25, r1
    2af2:	96 95       	lsr	r25
    2af4:	87 95       	ror	r24
    2af6:	97 f9       	bld	r25, 7
    2af8:	08 95       	ret
    2afa:	e1 e0       	ldi	r30, 0x01	; 1
    2afc:	66 0f       	add	r22, r22
    2afe:	77 1f       	adc	r23, r23
    2b00:	88 1f       	adc	r24, r24
    2b02:	bb 1f       	adc	r27, r27
    2b04:	62 17       	cp	r22, r18
    2b06:	73 07       	cpc	r23, r19
    2b08:	84 07       	cpc	r24, r20
    2b0a:	ba 07       	cpc	r27, r26
    2b0c:	20 f0       	brcs	.+8      	; 0x2b16 <__divsf3_pse+0xaa>
    2b0e:	62 1b       	sub	r22, r18
    2b10:	73 0b       	sbc	r23, r19
    2b12:	84 0b       	sbc	r24, r20
    2b14:	ba 0b       	sbc	r27, r26
    2b16:	ee 1f       	adc	r30, r30
    2b18:	88 f7       	brcc	.-30     	; 0x2afc <__divsf3_pse+0x90>
    2b1a:	e0 95       	com	r30
    2b1c:	08 95       	ret

00002b1e <__fixsfsi>:
    2b1e:	04 d0       	rcall	.+8      	; 0x2b28 <__fixunssfsi>
    2b20:	68 94       	set
    2b22:	b1 11       	cpse	r27, r1
    2b24:	fe c0       	rjmp	.+508    	; 0x2d22 <__fp_szero>
    2b26:	08 95       	ret

00002b28 <__fixunssfsi>:
    2b28:	e1 d0       	rcall	.+450    	; 0x2cec <__fp_splitA>
    2b2a:	88 f0       	brcs	.+34     	; 0x2b4e <__fixunssfsi+0x26>
    2b2c:	9f 57       	subi	r25, 0x7F	; 127
    2b2e:	90 f0       	brcs	.+36     	; 0x2b54 <__fixunssfsi+0x2c>
    2b30:	b9 2f       	mov	r27, r25
    2b32:	99 27       	eor	r25, r25
    2b34:	b7 51       	subi	r27, 0x17	; 23
    2b36:	a0 f0       	brcs	.+40     	; 0x2b60 <__fixunssfsi+0x38>
    2b38:	d1 f0       	breq	.+52     	; 0x2b6e <__fixunssfsi+0x46>
    2b3a:	66 0f       	add	r22, r22
    2b3c:	77 1f       	adc	r23, r23
    2b3e:	88 1f       	adc	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	1a f0       	brmi	.+6      	; 0x2b4a <__fixunssfsi+0x22>
    2b44:	ba 95       	dec	r27
    2b46:	c9 f7       	brne	.-14     	; 0x2b3a <__fixunssfsi+0x12>
    2b48:	12 c0       	rjmp	.+36     	; 0x2b6e <__fixunssfsi+0x46>
    2b4a:	b1 30       	cpi	r27, 0x01	; 1
    2b4c:	81 f0       	breq	.+32     	; 0x2b6e <__fixunssfsi+0x46>
    2b4e:	e8 d0       	rcall	.+464    	; 0x2d20 <__fp_zero>
    2b50:	b1 e0       	ldi	r27, 0x01	; 1
    2b52:	08 95       	ret
    2b54:	e5 c0       	rjmp	.+458    	; 0x2d20 <__fp_zero>
    2b56:	67 2f       	mov	r22, r23
    2b58:	78 2f       	mov	r23, r24
    2b5a:	88 27       	eor	r24, r24
    2b5c:	b8 5f       	subi	r27, 0xF8	; 248
    2b5e:	39 f0       	breq	.+14     	; 0x2b6e <__fixunssfsi+0x46>
    2b60:	b9 3f       	cpi	r27, 0xF9	; 249
    2b62:	cc f3       	brlt	.-14     	; 0x2b56 <__fixunssfsi+0x2e>
    2b64:	86 95       	lsr	r24
    2b66:	77 95       	ror	r23
    2b68:	67 95       	ror	r22
    2b6a:	b3 95       	inc	r27
    2b6c:	d9 f7       	brne	.-10     	; 0x2b64 <__fixunssfsi+0x3c>
    2b6e:	3e f4       	brtc	.+14     	; 0x2b7e <__fixunssfsi+0x56>
    2b70:	90 95       	com	r25
    2b72:	80 95       	com	r24
    2b74:	70 95       	com	r23
    2b76:	61 95       	neg	r22
    2b78:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7e:	08 95       	ret

00002b80 <__floatunsisf>:
    2b80:	e8 94       	clt
    2b82:	09 c0       	rjmp	.+18     	; 0x2b96 <__floatsisf+0x12>

00002b84 <__floatsisf>:
    2b84:	97 fb       	bst	r25, 7
    2b86:	3e f4       	brtc	.+14     	; 0x2b96 <__floatsisf+0x12>
    2b88:	90 95       	com	r25
    2b8a:	80 95       	com	r24
    2b8c:	70 95       	com	r23
    2b8e:	61 95       	neg	r22
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	8f 4f       	sbci	r24, 0xFF	; 255
    2b94:	9f 4f       	sbci	r25, 0xFF	; 255
    2b96:	99 23       	and	r25, r25
    2b98:	a9 f0       	breq	.+42     	; 0x2bc4 <__floatsisf+0x40>
    2b9a:	f9 2f       	mov	r31, r25
    2b9c:	96 e9       	ldi	r25, 0x96	; 150
    2b9e:	bb 27       	eor	r27, r27
    2ba0:	93 95       	inc	r25
    2ba2:	f6 95       	lsr	r31
    2ba4:	87 95       	ror	r24
    2ba6:	77 95       	ror	r23
    2ba8:	67 95       	ror	r22
    2baa:	b7 95       	ror	r27
    2bac:	f1 11       	cpse	r31, r1
    2bae:	f8 cf       	rjmp	.-16     	; 0x2ba0 <__floatsisf+0x1c>
    2bb0:	fa f4       	brpl	.+62     	; 0x2bf0 <__floatsisf+0x6c>
    2bb2:	bb 0f       	add	r27, r27
    2bb4:	11 f4       	brne	.+4      	; 0x2bba <__floatsisf+0x36>
    2bb6:	60 ff       	sbrs	r22, 0
    2bb8:	1b c0       	rjmp	.+54     	; 0x2bf0 <__floatsisf+0x6c>
    2bba:	6f 5f       	subi	r22, 0xFF	; 255
    2bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc2:	16 c0       	rjmp	.+44     	; 0x2bf0 <__floatsisf+0x6c>
    2bc4:	88 23       	and	r24, r24
    2bc6:	11 f0       	breq	.+4      	; 0x2bcc <__floatsisf+0x48>
    2bc8:	96 e9       	ldi	r25, 0x96	; 150
    2bca:	11 c0       	rjmp	.+34     	; 0x2bee <__floatsisf+0x6a>
    2bcc:	77 23       	and	r23, r23
    2bce:	21 f0       	breq	.+8      	; 0x2bd8 <__floatsisf+0x54>
    2bd0:	9e e8       	ldi	r25, 0x8E	; 142
    2bd2:	87 2f       	mov	r24, r23
    2bd4:	76 2f       	mov	r23, r22
    2bd6:	05 c0       	rjmp	.+10     	; 0x2be2 <__floatsisf+0x5e>
    2bd8:	66 23       	and	r22, r22
    2bda:	71 f0       	breq	.+28     	; 0x2bf8 <__floatsisf+0x74>
    2bdc:	96 e8       	ldi	r25, 0x86	; 134
    2bde:	86 2f       	mov	r24, r22
    2be0:	70 e0       	ldi	r23, 0x00	; 0
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	2a f0       	brmi	.+10     	; 0x2bf0 <__floatsisf+0x6c>
    2be6:	9a 95       	dec	r25
    2be8:	66 0f       	add	r22, r22
    2bea:	77 1f       	adc	r23, r23
    2bec:	88 1f       	adc	r24, r24
    2bee:	da f7       	brpl	.-10     	; 0x2be6 <__floatsisf+0x62>
    2bf0:	88 0f       	add	r24, r24
    2bf2:	96 95       	lsr	r25
    2bf4:	87 95       	ror	r24
    2bf6:	97 f9       	bld	r25, 7
    2bf8:	08 95       	ret

00002bfa <__fp_cmp>:
    2bfa:	99 0f       	add	r25, r25
    2bfc:	00 08       	sbc	r0, r0
    2bfe:	55 0f       	add	r21, r21
    2c00:	aa 0b       	sbc	r26, r26
    2c02:	e0 e8       	ldi	r30, 0x80	; 128
    2c04:	fe ef       	ldi	r31, 0xFE	; 254
    2c06:	16 16       	cp	r1, r22
    2c08:	17 06       	cpc	r1, r23
    2c0a:	e8 07       	cpc	r30, r24
    2c0c:	f9 07       	cpc	r31, r25
    2c0e:	c0 f0       	brcs	.+48     	; 0x2c40 <__fp_cmp+0x46>
    2c10:	12 16       	cp	r1, r18
    2c12:	13 06       	cpc	r1, r19
    2c14:	e4 07       	cpc	r30, r20
    2c16:	f5 07       	cpc	r31, r21
    2c18:	98 f0       	brcs	.+38     	; 0x2c40 <__fp_cmp+0x46>
    2c1a:	62 1b       	sub	r22, r18
    2c1c:	73 0b       	sbc	r23, r19
    2c1e:	84 0b       	sbc	r24, r20
    2c20:	95 0b       	sbc	r25, r21
    2c22:	39 f4       	brne	.+14     	; 0x2c32 <__fp_cmp+0x38>
    2c24:	0a 26       	eor	r0, r26
    2c26:	61 f0       	breq	.+24     	; 0x2c40 <__fp_cmp+0x46>
    2c28:	23 2b       	or	r18, r19
    2c2a:	24 2b       	or	r18, r20
    2c2c:	25 2b       	or	r18, r21
    2c2e:	21 f4       	brne	.+8      	; 0x2c38 <__fp_cmp+0x3e>
    2c30:	08 95       	ret
    2c32:	0a 26       	eor	r0, r26
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <__fp_cmp+0x3e>
    2c36:	a1 40       	sbci	r26, 0x01	; 1
    2c38:	a6 95       	lsr	r26
    2c3a:	8f ef       	ldi	r24, 0xFF	; 255
    2c3c:	81 1d       	adc	r24, r1
    2c3e:	81 1d       	adc	r24, r1
    2c40:	08 95       	ret

00002c42 <__fp_inf>:
    2c42:	97 f9       	bld	r25, 7
    2c44:	9f 67       	ori	r25, 0x7F	; 127
    2c46:	80 e8       	ldi	r24, 0x80	; 128
    2c48:	70 e0       	ldi	r23, 0x00	; 0
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	08 95       	ret

00002c4e <__fp_nan>:
    2c4e:	9f ef       	ldi	r25, 0xFF	; 255
    2c50:	80 ec       	ldi	r24, 0xC0	; 192
    2c52:	08 95       	ret

00002c54 <__fp_powser>:
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	1f 93       	push	r17
    2c5a:	0f 93       	push	r16
    2c5c:	ff 92       	push	r15
    2c5e:	ef 92       	push	r14
    2c60:	df 92       	push	r13
    2c62:	7b 01       	movw	r14, r22
    2c64:	8c 01       	movw	r16, r24
    2c66:	68 94       	set
    2c68:	05 c0       	rjmp	.+10     	; 0x2c74 <__fp_powser+0x20>
    2c6a:	da 2e       	mov	r13, r26
    2c6c:	ef 01       	movw	r28, r30
    2c6e:	76 d0       	rcall	.+236    	; 0x2d5c <__mulsf3x>
    2c70:	fe 01       	movw	r30, r28
    2c72:	e8 94       	clt
    2c74:	a5 91       	lpm	r26, Z+
    2c76:	25 91       	lpm	r18, Z+
    2c78:	35 91       	lpm	r19, Z+
    2c7a:	45 91       	lpm	r20, Z+
    2c7c:	55 91       	lpm	r21, Z+
    2c7e:	ae f3       	brts	.-22     	; 0x2c6a <__fp_powser+0x16>
    2c80:	ef 01       	movw	r28, r30
    2c82:	2c de       	rcall	.-936    	; 0x28dc <__addsf3x>
    2c84:	fe 01       	movw	r30, r28
    2c86:	97 01       	movw	r18, r14
    2c88:	a8 01       	movw	r20, r16
    2c8a:	da 94       	dec	r13
    2c8c:	79 f7       	brne	.-34     	; 0x2c6c <__fp_powser+0x18>
    2c8e:	df 90       	pop	r13
    2c90:	ef 90       	pop	r14
    2c92:	ff 90       	pop	r15
    2c94:	0f 91       	pop	r16
    2c96:	1f 91       	pop	r17
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <__fp_pscA>:
    2c9e:	00 24       	eor	r0, r0
    2ca0:	0a 94       	dec	r0
    2ca2:	16 16       	cp	r1, r22
    2ca4:	17 06       	cpc	r1, r23
    2ca6:	18 06       	cpc	r1, r24
    2ca8:	09 06       	cpc	r0, r25
    2caa:	08 95       	ret

00002cac <__fp_pscB>:
    2cac:	00 24       	eor	r0, r0
    2cae:	0a 94       	dec	r0
    2cb0:	12 16       	cp	r1, r18
    2cb2:	13 06       	cpc	r1, r19
    2cb4:	14 06       	cpc	r1, r20
    2cb6:	05 06       	cpc	r0, r21
    2cb8:	08 95       	ret

00002cba <__fp_round>:
    2cba:	09 2e       	mov	r0, r25
    2cbc:	03 94       	inc	r0
    2cbe:	00 0c       	add	r0, r0
    2cc0:	11 f4       	brne	.+4      	; 0x2cc6 <__fp_round+0xc>
    2cc2:	88 23       	and	r24, r24
    2cc4:	52 f0       	brmi	.+20     	; 0x2cda <__fp_round+0x20>
    2cc6:	bb 0f       	add	r27, r27
    2cc8:	40 f4       	brcc	.+16     	; 0x2cda <__fp_round+0x20>
    2cca:	bf 2b       	or	r27, r31
    2ccc:	11 f4       	brne	.+4      	; 0x2cd2 <__fp_round+0x18>
    2cce:	60 ff       	sbrs	r22, 0
    2cd0:	04 c0       	rjmp	.+8      	; 0x2cda <__fp_round+0x20>
    2cd2:	6f 5f       	subi	r22, 0xFF	; 255
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cda:	08 95       	ret

00002cdc <__fp_split3>:
    2cdc:	57 fd       	sbrc	r21, 7
    2cde:	90 58       	subi	r25, 0x80	; 128
    2ce0:	44 0f       	add	r20, r20
    2ce2:	55 1f       	adc	r21, r21
    2ce4:	59 f0       	breq	.+22     	; 0x2cfc <__fp_splitA+0x10>
    2ce6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ce8:	71 f0       	breq	.+28     	; 0x2d06 <__fp_splitA+0x1a>
    2cea:	47 95       	ror	r20

00002cec <__fp_splitA>:
    2cec:	88 0f       	add	r24, r24
    2cee:	97 fb       	bst	r25, 7
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	61 f0       	breq	.+24     	; 0x2d0c <__fp_splitA+0x20>
    2cf4:	9f 3f       	cpi	r25, 0xFF	; 255
    2cf6:	79 f0       	breq	.+30     	; 0x2d16 <__fp_splitA+0x2a>
    2cf8:	87 95       	ror	r24
    2cfa:	08 95       	ret
    2cfc:	12 16       	cp	r1, r18
    2cfe:	13 06       	cpc	r1, r19
    2d00:	14 06       	cpc	r1, r20
    2d02:	55 1f       	adc	r21, r21
    2d04:	f2 cf       	rjmp	.-28     	; 0x2cea <__fp_split3+0xe>
    2d06:	46 95       	lsr	r20
    2d08:	f1 df       	rcall	.-30     	; 0x2cec <__fp_splitA>
    2d0a:	08 c0       	rjmp	.+16     	; 0x2d1c <__fp_splitA+0x30>
    2d0c:	16 16       	cp	r1, r22
    2d0e:	17 06       	cpc	r1, r23
    2d10:	18 06       	cpc	r1, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	f1 cf       	rjmp	.-30     	; 0x2cf8 <__fp_splitA+0xc>
    2d16:	86 95       	lsr	r24
    2d18:	71 05       	cpc	r23, r1
    2d1a:	61 05       	cpc	r22, r1
    2d1c:	08 94       	sec
    2d1e:	08 95       	ret

00002d20 <__fp_zero>:
    2d20:	e8 94       	clt

00002d22 <__fp_szero>:
    2d22:	bb 27       	eor	r27, r27
    2d24:	66 27       	eor	r22, r22
    2d26:	77 27       	eor	r23, r23
    2d28:	cb 01       	movw	r24, r22
    2d2a:	97 f9       	bld	r25, 7
    2d2c:	08 95       	ret

00002d2e <__gesf2>:
    2d2e:	65 df       	rcall	.-310    	; 0x2bfa <__fp_cmp>
    2d30:	08 f4       	brcc	.+2      	; 0x2d34 <__gesf2+0x6>
    2d32:	8f ef       	ldi	r24, 0xFF	; 255
    2d34:	08 95       	ret

00002d36 <inverse>:
    2d36:	9b 01       	movw	r18, r22
    2d38:	ac 01       	movw	r20, r24
    2d3a:	60 e0       	ldi	r22, 0x00	; 0
    2d3c:	70 e0       	ldi	r23, 0x00	; 0
    2d3e:	80 e8       	ldi	r24, 0x80	; 128
    2d40:	9f e3       	ldi	r25, 0x3F	; 63
    2d42:	85 ce       	rjmp	.-758    	; 0x2a4e <__divsf3>

00002d44 <__mulsf3>:
    2d44:	0b d0       	rcall	.+22     	; 0x2d5c <__mulsf3x>
    2d46:	b9 cf       	rjmp	.-142    	; 0x2cba <__fp_round>
    2d48:	aa df       	rcall	.-172    	; 0x2c9e <__fp_pscA>
    2d4a:	28 f0       	brcs	.+10     	; 0x2d56 <__mulsf3+0x12>
    2d4c:	af df       	rcall	.-162    	; 0x2cac <__fp_pscB>
    2d4e:	18 f0       	brcs	.+6      	; 0x2d56 <__mulsf3+0x12>
    2d50:	95 23       	and	r25, r21
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <__mulsf3+0x12>
    2d54:	76 cf       	rjmp	.-276    	; 0x2c42 <__fp_inf>
    2d56:	7b cf       	rjmp	.-266    	; 0x2c4e <__fp_nan>
    2d58:	11 24       	eor	r1, r1
    2d5a:	e3 cf       	rjmp	.-58     	; 0x2d22 <__fp_szero>

00002d5c <__mulsf3x>:
    2d5c:	bf df       	rcall	.-130    	; 0x2cdc <__fp_split3>
    2d5e:	a0 f3       	brcs	.-24     	; 0x2d48 <__mulsf3+0x4>

00002d60 <__mulsf3_pse>:
    2d60:	95 9f       	mul	r25, r21
    2d62:	d1 f3       	breq	.-12     	; 0x2d58 <__mulsf3+0x14>
    2d64:	95 0f       	add	r25, r21
    2d66:	50 e0       	ldi	r21, 0x00	; 0
    2d68:	55 1f       	adc	r21, r21
    2d6a:	62 9f       	mul	r22, r18
    2d6c:	f0 01       	movw	r30, r0
    2d6e:	72 9f       	mul	r23, r18
    2d70:	bb 27       	eor	r27, r27
    2d72:	f0 0d       	add	r31, r0
    2d74:	b1 1d       	adc	r27, r1
    2d76:	63 9f       	mul	r22, r19
    2d78:	aa 27       	eor	r26, r26
    2d7a:	f0 0d       	add	r31, r0
    2d7c:	b1 1d       	adc	r27, r1
    2d7e:	aa 1f       	adc	r26, r26
    2d80:	64 9f       	mul	r22, r20
    2d82:	66 27       	eor	r22, r22
    2d84:	b0 0d       	add	r27, r0
    2d86:	a1 1d       	adc	r26, r1
    2d88:	66 1f       	adc	r22, r22
    2d8a:	82 9f       	mul	r24, r18
    2d8c:	22 27       	eor	r18, r18
    2d8e:	b0 0d       	add	r27, r0
    2d90:	a1 1d       	adc	r26, r1
    2d92:	62 1f       	adc	r22, r18
    2d94:	73 9f       	mul	r23, r19
    2d96:	b0 0d       	add	r27, r0
    2d98:	a1 1d       	adc	r26, r1
    2d9a:	62 1f       	adc	r22, r18
    2d9c:	83 9f       	mul	r24, r19
    2d9e:	a0 0d       	add	r26, r0
    2da0:	61 1d       	adc	r22, r1
    2da2:	22 1f       	adc	r18, r18
    2da4:	74 9f       	mul	r23, r20
    2da6:	33 27       	eor	r19, r19
    2da8:	a0 0d       	add	r26, r0
    2daa:	61 1d       	adc	r22, r1
    2dac:	23 1f       	adc	r18, r19
    2dae:	84 9f       	mul	r24, r20
    2db0:	60 0d       	add	r22, r0
    2db2:	21 1d       	adc	r18, r1
    2db4:	82 2f       	mov	r24, r18
    2db6:	76 2f       	mov	r23, r22
    2db8:	6a 2f       	mov	r22, r26
    2dba:	11 24       	eor	r1, r1
    2dbc:	9f 57       	subi	r25, 0x7F	; 127
    2dbe:	50 40       	sbci	r21, 0x00	; 0
    2dc0:	8a f0       	brmi	.+34     	; 0x2de4 <__mulsf3_pse+0x84>
    2dc2:	e1 f0       	breq	.+56     	; 0x2dfc <__mulsf3_pse+0x9c>
    2dc4:	88 23       	and	r24, r24
    2dc6:	4a f0       	brmi	.+18     	; 0x2dda <__mulsf3_pse+0x7a>
    2dc8:	ee 0f       	add	r30, r30
    2dca:	ff 1f       	adc	r31, r31
    2dcc:	bb 1f       	adc	r27, r27
    2dce:	66 1f       	adc	r22, r22
    2dd0:	77 1f       	adc	r23, r23
    2dd2:	88 1f       	adc	r24, r24
    2dd4:	91 50       	subi	r25, 0x01	; 1
    2dd6:	50 40       	sbci	r21, 0x00	; 0
    2dd8:	a9 f7       	brne	.-22     	; 0x2dc4 <__mulsf3_pse+0x64>
    2dda:	9e 3f       	cpi	r25, 0xFE	; 254
    2ddc:	51 05       	cpc	r21, r1
    2dde:	70 f0       	brcs	.+28     	; 0x2dfc <__mulsf3_pse+0x9c>
    2de0:	30 cf       	rjmp	.-416    	; 0x2c42 <__fp_inf>
    2de2:	9f cf       	rjmp	.-194    	; 0x2d22 <__fp_szero>
    2de4:	5f 3f       	cpi	r21, 0xFF	; 255
    2de6:	ec f3       	brlt	.-6      	; 0x2de2 <__mulsf3_pse+0x82>
    2de8:	98 3e       	cpi	r25, 0xE8	; 232
    2dea:	dc f3       	brlt	.-10     	; 0x2de2 <__mulsf3_pse+0x82>
    2dec:	86 95       	lsr	r24
    2dee:	77 95       	ror	r23
    2df0:	67 95       	ror	r22
    2df2:	b7 95       	ror	r27
    2df4:	f7 95       	ror	r31
    2df6:	e7 95       	ror	r30
    2df8:	9f 5f       	subi	r25, 0xFF	; 255
    2dfa:	c1 f7       	brne	.-16     	; 0x2dec <__mulsf3_pse+0x8c>
    2dfc:	fe 2b       	or	r31, r30
    2dfe:	88 0f       	add	r24, r24
    2e00:	91 1d       	adc	r25, r1
    2e02:	96 95       	lsr	r25
    2e04:	87 95       	ror	r24
    2e06:	97 f9       	bld	r25, 7
    2e08:	08 95       	ret

00002e0a <square>:
    2e0a:	9b 01       	movw	r18, r22
    2e0c:	ac 01       	movw	r20, r24
    2e0e:	9a cf       	rjmp	.-204    	; 0x2d44 <__mulsf3>

00002e10 <__divmodhi4>:
    2e10:	97 fb       	bst	r25, 7
    2e12:	07 2e       	mov	r0, r23
    2e14:	16 f4       	brtc	.+4      	; 0x2e1a <__divmodhi4+0xa>
    2e16:	00 94       	com	r0
    2e18:	06 d0       	rcall	.+12     	; 0x2e26 <__divmodhi4_neg1>
    2e1a:	77 fd       	sbrc	r23, 7
    2e1c:	08 d0       	rcall	.+16     	; 0x2e2e <__divmodhi4_neg2>
    2e1e:	1a d0       	rcall	.+52     	; 0x2e54 <__udivmodhi4>
    2e20:	07 fc       	sbrc	r0, 7
    2e22:	05 d0       	rcall	.+10     	; 0x2e2e <__divmodhi4_neg2>
    2e24:	3e f4       	brtc	.+14     	; 0x2e34 <__divmodhi4_exit>

00002e26 <__divmodhi4_neg1>:
    2e26:	90 95       	com	r25
    2e28:	81 95       	neg	r24
    2e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2c:	08 95       	ret

00002e2e <__divmodhi4_neg2>:
    2e2e:	70 95       	com	r23
    2e30:	61 95       	neg	r22
    2e32:	7f 4f       	sbci	r23, 0xFF	; 255

00002e34 <__divmodhi4_exit>:
    2e34:	08 95       	ret

00002e36 <__umulhisi3>:
    2e36:	a2 9f       	mul	r26, r18
    2e38:	b0 01       	movw	r22, r0
    2e3a:	b3 9f       	mul	r27, r19
    2e3c:	c0 01       	movw	r24, r0
    2e3e:	a3 9f       	mul	r26, r19
    2e40:	70 0d       	add	r23, r0
    2e42:	81 1d       	adc	r24, r1
    2e44:	11 24       	eor	r1, r1
    2e46:	91 1d       	adc	r25, r1
    2e48:	b2 9f       	mul	r27, r18
    2e4a:	70 0d       	add	r23, r0
    2e4c:	81 1d       	adc	r24, r1
    2e4e:	11 24       	eor	r1, r1
    2e50:	91 1d       	adc	r25, r1
    2e52:	08 95       	ret

00002e54 <__udivmodhi4>:
    2e54:	aa 1b       	sub	r26, r26
    2e56:	bb 1b       	sub	r27, r27
    2e58:	51 e1       	ldi	r21, 0x11	; 17
    2e5a:	07 c0       	rjmp	.+14     	; 0x2e6a <__udivmodhi4_ep>

00002e5c <__udivmodhi4_loop>:
    2e5c:	aa 1f       	adc	r26, r26
    2e5e:	bb 1f       	adc	r27, r27
    2e60:	a6 17       	cp	r26, r22
    2e62:	b7 07       	cpc	r27, r23
    2e64:	10 f0       	brcs	.+4      	; 0x2e6a <__udivmodhi4_ep>
    2e66:	a6 1b       	sub	r26, r22
    2e68:	b7 0b       	sbc	r27, r23

00002e6a <__udivmodhi4_ep>:
    2e6a:	88 1f       	adc	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	5a 95       	dec	r21
    2e70:	a9 f7       	brne	.-22     	; 0x2e5c <__udivmodhi4_loop>
    2e72:	80 95       	com	r24
    2e74:	90 95       	com	r25
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	08 95       	ret

00002e7c <__tablejump2__>:
    2e7c:	ee 0f       	add	r30, r30
    2e7e:	ff 1f       	adc	r31, r31
    2e80:	88 1f       	adc	r24, r24
    2e82:	8b bf       	out	0x3b, r24	; 59
    2e84:	07 90       	elpm	r0, Z+
    2e86:	f6 91       	elpm	r31, Z
    2e88:	e0 2d       	mov	r30, r0
    2e8a:	19 94       	eijmp

00002e8c <_exit>:
    2e8c:	f8 94       	cli

00002e8e <__stop_program>:
    2e8e:	ff cf       	rjmp	.-2      	; 0x2e8e <__stop_program>
